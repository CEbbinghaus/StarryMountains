// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.7.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    }, _CryptoUtils: function _CryptoUtils() {
    }, _HashBase: function _HashBase() {
    }, _MD5: function _MD5() {
    }, _SHA1: function _SHA1() {
    }, HttpServer: function HttpServer() {
    }, HttpConnectionsInfo: function HttpConnectionsInfo() {
    }, HttpHeaders: function HttpHeaders() {
    }, HeaderValue: function HeaderValue() {
    }, HttpSession: function HttpSession() {
    }, ContentType: function ContentType() {
    }, Cookie: function Cookie() {
    }, HttpRequest: function HttpRequest() {
    }, HttpResponse: function HttpResponse() {
    }, HttpClient: function HttpClient() {
    }, HttpClientRequest: function HttpClientRequest() {
    }, HttpClientResponse: function HttpClientResponse() {
    }, HttpClientResponseCompressionState: function HttpClientResponseCompressionState() {
    }, HttpClientCredentials: function HttpClientCredentials() {
    }, HttpClientBasicCredentials: function HttpClientBasicCredentials() {
    }, HttpClientDigestCredentials: function HttpClientDigestCredentials() {
    }, HttpConnectionInfo: function HttpConnectionInfo() {
    }, RedirectInfo: function RedirectInfo() {
    }, DetachedSocket: function DetachedSocket() {
    }, HttpException: function HttpException() {
    }, RedirectException: function RedirectException() {
    }, HttpDate: function HttpDate() {
    }, _HttpHeaders: function _HttpHeaders() {
    }, _HeaderValue: function _HeaderValue() {
    }, _ContentType: function _ContentType() {
    }, _Cookie: function _Cookie() {
    }, _ServiceObject: function _ServiceObject() {
    }, _CopyingBytesBuilder: function _CopyingBytesBuilder() {
    }, _HttpIncoming: function _HttpIncoming() {
    }, _HttpInboundMessageListInt: function _HttpInboundMessageListInt() {
    }, _HttpInboundMessage: function _HttpInboundMessage() {
    }, _HttpRequest: function _HttpRequest() {
    }, _HttpClientResponse: function _HttpClientResponse() {
    }, _ToUint8List: function _ToUint8List() {
    }, _Uint8ListConversionSink: function _Uint8ListConversionSink() {
    }, _StreamSinkImpl: function _StreamSinkImpl() {
    }, _IOSinkImpl: function _IOSinkImpl() {
    }, _HttpOutboundMessage: function _HttpOutboundMessage() {
    }, _HttpResponse: function _HttpResponse() {
    }, _HttpClientRequest: function _HttpClientRequest() {
    }, _HttpGZipSink: function _HttpGZipSink() {
    }, _HttpOutgoing: function _HttpOutgoing() {
    }, _HttpClientConnection: function _HttpClientConnection() {
    }, _ConnectionInfo: function _ConnectionInfo() {
    }, _ConnectionTarget: function _ConnectionTarget() {
    }, _HttpClient: function _HttpClient() {
    }, _HttpConnection: function _HttpConnection() {
    }, _HttpServer: function _HttpServer() {
    }, _ProxyConfiguration: function _ProxyConfiguration() {
    }, _Proxy: function _Proxy() {
    }, _HttpConnectionInfo: function _HttpConnectionInfo() {
    }, _DetachedSocket: function _DetachedSocket() {
    }, _AuthenticationScheme: function _AuthenticationScheme() {
    }, _Credentials: function _Credentials() {
    }, _SiteCredentials: function _SiteCredentials() {
    }, _ProxyCredentials: function _ProxyCredentials() {
    }, _HttpClientCredentials: function _HttpClientCredentials() {
    }, _HttpClientBasicCredentials: function _HttpClientBasicCredentials() {
    }, _HttpClientDigestCredentials: function _HttpClientDigestCredentials() {
    }, _RedirectInfo: function _RedirectInfo() {
    }, _Const: function _Const() {
    }, _CharCode: function _CharCode() {
    }, _State: function _State() {
    }, _HttpVersion: function _HttpVersion() {
    }, _MessageType: function _MessageType() {
    }, _HttpDetachedStreamSubscription: function _HttpDetachedStreamSubscription() {
    }, _HttpDetachedIncoming: function _HttpDetachedIncoming() {
    }, _HttpParser: function _HttpParser() {
    }, _HttpSession: function _HttpSession() {
    }, _HttpSessionManager: function _HttpSessionManager() {
    }, HttpOverrides: function HttpOverrides() {
    }, _HttpOverridesScope: function _HttpOverridesScope() {
    }, WebSocketStatus: function WebSocketStatus() {
    }, CompressionOptions: function CompressionOptions() {
    }, WebSocketTransformer: function WebSocketTransformer() {
    }, WebSocket: function WebSocket() {
    }, WebSocketException: function WebSocketException() {
    }, _WebSocketMessageType: function _WebSocketMessageType() {
    }, _WebSocketOpcode: function _WebSocketOpcode() {
    }, _EncodedString: function _EncodedString() {
    }, _CompressionMaxWindowBits: function _CompressionMaxWindowBits() {
    }, _WebSocketProtocolTransformer: function _WebSocketProtocolTransformer() {
    }, _WebSocketPing: function _WebSocketPing() {
    }, _WebSocketPong: function _WebSocketPong() {
    }, _WebSocketTransformerImpl: function _WebSocketTransformerImpl() {
    }, _WebSocketPerMessageDeflate: function _WebSocketPerMessageDeflate() {
    }, _WebSocketOutgoingTransformer: function _WebSocketOutgoingTransformer() {
    }, _WebSocketConsumer: function _WebSocketConsumer() {
    }, _WebSocketImpl: function _WebSocketImpl() {
    }, __HttpConnection_LinkedListEntry__ServiceObject: function __HttpConnection_LinkedListEntry__ServiceObject() {
    }, __HttpServer_Stream__ServiceObject: function __HttpServer_Stream__ServiceObject() {
    }, __WebSocketImpl_Stream__ServiceObject: function __WebSocketImpl_Stream__ServiceObject() {
    },
    printToConsole: function(line) {
      H.printString(H.S(line));
    },
    makeListFixedLength: function(growableList, $T) {
      return H.assertSubtype(J.JSArray_markFixedList(growableList), "$isList", [$T], "$asList");
    },
    makeFixedListUnmodifiable: function(fixedLengthList, $T) {
      return H.assertSubtype(J.JSArray_markUnmodifiableList(fixedLengthList), "$isList", [$T], "$asList");
    },
    CodeUnits$: function(_string) {
      return new H.CodeUnits(_string);
    },
    hexDigitValue: function(char) {
      var digit, letter;
      if (typeof char !== "number")
        return char.$xor();
      digit = (char ^ 48) >>> 0;
      if (digit <= 9)
        return digit;
      letter = (char | 32) >>> 0;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    parseHexByte: function(source, index) {
      var digit2,
        digit1 = H.hexDigitValue(J.getInterceptor$s(source).codeUnitAt$1(source, index));
      if (typeof index !== "number")
        return index.$add();
      digit2 = H.hexDigitValue(C.JSString_methods.codeUnitAt$1(source, index + 1));
      if (typeof digit1 !== "number")
        return digit1.$mul();
      if (typeof digit2 !== "number")
        return H.iae(digit2);
      return digit1 * 16 + digit2 - (digit2 & 256);
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      var t1 = new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
      t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
      return t1;
    },
    ListIterator$: function(iterable, $E) {
      return new H.ListIterator(iterable, J.get$length$asx(iterable), [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthMappedIterable$(iterable, $function, $S, $T);
      return H.MappedIterable$_(iterable, $function, $S, $T);
    },
    MappedIterable$_: function(_iterable, _f, $S, $T) {
      return new H.MappedIterable(_iterable, _f, [$S, $T]);
    },
    EfficientLengthMappedIterable$: function(iterable, $function, $S, $T) {
      return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
    },
    MappedIterator$: function(_iterator, _f, $S, $T) {
      return new H.MappedIterator(_iterator, _f, [$S, $T]);
    },
    MappedListIterable$: function(_source, _f, $S, $T) {
      return new H.MappedListIterable(_source, _f, [$S, $T]);
    },
    WhereIterable$: function(_iterable, _f, $E) {
      return new H.WhereIterable(_iterable, _f, [$E]);
    },
    WhereIterator$: function(_iterator, _f, $E) {
      return new H.WhereIterator(_iterator, _f, [$E]);
    },
    ExpandIterable$: function(_iterable, _f, $S, $T) {
      return new H.ExpandIterable(_iterable, _f, [$S, $T]);
    },
    ExpandIterator$: function(_iterator, _f, $S, $T) {
      return new H.ExpandIterator(_iterator, _f, C.C_EmptyIterator, [$S, $T]);
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return H.EfficientLengthSkipIterable_EfficientLengthSkipIterable(iterable, count, $E);
      return H.SkipIterable$_(iterable, H._checkCount(count), $E);
    },
    SkipIterable$_: function(_iterable, _skipCount, $E) {
      return new H.SkipIterable(_iterable, _skipCount, [$E]);
    },
    EfficientLengthSkipIterable_EfficientLengthSkipIterable: function(iterable, count, $E) {
      return H.EfficientLengthSkipIterable$_(iterable, H._checkCount(count), $E);
    },
    EfficientLengthSkipIterable$_: function(iterable, count, $E) {
      return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
    },
    _checkCount: function(count) {
      P.ArgumentError_checkNotNull(count, "count");
      P.RangeError_checkNotNegative(count, "count");
      return count;
    },
    SkipIterator$: function(_iterator, _skipCount, $E) {
      var t1 = new H.SkipIterator(_iterator, _skipCount, [$E]);
      t1.SkipIterator$2(_iterator, _skipCount, $E);
      return t1;
    },
    SkipWhileIterable$: function(_iterable, _f, $E) {
      return new H.SkipWhileIterable(_iterable, _f, [$E]);
    },
    SkipWhileIterator$: function(_iterator, _f, $E) {
      return new H.SkipWhileIterator(_iterator, _f, [$E]);
    },
    EmptyIterable$: function($E) {
      return new H.EmptyIterable([$E]);
    },
    IterableElementError_noElement: function() {
      return P.StateError$("No element");
    },
    IterableElementError_tooMany: function() {
      return P.StateError$("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return P.StateError$("Too few elements");
    },
    ReversedListIterable$: function(_source, $E) {
      return new H.ReversedListIterable(_source, [$E]);
    },
    Symbol$unvalidated: function(_name) {
      return new H.Symbol(_name);
    },
    Symbol_getName: function(symbol) {
      return symbol.__internal$_name;
    },
    CastStream: function CastStream() {
    },
    CastStreamSubscription: function CastStreamSubscription() {
    },
    CastStreamTransformer: function CastStreamTransformer() {
    },
    CastConverter: function CastConverter() {
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator() {
    },
    CastIterable: function CastIterable() {
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable() {
    },
    _CastListBase: function _CastListBase() {
    },
    CastList: function CastList() {
    },
    CastSet: function CastSet() {
    },
    CastMap: function CastMap() {
    },
    CastQueue: function CastQueue() {
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    ExternalName: function ExternalName() {
    },
    Since: function Since() {
    },
    HttpStatus: function HttpStatus() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable() {
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable() {
    },
    TakeIterator: function TakeIterator() {
    },
    TakeWhileIterable: function TakeWhileIterable() {
    },
    TakeWhileIterator: function TakeWhileIterator() {
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipWhileIterable: function SkipWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipWhileIterator: function SkipWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._hasSkipped = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FollowedByIterable: function FollowedByIterable() {
    },
    EfficientLengthFollowedByIterable: function EfficientLengthFollowedByIterable() {
    },
    FollowedByIterator: function FollowedByIterator() {
    },
    WhereTypeIterable: function WhereTypeIterable() {
    },
    WhereTypeIterator: function WhereTypeIterator() {
    },
    IterableElementError: function IterableElementError() {
    },
    LinkedList: function LinkedList() {
    },
    LinkedListEntry0: function LinkedListEntry0() {
    },
    _LinkedListIterator: function _LinkedListIterator() {
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    FixedLengthListBase: function FixedLengthListBase() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable() {
    },
    ListMapView: function ListMapView() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    UnmodifiableListError: function UnmodifiableListError() {
    },
    NonGrowableListError: function NonGrowableListError() {
    },
    Sort: function Sort() {
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    JsGetName: function JsGetName() {
    },
    JsBuiltin: function JsBuiltin() {
    },
    RtiUniverseFieldNames: function RtiUniverseFieldNames() {
    },
    ConstantMapView$: function(base, $K, $V) {
      return new H.ConstantMapView(base, [$K, $V]);
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    _ConstantMapKeyIterable$: function(_map, $K) {
      return new H._ConstantMapKeyIterable(_map, [$K]);
    },
    Instantiation1$: function(f, T1) {
      var t1 = new H.Instantiation1(f, [T1]);
      t1.Instantiation$1(f);
      return t1;
    },
    instantiate1: function(f, T1) {
      return H.Instantiation1$(f, T1);
    },
    isCheckPropertyToJsConstructorName: function(isCheckProperty) {
      return isCheckProperty.substring(3);
    },
    isDartFunctionType: function(type) {
      return 'func' in type;
    },
    isDartFutureOrType: function(type) {
      return 'futureOr' in type;
    },
    isDartVoidTypeRti: function(type) {
      return type === -1;
    },
    rawRtiToJsConstructorName: function(rti) {
      return rti.name;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getRawRuntimeType: function(o) {
      return o.constructor;
    },
    builtinIsSubtype: function(type, other) {
      return '$is' + other in type.prototype;
    },
    isDartFunctionTypeRti: function(type) {
      return type.name === "Function";
    },
    isNullType: function(type) {
      return type.name === "Null";
    },
    isDartDynamicTypeRti: function(type) {
      return type == null;
    },
    isDartJsInteropTypeArgumentRti: function(type) {
      return type === -2;
    },
    isDartObjectTypeRti: function(type) {
      return type.name === "Object";
    },
    isNullTypeRti: function(type) {
      return type.name === "Null";
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    requiresPreamble: function() {
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = J.dispatchRecordIndexability(record);
        if (result != null)
          return H.boolTypeCheck(result);
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    createInvocationMirror: function($name, internalName, kind, $arguments, argumentNames, types) {
      return H.JSInvocationMirror$($name, H.stringTypeCheck(internalName), H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    createUnmangledInvocationMirror: function(symbol, internalName, kind, $arguments, argumentNames, types) {
      return H.JSInvocationMirror$(symbol, H.stringTypeCheck(internalName), H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    JSInvocationMirror$: function(_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount) {
      return new H.JSInvocationMirror(_memberName, _kind, _arguments, _namedArgumentNames, _typeArgumentCount);
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i, t2;
      H.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i) {
          t2 = C.JSString_methods._codeUnitAt$1(digitsPart, i);
          if (typeof t2 !== "number")
            return t2.$or();
          if ((t2 | 32) >>> 0 > maxCharCode)
            return;
        }
      }
      return parseInt(source, radix);
    },
    Primitives_formatType: function(className, typeArguments) {
      return H.unmangleAllIdentifiersIfPreservedAnyways(H.S(className) + H.S(H.joinArguments(typeArguments, 0)));
    },
    Primitives_objectTypeName: function(object) {
      var className = H.Primitives__objectClassName(object),
        $arguments = H.joinArguments(H.getRuntimeTypeInfo(object), 0);
      return H.S(className) + H.S($arguments);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = H.constructorNameFallback(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    Primitives_currentUri: function() {
      H.requiresPreamble();
      if (!!self.location)
        return self.location.href;
      return;
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = J.get$length$asx(array);
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(codePoints, "$isIterable")); H.boolConversionCheck(t1.moveNext$0());) {
        i = J.get$current$z(t1);
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, i;
      for (H.listSuperNativeTypeCheck(charCodes, "$isIterable"), t1 = J.get$iterator$ax(charCodes); H.boolConversionCheck(t1.moveNext$0());) {
        i = J.get$current$z(t1);
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(H.listTypeCheck(charCodes));
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      i = start;
      result = "";
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
        i = i0;
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      H.numTypeCheck(charCode);
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return string1 + string2;
    },
    Primitives_flattenString: function(str) {
      return str.charCodeAt(0) == 0 ? str : str;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver.get$millisecondsSinceEpoch());
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return H.boolConversionCheck(receiver.isUtc) ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t2, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      if (positionalArguments != null) {
        t2 = J.get$length$asx(positionalArguments);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.argumentCount = 0 + t2;
        C.JSArray_methods.addAll$1($arguments, positionalArguments);
      }
      t1.names = "";
      if (namedArguments != null && !H.boolConversionCheck(J.get$isEmpty$asx(namedArguments)))
        J.forEach$1$ax(namedArguments, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, H.interceptedTypeCheck(H.createUnmangledInvocationMirror(C.Symbol_call, "call" + "$" + H.S(t1.argumentCount) + H.S(t1.names), 0, $arguments, namedArgumentList, 0), "$isInvocation"));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || H.boolConversionCheck(J.get$isEmpty$asx(namedArguments));
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, t1, argumentCount, requiredParameterCount, defaultValuesClosure, t2, defaultValues, interceptor, jsFunction, keys, t3, used, t4;
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      t1 = J.getInterceptor$asx($arguments);
      argumentCount = t1.get$length($arguments);
      requiredParameterCount = $function.$requiredArgCount;
      if (typeof argumentCount !== "number")
        return argumentCount.$lt();
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t2 = defaultValuesClosure == null;
      defaultValues = !t2 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t2) {
        if (namedArguments != null && H.boolConversionCheck(J.get$isNotEmpty$asx(namedArguments)))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && H.boolConversionCheck(J.get$isNotEmpty$asx(namedArguments)))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        t1.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t2 = C.JSArray_methods.get$iterator(keys); H.boolConversionCheck(t2.moveNext$0());)
            t1.add$1($arguments, defaultValues[H.stringTypeCheck(J.get$current$z(t2))]);
        else {
          for (t2 = C.JSArray_methods.get$iterator(keys), t3 = J.getInterceptor$asx(namedArguments), used = 0; H.boolConversionCheck(t2.moveNext$0());) {
            t4 = H.stringTypeCheck(J.get$current$z(t2));
            if (H.boolConversionCheck(t3.containsKey$1(namedArguments, t4))) {
              ++used;
              t1.add$1($arguments, t3.$index(namedArguments, t4));
            } else
              t1.add$1($arguments, defaultValues[t4]);
          }
          if (used !== t3.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    JsCache_fetch: function(cache, key) {
      return cache[key];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return P.ArgumentError$value(index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var t1, _null = null;
      if (typeof start !== "number" || Math.floor(start) !== start)
        return P.ArgumentError$value(start, "start", _null);
      if (!(start < 0)) {
        H.numTypeCheck($length);
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        return P.RangeError$range(start, 0, H.intTypeCheck($length), "start", _null);
      if (end != null) {
        if (typeof end !== "number" || Math.floor(end) !== end)
          return P.ArgumentError$value(end, "end", _null);
        if (!(end < start)) {
          H.numTypeCheck($length);
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          return P.RangeError$range(end, start, H.intTypeCheck($length), "end", _null);
      }
      return P.ArgumentError$value(end, "end", _null);
    },
    stringLastIndexOfUnchecked: function(receiver, element, start) {
      return receiver.lastIndexOf(element, start);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkNull: function(object) {
      if (object == null)
        throw H.wrapException(H.argumentErrorValue(object));
      return object;
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    checkString: function(value) {
      if (typeof value !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
      return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver);
    },
    TypeErrorDecoder_buildJavaScriptObject: function() {
      return {
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
      return {$method$: null,
        toString: function() {
          return "$receiver$";
        }
      };
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match;
      message = H.stringTypeCheck(H.quoteStringForRegExp(message.replace(String({}), '$receiver$')));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'));
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokeCallErrorOnNull: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
      return function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOnNull: function() {
      return function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
      return function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }();
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    UnknownJsTypeError$: function(_message) {
      return new H.UnknownJsTypeError(_message);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(H.UnknownJsTypeError$(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && H.boolConversionCheck(H.contains(message, "call stack")))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return t1.call$1(P.ArgumentError$(typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return H._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = H._StackTrace$(exception);
    },
    _StackTrace$: function(_exception) {
      return new H._StackTrace(_exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var t1, index, index0, index1,
        $length = H.getLength(keyValuePairs);
      if (typeof $length !== "number")
        return H.iae($length);
      t1 = J.getInterceptor$ax(result);
      index = 0;
      for (; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        t1.$indexSet(result, H.getIndex(keyValuePairs, index), H.getIndex(keyValuePairs, index0));
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $prototype, $constructor, t1, trampoline, signatureFunction, applyTrampoline, i, t2, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName;
      H.boolConversionCheck(isStatic);
      $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.boolConversionCheck(H.Closure_isCsp())) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      signatureFunction = H.Closure__computeSignatureFunctionLegacy(reflectionInfo, isStatic, isIntercepted);
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      t1 = J.getInterceptor$asx(functions);
      applyTrampoline = trampoline;
      i = 1;
      while (true) {
        t2 = t1.get$length(functions);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        stub = t1.$index(functions, i);
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
        ++i;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionLegacy: function(functionType, isStatic, isIntercepted) {
      var getReceiver;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      if (typeof functionType == "function")
        if (H.boolConversionCheck(isStatic))
          return functionType;
        else {
          getReceiver = H.boolConversionCheck(isIntercepted) ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          return function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (H.boolConversionCheck(isSuperCall) ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (H.boolConversionCheck(isIntercepted))
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.boolConversionCheck(H.Closure_isCsp()) || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += H.S(t1);
      return new Function("return function(" + H.S($arguments) + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + H.S($arguments) + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (H.boolConversionCheck(isSuperCall) ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var $arguments,
        selfField = H.BoundClosure_selfFieldName(),
        receiverField = H.BoundClosure_receiverFieldName(),
        stubName = $function.$stubName,
        arity = $function.length,
        lookedUpFunction = receiver[stubName],
        t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction,
        t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    StaticClosure$: function() {
      return new H.StaticClosure();
    },
    BoundClosure$: function(_self, _target, _receiver, _name) {
      return new H.BoundClosure(_self, _target, _receiver, _name);
    },
    BoundClosure_selfOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure")._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return H.interceptedTypeCheck(closure, "$isBoundClosure")._receiver;
    },
    BoundClosure_selfFieldName: function() {
      var t1 = $.BoundClosure_selfFieldNameCache;
      return t1 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t1;
    },
    BoundClosure_receiverFieldName: function() {
      var t1 = $.BoundClosure_receiverFieldNameCache;
      return t1 == null ? $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver") : t1;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t2, $name,
        template = H.BoundClosure$("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template)),
        t1 = J.getInterceptor$asx(names),
        i = 0;
      while (true) {
        t2 = t1.get$length(names);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $name = t1.$index(names, i);
        if (template[$name] === fieldName)
          return $name;
        ++i;
      }
    },
    jsHasOwnProperty: function(jsObject, property) {
      return jsObject.hasOwnProperty(property);
    },
    jsPropertyAccess: function(jsObject, property) {
      return jsObject[property];
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFrom: function(o) {
      return H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(o));
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return H.getType(H.intTypeCheck(signature));
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      if (functionTypeObject == null)
        return false;
      return H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if (true === $._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.boolConversionCheck(H.boolTypeCheck(H.functionTypeTest(value, functionTypeRti))))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      return H.assertSubtypeOfRuntimeType(o, futureOrRti);
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'");
    },
    TypeErrorImplementation$fromMessage: function(message) {
      return new H.TypeErrorImplementation(message);
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject;
      if (value instanceof H.Closure) {
        functionTypeObject = H.extractFunctionTypeObjectFrom(value);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(H._AssertionError$(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(string);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    _AssertionError$: function(message) {
      return new H._AssertionError(message);
    },
    createRuntimeType: function(rti) {
      return H.TypeImpl$(rti);
    },
    TypeImpl$: function(_rti) {
      return new H.TypeImpl(_rti);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(H.getField(interceptor, "$as" + H.S(substitutionName)), H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(interceptor, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.getRuntimeTypeArguments(target, target, substitutionName);
      return $arguments == null ? null : H.getIndex($arguments, index);
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : H.getIndex(rti, index);
    },
    _getRuntimeTypeAsString: function(rti, genericContext) {
      return H.S(H.unminifyOrTag(H.rawRtiToJsConstructorName(H.getIndex(rti, 0)))) + H.S(H._joinArguments(rti, 1, genericContext));
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      if (H.boolConversionCheck(H.isDartDynamicTypeRti(rti)))
        return "dynamic";
      if (H.boolConversionCheck(H.isDartVoidTypeRti(rti)))
        return "void";
      if (H.boolConversionCheck(H.isJsArray(rti)))
        return H._getRuntimeTypeAsString(rti, genericContext);
      if (H.boolConversionCheck(H.isJsFunction(rti)))
        return H.unminifyOrTag(H.rawRtiToJsConstructorName(rti));
      if (H.boolConversionCheck(H.isDartJsInteropTypeArgumentRti(rti)))
        return "dynamic";
      if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(rti))) {
        H.intTypeCheck(rti);
        if (genericContext != null) {
          if (typeof rti !== "number")
            return rti.$lt();
          if (rti >= 0) {
            t1 = J.get$length$asx(genericContext);
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = rti >= t1;
          } else
            t1 = true;
        } else
          t1 = true;
        if (t1)
          return "unexpected-generic-index:" + H.S(rti);
        t1 = J.getInterceptor$asx(genericContext);
        t2 = t1.get$length(genericContext);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof rti !== "number")
          return H.iae(rti);
        return H.S(t1.$index(genericContext, t2 - rti - 1));
      }
      if (H.boolConversionCheck(H.isDartFunctionType(rti)))
        return H._functionRtiToString(rti, genericContext);
      if (H.boolConversionCheck(H.isDartFutureOrType(rti)))
        return "FutureOr<" + H.S(H._runtimeTypeToString(H.getFutureOrArgument(rti), genericContext)) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, t1, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, argumentsText, sep, argument, optionalArguments, namedArguments, _s2_ = ", ";
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "bounds")))) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], [P.String]);
          outerContextLength = null;
        } else
          outerContextLength = J.get$length$asx(genericContext);
        t1 = J.getInterceptor$asx(genericContext);
        offset = t1.get$length(genericContext);
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0) {
          if (typeof offset !== "number")
            return offset.$add();
          t1.add$1(genericContext, "T" + (offset + i0));
        }
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters = J.$add$ansx(typeParameters, typeSep);
          t2 = t1.get$length(genericContext);
          if (typeof t2 !== "number")
            return t2.$sub();
          typeParameters = J.$add$ansx(typeParameters, t1.$index(genericContext, t2 - i0 - 1));
          boundRti = boundsRti[i0];
          if (H.boolConversionCheck(H.isInterestingBound(boundRti)))
            typeParameters = J.$add$ansx(typeParameters, C.JSString_methods.$add(" extends ", H._runtimeTypeToString(boundRti, genericContext)));
        }
        typeParameters = J.$add$ansx(typeParameters, ">");
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "args"))))
        for (t1 = C.JSArray_methods.get$iterator(rti.args), argumentsText = "", sep = ""; H.boolConversionCheck(t1.moveNext$0()); sep = _s2_) {
          argument = J.get$current$z(t1);
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
      else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText = J.$add$ansx(argumentsText, sep + "[");
        for (t1 = C.JSArray_methods.get$iterator(optionalArguments), sep = ""; H.boolConversionCheck(t1.moveNext$0()); sep = _s2_) {
          argument = J.get$current$z(t1);
          argumentsText = J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
        argumentsText = J.$add$ansx(argumentsText, "]");
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText = J.$add$ansx(argumentsText, sep + "{");
        for (t1 = J.get$iterator$ax(H.extractKeys(namedArguments)), sep = ""; H.boolConversionCheck(t1.moveNext$0()); sep = _s2_) {
          t2 = H.stringTypeCheck(J.get$current$z(t1));
          argumentsText = J.$add$ansx(J.$add$ansx(J.$add$ansx(argumentsText, sep), H._runtimeTypeToString(namedArguments[t2], genericContext)), " " + H.S(t2));
        }
        argumentsText = J.$add$ansx(argumentsText, "}");
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return H.S(typeParameters) + "(" + H.S(argumentsText) + ") => " + H.S(returnTypeText);
    },
    joinArguments: function(types, startIndex) {
      return H._joinArguments(types, startIndex, null);
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = P.StringBuffer$("");
      index = startIndex;
      separator = "";
      allDynamic = true;
      while (true) {
        t1 = H.getLength(types);
        if (typeof index !== "number")
          return index.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(index < t1))
          break;
        buffer.write$1(0, separator);
        argument = H.getIndex(types, index);
        if (argument != null)
          allDynamic = false;
        buffer.write$1(0, H._runtimeTypeToString(argument, genericContext));
        ++index;
        separator = ", ";
      }
      return "<" + H.S(buffer) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFrom(o);
        if (functionRti != null)
          return functionRti;
      }
      type = H.getRawRuntimeType(t1);
      if (o == null)
        return type;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return H.TypeImpl$(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = H.invoke(substitution, $arguments);
      if (substitution == null)
        return;
      if (H.boolConversionCheck(H.isJsArray(substitution)))
        return substitution;
      if (H.boolConversionCheck(H.isJsFunction(substitution)))
        return H.invoke(substitution, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (H.getField(interceptor, isField) == null)
        return false;
      return H.checkArguments(H.getField(interceptor, asField), $arguments, null, checks, null);
    },
    computeTypeName: function(isField, $arguments) {
      return H.Primitives_formatType(H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(isField)), $arguments);
    },
    assertSubtype: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.boolConversionCheck(H.checkSubtype(object, isField, checks, asField)))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, H.computeTypeName(isField, checks)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      if (!H.boolConversionCheck(H.isSubtype(subtype, supertype)))
        H.throwTypeError("TypeError: " + H.S(prefix) + H.S(H.runtimeTypeToString(subtype)) + H.S(infix) + H.S(H.runtimeTypeToString(supertype)) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(H.TypeErrorImplementation$fromMessage(H.stringTypeCheck(message)));
    },
    checkArguments: function(substitution, $arguments, sEnv, checks, tEnv) {
      return H.areSubtypes(H.substitute(substitution, $arguments), sEnv, checks, tEnv);
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = H.getLength(t);
        if (typeof len !== "number")
          return H.iae(len);
        i = 0;
        for (; i < len; ++i)
          if (!H.boolConversionCheck(H._isSubtype(null, null, H.getIndex(t, i), tEnv)))
            return false;
        return true;
      }
      len = H.getLength(s);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        if (!H.boolConversionCheck(H._isSubtype(H.getIndex(s, i), sEnv, H.getIndex(t, i), tEnv)))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(J.getInterceptor$(context), context, contextName));
    },
    isTopType: function(type) {
      return H.boolConversionCheck(H.isDartDynamicTypeRti(type)) || H.boolConversionCheck(H.isDartVoidTypeRti(type)) || H.boolConversionCheck(H.isDartObjectTypeRti(type)) || H.boolConversionCheck(H.isDartJsInteropTypeArgumentRti(type));
    },
    isSupertypeOfNull: function(type) {
      return H.boolConversionCheck(H.isSupertypeOfNullBase(type)) || H.boolConversionCheck(H.isSupertypeOfNullRecursive(type));
    },
    isSupertypeOfNullBase: function(type) {
      return H.boolConversionCheck(H.isDartDynamicTypeRti(type)) || H.boolConversionCheck(H.isDartObjectTypeRti(type)) || H.boolConversionCheck(H.isNullTypeRti(type)) || H.boolConversionCheck(H.isDartVoidTypeRti(type)) || H.boolConversionCheck(H.isDartJsInteropTypeArgumentRti(type));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(type)))
        return false;
      if (H.boolConversionCheck(H.isDartFutureOrType(type))) {
        typeArgument = H.getFutureOrArgument(type);
        return H.boolConversionCheck(H.isSupertypeOfNullBase(type)) || H.boolConversionCheck(H.isSupertypeOfNullRecursive(typeArgument));
      }
      return false;
    },
    getFutureOrArgument: function(type) {
      return H.boolConversionCheck(H.boolTypeCheck(H.hasField(type, "type"))) ? H.getField(type, "type") : null;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return H.isSupertypeOfNull(t);
      if (H.boolConversionCheck(H.isTopType(t)))
        return true;
      if (typeof t == "object") {
        if (H.boolConversionCheck(H.isDartFutureOrType(t)))
          if (H.boolConversionCheck(H.checkSubtypeOfRuntimeType(o, H.getFutureOrArgument(t))))
            return true;
        if (H.boolConversionCheck(H.isDartFunctionType(t)))
          return H.boolTypeCheck(H.functionTypeTest(o, t));
      }
      type = H.getRawRuntimeType(J.getInterceptor$(o));
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H.isSubtype(type, t);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.boolConversionCheck(H.checkSubtypeOfRuntimeType(object, type)))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    getArguments: function(type) {
      return H.boolConversionCheck(H.isJsArray(type)) ? type.slice(1) : null;
    },
    isSubtype: function(s, t) {
      return H._isSubtype(s, null, t, null);
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var typeOfS, tTypeArgument, futureArguments, typeOfT, typeOfTString, substitution;
      if (H.boolConversionCheck(H.isIdentical(s, t)))
        return true;
      if (H.boolConversionCheck(H.isTopType(t)))
        return true;
      if (H.boolConversionCheck(H.isDartJsInteropTypeArgumentRti(s)))
        return true;
      if (H.boolConversionCheck(H.isTopType(s))) {
        if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(t)))
          return false;
        if (H.boolConversionCheck(H.isDartFutureOrType(t)))
          return H._isSubtype(s, sEnv, H.getFutureOrArgument(t), tEnv);
        return false;
      }
      if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(s)))
        return H._isSubtype(H.getIndex(sEnv, H.intTypeCheck(s)), sEnv, t, tEnv);
      if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(t)))
        return false;
      if (H.boolConversionCheck(H.isNullType(s)))
        return true;
      typeOfS = H.boolConversionCheck(H.isJsArray(s)) ? H.getIndex(s, 0) : s;
      if (H.boolConversionCheck(H.isDartFutureOrType(t))) {
        tTypeArgument = H.getFutureOrArgument(t);
        if (H.boolConversionCheck(H.isDartFutureOrType(s)))
          return H._isSubtype(H.getFutureOrArgument(s), sEnv, tTypeArgument, tEnv);
        else if (H.boolConversionCheck(H._isSubtype(s, sEnv, tTypeArgument, tEnv)))
          return true;
        else {
          if (!H.boolConversionCheck(H.builtinIsSubtype(typeOfS, "Future")))
            return false;
          futureArguments = H.substitute(H.getField(typeOfS.prototype, "$as" + "Future"), H.getArguments(s));
          return H._isSubtype(H.boolConversionCheck(H.isJsArray(futureArguments)) ? H.getIndex(futureArguments, 0) : null, sEnv, tTypeArgument, tEnv);
        }
      }
      if (H.boolConversionCheck(H.isDartFunctionType(t)))
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if (H.boolConversionCheck(H.isDartFunctionType(s)))
        return H.isDartFunctionTypeRti(t);
      typeOfT = H.boolConversionCheck(H.isJsArray(t)) ? H.getIndex(t, 0) : t;
      if (H.boolConversionCheck(H.isNotIdentical(typeOfT, typeOfS))) {
        typeOfTString = H.rawRtiToJsConstructorName(typeOfT);
        if (!H.boolConversionCheck(H.builtinIsSubtype(typeOfS, typeOfTString)))
          return false;
        substitution = H.getField(typeOfS.prototype, "$as" + H.S(typeOfTString));
      } else
        substitution = null;
      if (!H.boolConversionCheck(H.isJsArray(t)))
        return true;
      return H.checkArguments(substitution, H.getArguments(s), sEnv, H.getArguments(t), tEnv);
    },
    isFunctionSubtype: function(s, t) {
      return H._isFunctionSubtype(s, null, t, null);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!H.boolConversionCheck(H.isDartFunctionType(s)))
        return false;
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(s, "bounds")))) {
        if (H.boolConversionCheck(H.boolTypeCheck(H.hasNoField(t, "bounds"))))
          return false;
        sBounds = H.getField(s, "bounds");
        tBounds = H.getField(t, "bounds");
        if (H.getLength(sBounds) != H.getLength(tBounds))
          return false;
        sEnv = sEnv == null ? sBounds : H.concat(sBounds, sEnv);
        tEnv = tEnv == null ? tBounds : H.concat(tBounds, tEnv);
      } else if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(t, "bounds"))))
        return false;
      if (!H.boolConversionCheck(H._isSubtype(H.getField(s, "ret"), sEnv, H.getField(t, "ret"), tEnv)))
        return false;
      sParameterTypes = H.getField(s, "args");
      tParameterTypes = H.getField(t, "args");
      sOptionalParameterTypes = H.getField(s, "opt");
      tOptionalParameterTypes = H.getField(t, "opt");
      sParametersLen = sParameterTypes != null ? H.getLength(sParameterTypes) : 0;
      tParametersLen = tParameterTypes != null ? H.getLength(tParameterTypes) : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? H.getLength(sOptionalParameterTypes) : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? H.getLength(tOptionalParameterTypes) : 0;
      if (typeof sParametersLen !== "number")
        return sParametersLen.$gt();
      if (typeof tParametersLen !== "number")
        return H.iae(tParametersLen);
      if (sParametersLen > tParametersLen)
        return false;
      if (typeof sOptionalParametersLen !== "number")
        return H.iae(sOptionalParametersLen);
      if (typeof tOptionalParametersLen !== "number")
        return H.iae(tOptionalParametersLen);
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H.boolConversionCheck(H._isSubtype(H.getIndex(tParameterTypes, pos), tEnv, H.getIndex(sParameterTypes, pos), sEnv)))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H.boolConversionCheck(H._isSubtype(H.getIndex(tParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv)))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H.boolConversionCheck(H._isSubtype(H.getIndex(tOptionalParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv)))
          return false;
      sNamedParameters = H.getField(s, "named");
      tNamedParameters = H.getField(t, "named");
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H.boolConversionCheck(H._isSubtype(t[$name], tEnv, s[$name], sEnv)))
          return false;
      }
      return true;
    },
    isGenericFunctionTypeParameter: function(type) {
      return typeof type === "number";
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, parameters) {
      if (genericFunctionRti == null)
        return;
      H.getLength(H.getField(genericFunctionRti, "bounds"));
      H.getLength(parameters);
      return H.finishBindInstantiatedFunctionType(genericFunctionRti, {func: 1}, parameters, 0);
    },
    bindInstantiatedFunctionType: function(rti, parameters, depth) {
      var bounds, t1,
        result = {func: 1};
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "bounds")))) {
        bounds = H.getField(rti, "bounds");
        t1 = H.getLength(bounds);
        if (typeof depth !== "number")
          return depth.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        depth += t1;
        H.setField(result, "bounds", H.bindInstantiatedTypes(bounds, parameters, depth));
      }
      return H.finishBindInstantiatedFunctionType(rti, result, parameters, depth);
    },
    finishBindInstantiatedFunctionType: function(rti, result, parameters, depth) {
      var namedParameters, boundNamed, t1, $name;
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "v"))))
        H.setField(result, "v", H.getField(rti, "v"));
      else if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "ret"))))
        H.setField(result, "ret", H.bindInstantiatedType(H.getField(rti, "ret"), parameters, depth));
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "args"))))
        H.setField(result, "args", H.bindInstantiatedTypes(H.getField(rti, "args"), parameters, depth));
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "opt"))))
        H.setField(result, "opt", H.bindInstantiatedTypes(H.getField(rti, "opt"), parameters, depth));
      if (H.boolConversionCheck(H.boolTypeCheck(H.hasField(rti, "named")))) {
        namedParameters = H.getField(rti, "named");
        boundNamed = {};
        for (t1 = C.JSArray_methods.get$iterator(Object.keys(namedParameters)); H.boolConversionCheck(t1.moveNext$0());) {
          $name = H.stringTypeCheck(J.get$current$z(t1));
          H.setField(boundNamed, $name, H.bindInstantiatedType(H.getField(namedParameters, $name), parameters, depth));
        }
        H.setField(result, "named", boundNamed);
      }
      return result;
    },
    bindInstantiatedType: function(rti, parameters, depth) {
      var t1;
      if (H.boolConversionCheck(H.isDartDynamicTypeRti(rti)))
        return rti;
      if (H.boolConversionCheck(H.isDartVoidTypeRti(rti)))
        return rti;
      if (H.boolConversionCheck(H.isJsFunction(rti)))
        return rti;
      if (H.boolConversionCheck(H.isGenericFunctionTypeParameter(rti))) {
        t1 = J.getInterceptor$n(rti);
        if (H.boolConversionCheck(H.boolTypeCheck(t1.$lt(rti, depth))))
          return rti;
        return parameters[t1.$sub(rti, depth)];
      }
      if (typeof rti === "number")
        return rti;
      if (H.boolConversionCheck(H.isJsArray(rti)))
        return H.bindInstantiatedTypes(rti, parameters, depth);
      if (H.boolConversionCheck(H.isDartFunctionType(rti)))
        return H.bindInstantiatedFunctionType(rti, parameters, depth);
      throw H.wrapException(P.ArgumentError$("Unknown RTI format in bindInstantiatedType."));
    },
    bindInstantiatedTypes: function(rti, parameters, depth) {
      var t1, i,
        array = rti.slice();
      for (t1 = array.length, i = 0; i < t1; ++i)
        C.JSArray_methods.$indexSet(array, i, H.bindInstantiatedType(array[i], parameters, depth));
      return array;
    },
    invoke: function($function, $arguments) {
      return H.invokeOn($function, null, $arguments);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    getField: function(object, $name) {
      return object[$name];
    },
    getIndex: function(array, index) {
      return array[index];
    },
    setField: function(object, $name, value) {
      object[$name] = value;
    },
    getLength: function(array) {
      return array.length;
    },
    isJsArray: function(value) {
      return typeof value === "object" && value !== null && value.constructor === Array;
    },
    hasField: function(object, $name) {
      return $name in object;
    },
    hasNoField: function(object, $name) {
      return !H.boolConversionCheck(H.boolTypeCheck(H.hasField(object, $name)));
    },
    isJsFunction: function(o) {
      return typeof o == "function";
    },
    isIdentical: function(s, t) {
      return s === t;
    },
    isNotIdentical: function(s, t) {
      return s !== t;
    },
    isInterestingBound: function(rti) {
      return rti != null && H.boolConversionCheck(H.isNotIdentical(rti, P.Object));
    },
    concat: function(a1, a2) {
      return a1.concat(a2);
    },
    JsLinkedHashMap$: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      var t1 = H.JsLinkedHashMap$($K, $V);
      return t1;
    },
    JsLinkedHashMap__isStringKey: function(key) {
      return typeof key === "string";
    },
    JsLinkedHashMap__isNumericKey: function(key) {
      return typeof key === "number" && (key & 0x3ffffff) === key;
    },
    LinkedHashMapCell$: function(hashMapCellKey, hashMapCellValue) {
      return new H.LinkedHashMapCell(hashMapCellKey, hashMapCellValue);
    },
    LinkedHashMapKeyIterable$: function(_map, $E) {
      return new H.LinkedHashMapKeyIterable(_map, [$E]);
    },
    LinkedHashMapKeyIterator$: function(_map, _modifications, $E) {
      var t1 = new H.LinkedHashMapKeyIterator(_map, _modifications, [$E]);
      t1.LinkedHashMapKeyIterator$2(_map, _modifications, $E);
      return t1;
    },
    contains: function(userAgent, $name) {
      return userAgent.indexOf($name) !== -1;
    },
    propertyGet: function(object, property) {
      return object[property];
    },
    propertySet: function(object, property, value) {
      object[property] = value;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag: function() {
      return init.interceptorsByTag;
    },
    leafTags: function() {
      return init.leafTags;
    },
    lookupInterceptor: function(tag) {
      return H.propertyGet(H.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return H.patchInstance(obj, record);
      interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = H.lookupInterceptor(tag);
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
          if (record != null)
            return H.patchInstance(obj, record);
          interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = H.lookupInterceptor(tag);
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        H.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return H.patchInstance(obj, record);
      }
      if (mark === "~") {
        H.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (H.leafTags()[tag] === true)
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInstance: function(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto: function(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (H.leafTags()[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback: function(object) {
      return C.C_JS_CONST6(object);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = H.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = H.propertyGet(map, tag);
          H.propertySet(map, "!" + tag, interceptorClass);
          H.propertySet(map, "~" + tag, interceptorClass);
          H.propertySet(map, "-" + tag, interceptorClass);
          H.propertySet(map, "+" + tag, interceptorClass);
          H.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST();
      hooks = H.applyHooksTransformer(C.C_JS_CONST0, H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5(C.C_JS_CONST6), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = H.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    regExpGetNative: function(regexp) {
      return regexp._nativeRegExp;
    },
    regExpGetGlobalNative: function(regexp) {
      var nativeRegexp = regexp.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return nativeRegexp;
    },
    regExpCaptureCount: function(regexp) {
      return regexp.get$_nativeAnchoredVersion().exec("").length - 2;
    },
    JSSyntaxRegExp$: function(source, caseSensitive, dotAll, multiLine, unicode) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, false));
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m, i, u, s, g, regexp;
      H.checkString(source);
      m = multiLine === true ? "m" : "";
      i = caseSensitive === true ? "" : "i";
      u = H.boolConversionCheck(unicode) ? "u" : "";
      s = H.boolConversionCheck(dotAll) ? "s" : "";
      g = H.boolConversionCheck(global) ? "g" : "";
      regexp = function(source, modifiers) {
        try {
          return new RegExp(source, modifiers);
        } catch (e) {
          return e;
        }
      }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    _MatchImplementation$: function(pattern, _match) {
      var t1 = new H._MatchImplementation(_match);
      t1._MatchImplementation$2(pattern, _match);
      return t1;
    },
    _AllMatchesIterable$: function(_re, _string, _start) {
      return new H._AllMatchesIterable(_re, _string, _start);
    },
    _AllMatchesIterator$: function(_regExp, _string, _nextIndex) {
      return new H._AllMatchesIterator(_regExp, _string, _nextIndex);
    },
    _AllMatchesIterator__isLeadSurrogate: function(c) {
      if (typeof c !== "number")
        return c.$ge();
      return c >= 55296 && c <= 56319;
    },
    _AllMatchesIterator__isTrailSurrogate: function(c) {
      if (typeof c !== "number")
        return c.$ge();
      return c >= 56320 && c <= 57343;
    },
    firstMatchAfter: function(regExp, string, start) {
      return regExp._execGlobal$2(string, start);
    },
    stringIndexOfStringUnchecked: function(receiver, other, startIndex) {
      return receiver.indexOf(other, startIndex);
    },
    stringContainsStringUnchecked: function(receiver, other, startIndex) {
      return J.$ge$n(H.stringIndexOfStringUnchecked(receiver, other, startIndex), 0);
    },
    stringSplitUnchecked: function(receiver, pattern) {
      return J.JSArray_JSArray$markGrowable(receiver.split(pattern), P.String);
    },
    StringMatch$: function(start, input, pattern) {
      return new H.StringMatch(start, pattern);
    },
    allMatchesInStringUnchecked: function(pattern, string, startIndex) {
      return H._StringAllMatchesIterable$(string, pattern, startIndex);
    },
    _StringAllMatchesIterable$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterable(_input, _pattern, _index);
    },
    _StringAllMatchesIterator$: function(_input, _pattern, _index) {
      return new H._StringAllMatchesIterator(_input, _pattern, _index);
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1, t2;
      if (typeof other === "string")
        return H.stringContainsStringUnchecked(receiver, other, startIndex);
      else {
        t1 = J.getInterceptor$(other);
        t2 = J.getInterceptor$s(receiver);
        if (!!t1.$isJSSyntaxRegExp)
          return other.hasMatch$1(H.stringTypeCheck(t2.substring$1(receiver, startIndex)));
        else
          return J.get$isNotEmpty$asx(t1.allMatches$1(other, t2.substring$1(receiver, startIndex)));
      }
    },
    stringReplaceJS: function(receiver, jsRegExp, replacement) {
      return receiver.replace(jsRegExp, H.escapeReplacement(replacement));
    },
    escapeReplacement: function(replacement) {
      if (H.boolConversionCheck(H.boolTypeCheck(H.stringContainsStringUnchecked(replacement, "$", 0))))
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE: function(receiver, regexp, replacement, startIndex) {
      var t1, start, end,
        match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      t1 = J.getInterceptor$x(match);
      start = t1.get$start(match);
      end = t1.get$end(match);
      return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), H.intTypeCheck(start), H.intTypeCheck(end), H.stringTypeCheck(replacement));
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var re;
      H.checkString(replacement);
      if (typeof pattern === "string")
        return H.stringReplaceAllUncheckedString(H.stringTypeCheck(receiver), pattern, H.stringTypeCheck(replacement));
      if (pattern instanceof H.JSSyntaxRegExp) {
        re = H.regExpGetGlobalNative(pattern);
        return H.stringReplaceJS(H.stringTypeCheck(receiver), re, H.stringTypeCheck(replacement));
      }
      H.checkNull(pattern);
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var result, $length, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(0, replacement);
        for (i = 0; i < $length; ++i) {
          result.write$1(0, receiver[i]);
          result.write$1(0, replacement);
        }
        return result.toString$0(0);
      }
      index = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, 0));
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || H.boolConversionCheck(H.boolTypeCheck(H.stringContainsStringUnchecked(replacement, "$", 0))))
        return H.stringReplaceAllUsingSplitJoin(receiver, pattern, replacement);
      return H.stringReplaceJS(receiver, new RegExp(H.quoteStringForRegExp(pattern), 'g'), replacement);
    },
    stringReplaceAllUsingSplitJoin: function(receiver, pattern, replacement) {
      return receiver.split(pattern).join(replacement);
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      var index, t1, matches, match;
      if (typeof pattern === "string") {
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, startIndex));
        if (typeof index !== "number")
          return index.$lt();
        if (index < 0)
          return receiver;
        t1 = pattern.length;
        return H.stringReplaceRangeUnchecked(H.stringTypeCheck(receiver), index, index + t1, H.stringTypeCheck(replacement));
      }
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp)
        return startIndex === 0 ? H.stringReplaceJS(H.stringTypeCheck(receiver), H.regExpGetNative(pattern), H.stringTypeCheck(replacement)) : H.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
      H.checkNull(pattern);
      matches = H.assertSubtype(J.get$iterator$ax(t1.allMatches$2(pattern, receiver, startIndex)), "$isIterator", [P.Match], "$asIterator");
      if (!H.boolConversionCheck(matches.moveNext$0()))
        return receiver;
      match = matches.get$current(matches);
      return J.replaceRange$3$asx(receiver, match.get$start(match), match.get$end(match), replacement);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + H.S(replacement) + suffix;
    },
    Native: function Native() {
    },
    _Patch: function _Patch() {
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _._length = t0;
      _._jsObject = t1;
      _.__js_helper$_keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    ConstantProtoMap: function ConstantProtoMap() {
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap() {
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    Instantiation2: function Instantiation2() {
    },
    Instantiation3: function Instantiation3() {
    },
    Instantiation4: function Instantiation4() {
    },
    Instantiation5: function Instantiation5() {
    },
    Instantiation6: function Instantiation6() {
    },
    Instantiation7: function Instantiation7() {
    },
    Instantiation8: function Instantiation8() {
    },
    Instantiation9: function Instantiation9() {
    },
    Instantiation10: function Instantiation10() {
    },
    Instantiation11: function Instantiation11() {
    },
    Instantiation12: function Instantiation12() {
    },
    Instantiation13: function Instantiation13() {
    },
    Instantiation14: function Instantiation14() {
    },
    Instantiation15: function Instantiation15() {
    },
    Instantiation16: function Instantiation16() {
    },
    Instantiation17: function Instantiation17() {
    },
    Instantiation18: function Instantiation18() {
    },
    Instantiation19: function Instantiation19() {
    },
    Instantiation20: function Instantiation20() {
    },
    InternalMap: function InternalMap() {
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives: function Primitives() {
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    JsCache: function JsCache() {
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace() {
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure_fromTearOff_closure: function Closure_fromTearOff_closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    Creates: function Creates() {
    },
    Returns: function Returns() {
    },
    JSName: function JSName() {
    },
    JavaScriptIndexingBehavior: function JavaScriptIndexingBehavior() {
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    FallThroughErrorImplementation: function FallThroughErrorImplementation() {
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    DeferredNotLoadedError: function DeferredNotLoadedError() {
    },
    UnimplementedNoSuchMethodError: function UnimplementedNoSuchMethodError() {
    },
    MainError: function MainError() {
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    _UnreachableError: function _UnreachableError() {
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    TypeVariable: function TypeVariable() {
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _._length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    Es6LinkedHashMap: function Es6LinkedHashMap() {
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.JsCache_fetch(init.mangledGlobalNames, $name);
    },
    unmangleAllIdentifiersIfPreservedAnyways: function(str) {
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(str, init.mangledGlobalNames);
    },
    _LazyMangledNamesMap: function _LazyMangledNamesMap() {
    },
    _LazyMangledInstanceNamesMap: function _LazyMangledInstanceNamesMap() {
    },
    _LazyReflectiveNamesMap: function _LazyReflectiveNamesMap() {
    },
    SupportedBrowser: function SupportedBrowser() {
    },
    Experimental: function Experimental() {
    },
    DomName: function DomName() {
    },
    DocsEditable: function DocsEditable() {
    },
    Unstable: function Unstable() {
    },
    _checkLength: function($length) {
      return typeof $length === "number" && Math.floor($length) === $length ? $length : H.throwExpression(P.ArgumentError$("Invalid length " + H.S($length)));
    },
    _ensureNativeList: function(list) {
      var t2, result, i,
        t1 = J.getInterceptor$(list);
      if (!!t1.$isJSIndexable)
        return list;
      t2 = t1.get$length(list);
      if (typeof t2 !== "number")
        return H.iae(t2);
      result = new Array(t2);
      result.fixed$length = Array;
      i = 0;
      while (true) {
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        C.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
        ++i;
      }
      return result;
    },
    NativeFloat32List__create1: function(arg) {
      return new Float32Array(arg);
    },
    NativeFloat64List__create1: function(arg) {
      return new Float64Array(arg);
    },
    NativeInt16List__create1: function(arg) {
      return new Int16Array(arg);
    },
    NativeInt32List__create1: function(arg) {
      return new Int32Array(arg);
    },
    NativeInt8List_NativeInt8List$fromList: function(elements) {
      return H.NativeInt8List__create1(H._ensureNativeList(elements));
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List__create1: function(arg) {
      return new Uint16Array(arg);
    },
    NativeUint32List__create1: function(arg) {
      return new Uint32Array(arg);
    },
    NativeUint8ClampedList__create1: function(arg) {
      return new Uint8ClampedArray(arg);
    },
    NativeUint8List_NativeUint8List: function($length) {
      return H.NativeUint8List__create1(H._checkLength($length));
    },
    NativeUint8List__create1: function(arg) {
      return new Uint8Array(arg);
    },
    _isInvalidArrayIndex: function(index) {
      return index >>> 0 !== index;
    },
    _checkValidIndex: function(index, list, $length) {
      var t1;
      if (!H.boolConversionCheck(H._isInvalidArrayIndex(index))) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!H.boolConversionCheck(H._isInvalidArrayIndex(start)))
        if (end == null) {
          if (typeof start !== "number")
            return start.$gt();
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = start > $length;
        } else if (!H.boolConversionCheck(H._isInvalidArrayIndex(end))) {
          if (typeof start !== "number")
            return start.$gt();
          if (!(start > end)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = end > $length;
          } else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeFloat32x4List: function NativeFloat32x4List() {
    },
    NativeInt32x4List: function NativeInt32x4List() {
    },
    NativeFloat64x2List: function NativeFloat64x2List() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    NativeFloat32x4: function NativeFloat32x4() {
    },
    NativeInt32x4: function NativeInt32x4() {
    },
    NativeFloat64x2: function NativeFloat64x2() {
    },
    _NativeFloat32x4List_Object_ListMixin: function _NativeFloat32x4List_Object_ListMixin() {
    },
    _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin: function _NativeFloat64x2List_Object_ListMixin() {
    },
    _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin: function _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin: function _NativeInt32x4List_Object_ListMixin() {
    },
    _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin: function _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Recipe: function Recipe() {
    },
    Rti: function Rti() {
    },
    _FunctionParameters: function _FunctionParameters() {
    },
    _Type: function _Type() {
    },
    _Error: function _Error() {
    },
    _CastError: function _CastError() {
    },
    _TypeError: function _TypeError() {
    },
    _Universe: function _Universe() {
    },
    _Parser: function _Parser() {
    },
    TypeRule: function TypeRule() {
    },
    _Utils: function _Utils() {
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    getDispatchProperty: function(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty: function(object, value) {
      H.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor: function(record) {
      return record.i;
    },
    dispatchRecordProto: function(record) {
      return record.p;
    },
    dispatchRecordExtension: function(record) {
      return record.e;
    },
    dispatchRecordIndexability: function(record) {
      return record.x;
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, C.UnknownJavaScriptObject_methods);
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    lookupInterceptorByConstructor: function($constructor) {
      return $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor: function($constructor, interceptor) {
      H.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), interceptor);
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$typed: function(allocation, $E) {
      return allocation;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]));
    },
    JSArray_JSArray$markGrowable: function(allocation, $E) {
      return H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]);
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray_isFixedLength: function(a) {
      return !!a.fixed$length;
    },
    JSArray_isUnmodifiable: function(a) {
      return !!a.immutable$list;
    },
    JSArray_isGrowable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isFixedLength(a));
    },
    JSArray_isMutable: function(a) {
      return !H.boolConversionCheck(J.JSArray_isUnmodifiable(a));
    },
    ArrayIterator$: function(iterable, $E) {
      return new J.ArrayIterator(iterable, iterable.length, [$E]);
    },
    JSNumber__handleIEtoString: function(result) {
      var t1, exponent,
        match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        throw H.wrapException(P.UnsupportedError$("Unexpected toString result: " + H.S(result)));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return C.JSString_methods.$add(result, C.JSString_methods.$mul("0", exponent));
    },
    JSString__isWhitespace: function(codeUnit) {
      if (typeof codeUnit !== "number")
        return codeUnit.$lt();
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var codeUnit,
        t1 = string.length;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (!(index < t1))
          break;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !H.boolConversionCheck(J.JSString__isWhitespace(codeUnit)))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit,
        t1 = J.getInterceptor$s(string);
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (!(index > 0))
          break;
        index0 = index - 1;
        codeUnit = t1.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !H.boolConversionCheck(J.JSString__isWhitespace(codeUnit)))
          break;
        index = index0;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$i: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$in: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$_collection$_length$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$_collection$_length(receiver);
    },
    get$_length$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$_length(receiver);
    },
    get$codeUnits$s: function(receiver) {
      return J.getInterceptor$s(receiver).get$codeUnits(receiver);
    },
    get$console$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$console(receiver);
    },
    get$current$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$current(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$head$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$head(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$line$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$line(receiver);
    },
    get$onError$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onError(receiver);
    },
    get$onKeyDown$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
    },
    get$onKeyPress$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyPress(receiver);
    },
    get$onKeyUp$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onKeyUp(receiver);
    },
    get$onMouseDown$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseDown(receiver);
    },
    get$onMouseMove$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseMove(receiver);
    },
    get$onMouseUp$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onMouseUp(receiver);
    },
    get$onResize$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$onResize(receiver);
    },
    get$parent$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$parent(receiver);
    },
    get$path$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$path(receiver);
    },
    get$result$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$result(receiver);
    },
    get$reversed$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$single$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$single(receiver);
    },
    get$stream$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$stream(receiver);
    },
    get$values$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$values(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $get$2$z: function(receiver, a0, a1) {
      return J.getInterceptor$z(receiver).$get$2(receiver, a0, a1);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $mul$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $negate$in: function(receiver) {
      if (typeof receiver == "number")
        return -receiver;
      return J.getInterceptor$in(receiver).$negate(receiver);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _removeChild$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver)._removeChild$1(receiver, a0);
    },
    _replaceChild$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
    },
    abs$0$in: function(receiver) {
      if (typeof receiver === "number")
        return Math.abs(receiver);
      return J.getInterceptor$in(receiver).abs$0(receiver);
    },
    absolute$7$z: function(receiver, a0, a1, a2, a3, a4, a5, a6) {
      return J.getInterceptor$z(receiver).absolute$7(receiver, a0, a1, a2, a3, a4, a5, a6);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    allMatches$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    append$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).append$1(receiver, a0);
    },
    cancel$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).cancel$0(receiver);
    },
    clearRect$4$x: function(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
    },
    codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    complete$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).complete$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    contains$2$asx: function(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    containsKey$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    create$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).create$1(receiver, a0);
    },
    createElement$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).createElement$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    error$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).error$1(receiver, a0);
    },
    expand$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    fold$1$2$ax: function(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    getContext$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
    },
    indexOf$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).indexOf$2(receiver, a0, a1);
    },
    insert$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insert$2(receiver, a0, a1);
    },
    insertAll$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).insertAll$2(receiver, a0, a1);
    },
    join$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).join$0(receiver);
    },
    join$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    normalize$0$z: function(receiver) {
      return J.getInterceptor$z(receiver).normalize$0(receiver);
    },
    padRight$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).padRight$1(receiver, a0);
    },
    print$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).print$1(receiver, a0);
    },
    querySelector$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
    },
    remainder$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).remainder$1(receiver, a0);
    },
    remove$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    remove$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    removeAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
    },
    removeLast$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).removeLast$0(receiver);
    },
    replaceAll$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
    },
    replaceFirst$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
    },
    replaceRange$3$asx: function(receiver, a0, a1, a2) {
      return J.getInterceptor$asx(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    replaceWith$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
    },
    requestAnimationFrame$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).requestAnimationFrame$1(receiver, a0);
    },
    restore$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).restore$0(receiver);
    },
    save$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).save$0(receiver);
    },
    setAttribute$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).setAttribute$2(receiver, a0, a1);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    skipWhile$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skipWhile$1(receiver, a0);
    },
    split$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toList$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toRadixString$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toUpperCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    write$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).write$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JSIndexable: function JSIndexable() {
    },
    JSMutableIndexable: function JSMutableIndexable() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    _Growable: function _Growable() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__scheduleImmediate: function(callback) {
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      H.requiresPreamble();
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      if (typeof milliseconds !== "number")
        return milliseconds.$lt();
      if (milliseconds < 0)
        milliseconds = 0;
      return P._TimerImpl$(milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = duration.get$inMilliseconds();
      if (typeof milliseconds !== "number")
        return milliseconds.$lt();
      if (milliseconds < 0)
        milliseconds = 0;
      return P._TimerImpl$periodic(milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _hasTimer: function() {
      H.requiresPreamble();
      return self.setTimeout != null;
    },
    _rethrow: function(error, stackTrace) {
      error = H.wrapException(error);
      error.stack = J.toString$0$(stackTrace);
      throw error;
    },
    _BroadcastStream$: function(controller, $T) {
      return new P._BroadcastStream(controller, [$T]);
    },
    _BroadcastSubscription$: function(controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = P.Zone_current(),
        t2 = H.boolConversionCheck(cancelOnError) ? 1 : 0;
      t2 = new P._BroadcastSubscription(controller, t1, t2, [$T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      t2._BroadcastSubscription$5(controller, onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _SyncBroadcastStreamController$: function(onListen, onCancel, $T) {
      return new P._SyncBroadcastStreamController(onListen, onCancel, [$T]);
    },
    _AsyncBroadcastStreamController$: function(onListen, onCancel, $T) {
      return new P._AsyncBroadcastStreamController(onListen, onCancel, [$T]);
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var replacement;
      error = P._nonNullError(error);
      if (P.Zone_current() !== C.C__RootZone) {
        replacement = P.Zone_current().errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = P._nonNullError(replacement.error);
          stackTrace = replacement.stackTrace;
        }
      }
      return P._Future$immediateError(error, stackTrace, $T);
    },
    Completer_Completer: function($T) {
      return P._AsyncCompleter$($T);
    },
    Completer_Completer$sync: function($T) {
      return P._SyncCompleter$($T);
    },
    _nonNullError: function(error) {
      return error == null ? P.NullThrownError$() : error;
    },
    _AsyncCompleter$: function($T) {
      return new P._AsyncCompleter(P._Future$($T), [$T]);
    },
    _SyncCompleter$: function($T) {
      return new P._SyncCompleter(P._Future$($T), [$T]);
    },
    _FutureListener$then: function(result, onValue, errorCallback, $S, $T) {
      var t1 = errorCallback == null ? 1 : 3;
      return new P._FutureListener(result, t1, onValue, errorCallback, [$S, $T]);
    },
    _Future$: function($T) {
      return new P._Future(P.Zone_current(), [$T]);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(_zone, [$T]);
      t1._Future$zoneValue$2(value, _zone, $T);
      return t1;
    },
    _Future$immediateError: function(error, stackTrace, $T) {
      var t1 = new P._Future(P.Zone_current(), [$T]);
      t1._Future$immediateError$2(error, stackTrace, $T);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._setPendingComplete$0();
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), P.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var listeners;
      for (; H.boolConversionCheck(source.get$_isChained());)
        source = source.get$_chainSource();
      if (H.boolConversionCheck(source.get$_isComplete())) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, listeners0, sourceResult, zone, t2, oldZone, result, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1.get$_hasError();
        if (listeners == null) {
          if (H.boolConversionCheck(hasError)) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        sourceResult = _box_1.source._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        H.boolConversionCheck(hasError);
        t1 = !hasError;
        if (!t1 || H.boolConversionCheck(listeners.get$handlesValue()) || H.boolConversionCheck(listeners.get$handlesComplete())) {
          zone = listeners.get$_zone();
          if (hasError && !H.boolConversionCheck(_box_1.source._zone.inSameErrorZone$1(zone))) {
            asyncError = _box_1.source.get$_error();
            _box_1.source._zone.handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
            return;
          }
          t2 = P.Zone_current();
          oldZone = (t2 == null ? zone != null : t2 !== zone) ? P.Zone__enter(zone) : null;
          if (H.boolConversionCheck(listeners.get$handlesComplete()))
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t1) {
            if (H.boolConversionCheck(listeners.get$handlesValue()))
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if (H.boolConversionCheck(listeners.get$handlesError()))
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            P.Zone__leave(oldZone);
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            result = listeners.result;
            if (H.boolConversionCheck(t1.get$_isComplete())) {
              listeners = result._removeListeners$0();
              result._cloneResult$1(t1);
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = listeners.result;
        listeners = result._removeListeners$0();
        t1 = H.boolConversionCheck(_box_0.listenerHasError);
        t2 = _box_0.listenerValueOrError;
        if (!t1)
          result._setValue$1(t2);
        else
          result._setErrorObject$1(H.interceptedTypeCheck(t2, "$isAsyncError"));
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return zone.registerUnaryCallback$2$1(errorHandler, null, P.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _AsyncCallbackEntry$: function(callback) {
      return new P._AsyncCallbackEntry(callback);
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = P._AsyncCallbackEntry$(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!H.boolConversionCheck($._isInCallbackLoop))
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t1;
      if ($._nextCallback == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = P._AsyncCallbackEntry$(callback);
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = H.interceptedTypeCheck($._nextCallback, "$is_AsyncCallbackEntry");
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = H.interceptedTypeCheck(t1.next, "$is_AsyncCallbackEntry");
        $._lastPriorityCallback = t1.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = H.interceptedTypeCheck(P.Zone_current(), "$is_Zone");
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone && H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(currentZone))) {
        P._rootScheduleMicrotask(_null, _null, currentZone, currentZone.registerCallback$1$1(callback, -1));
        return;
      }
      P.Zone_current().scheduleMicrotask$1(P.Zone_current().bindCallbackGuarded$1(callback));
    },
    StreamController_StreamController$broadcast: function(sync, $T) {
      var _null = null;
      return H.boolConversionCheck(sync) ? P._SyncBroadcastStreamController$(_null, _null, $T) : P._AsyncBroadcastStreamController$(_null, _null, $T);
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.Zone_current().handleUncaughtError$2(e, s);
      }
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      P.Zone_current().handleUncaughtError$2(error, stackTrace);
    },
    _nullDoneHandler: function() {
    },
    _DelayedData$: function(value, $T) {
      return new P._DelayedData(value, [$T]);
    },
    _StreamImplEvents$: function($T) {
      return new P._StreamImplEvents([$T]);
    },
    _DoneStreamSubscription$: function(_onDone, $T) {
      var t1 = new P._DoneStreamSubscription(P.Zone_current(), _onDone, [$T]);
      t1._DoneStreamSubscription$1(_onDone, $T);
      return t1;
    },
    Timer_Timer: function(duration, callback) {
      if (H.boolConversionCheck(J.$eq$(P.Zone_current(), C.C__RootZone)))
        return P.Zone_current().createTimer$2(duration, callback);
      return P.Zone_current().createTimer$2(duration, P.Zone_current().bindCallbackGuarded$1(callback));
    },
    AsyncError$: function(error, stackTrace) {
      return new P.AsyncError(error, stackTrace);
    },
    _ZoneFunction$: function(zone, $function, $T) {
      return new P._ZoneFunction(zone, $function, [$T]);
    },
    ZoneSpecification_ZoneSpecification$from: function(other, handleUncaughtError) {
      var t1 = handleUncaughtError == null ? other.handleUncaughtError : handleUncaughtError,
        t2 = other.run,
        t3 = other.runUnary,
        t4 = other.runBinary,
        t5 = other.registerCallback,
        t6 = other.registerUnaryCallback,
        t7 = other.registerBinaryCallback,
        t8 = other.errorCallback,
        t9 = other.scheduleMicrotask,
        t10 = other.createTimer,
        t11 = other.createPeriodicTimer,
        t12 = other.print,
        t13 = other.fork;
      return P._ZoneSpecification$(t11, t10, t8, t13, t1, t12, t7, t5, t6, t2, t4, t3, t9);
    },
    _ZoneSpecification$: function(createPeriodicTimer, createTimer, errorCallback, fork, handleUncaughtError, $print, registerBinaryCallback, registerCallback, registerUnaryCallback, run, runBinary, runUnary, scheduleMicrotask) {
      return new P._ZoneSpecification(handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, scheduleMicrotask, createTimer, createPeriodicTimer, $print, fork);
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    Zone__enter: function(zone) {
      var previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave: function(previous) {
      $.Zone__current = previous;
    },
    _parentDelegate: function(zone) {
      if (zone.get$parent(zone) == null)
        return;
      return zone.get$parent(zone).get$_delegate();
    },
    _ZoneDelegate$: function(_delegationTarget) {
      return new P._ZoneDelegate(_delegationTarget);
    },
    _CustomZone$: function($parent, specification, _map) {
      var t1 = new P._CustomZone($parent, _map);
      t1._CustomZone$3($parent, specification, _map);
      return t1;
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if (H.boolConversionCheck(J.$eq$($.Zone__current, zone)))
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if (H.boolConversionCheck(J.$eq$($.Zone__current, zone)))
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if (H.boolConversionCheck(J.$eq$($.Zone__current, zone)))
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRegisterCallback: function($self, $parent, zone, f, $R) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      return H.functionTypeCheck(f, {func: 1, ret: $R});
    },
    _rootRegisterUnaryCallback: function($self, $parent, zone, f, $R, $T) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
    },
    _rootRegisterBinaryCallback: function($self, $parent, zone, f, $R, T1, T2) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    },
    _rootErrorCallback: function($self, $parent, zone, error, stackTrace) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      return;
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: -1});
      if (C.C__RootZone !== zone)
        f = !H.boolConversionCheck(C.C__RootZone.inSameErrorZone$1(zone)) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _rootCreateTimer: function($self, $parent, zone, duration, callback) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      return P.Timer__createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1$1(callback, -1) : callback);
    },
    _rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Timer]});
      return P.Timer__createPeriodicTimer(duration, C.C__RootZone !== zone ? zone.bindUnaryCallback$2$1(callback, null, P.Timer) : callback);
    },
    _rootPrint: function($self, $parent, zone, line) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.printToConsole(H.stringTypeCheck(line));
    },
    _printToZone: function(line) {
      H.stringTypeCheck(line);
      J.print$1$z(P.Zone_current(), line);
    },
    _rootFork: function($self, $parent, zone, specification, zoneValues) {
      var valueMap, _null = null;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(specification, "$isZoneSpecification");
      H.interceptedTypeCheck(zoneValues, "$isMap");
      $.printToZone = P.async___printToZone$closure();
      if (specification == null)
        specification = C._ZoneSpecification_ALf;
      if (zoneValues == null)
        valueMap = zone instanceof P._Zone ? zone.get$_async$_map() : P.HashMap_HashMap(_null, _null);
      else
        valueMap = P.HashMap_HashMap$from(zoneValues, _null, _null);
      return P._CustomZone$(zone, specification, valueMap);
    },
    runZoned: function(body, onError, zoneSpecification, zoneValues, $R) {
      var e, stackTrace, errorHandler, t2, exception, _null = null, t1 = {};
      if (onError == null)
        return P._runZoned(body, zoneValues, zoneSpecification, $R);
      t1.binaryOnError = t1.unaryOnError = null;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t1.binaryOnError = onError;
      else if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object]}))
        t1.unaryOnError = onError;
      else
        throw H.wrapException(P.ArgumentError$("onError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
      errorHandler = new P.runZoned_closure(t1);
      if (zoneSpecification == null)
        zoneSpecification = P._ZoneSpecification$(_null, _null, _null, _null, errorHandler, _null, _null, _null, _null, _null, _null, _null, _null);
      else
        zoneSpecification = P.ZoneSpecification_ZoneSpecification$from(zoneSpecification, errorHandler);
      try {
        t2 = P._runZoned(body, zoneValues, zoneSpecification, $R);
        return t2;
      } catch (exception) {
        e = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t2 = t1.binaryOnError;
        if (t2 != null)
          t2.call$2(e, stackTrace);
        else
          t1.unaryOnError.call$1(e);
      }
      return;
    },
    _runZoned: function(body, zoneValues, specification, $R) {
      return P.Zone_current().fork$2$specification$zoneValues(specification, zoneValues).run$1$1(body, $R);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter() {
    },
    _AsyncStarStreamController: function _AsyncStarStreamController() {
    },
    _IterationMarker: function _IterationMarker() {
    },
    _SyncStarIterator: function _SyncStarIterator() {
    },
    _SyncStarIterable: function _SyncStarIterable() {
    },
    _BroadcastStream: function _BroadcastStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._eventState = 0;
      _._previous = _._async$_next = null;
      _._controller = t0;
      _._onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _SyncBroadcastStreamController: function _SyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _SyncBroadcastStreamController__sendData_closure: function _SyncBroadcastStreamController__sendData_closure(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    _AsBroadcastStreamController: function _AsBroadcastStreamController() {
    },
    DeferredLibrary: function DeferredLibrary() {
    },
    DeferredLoadException: function DeferredLoadException() {
    },
    FutureOr: function FutureOr() {
    },
    Future: function Future() {
    },
    TimeoutException: function TimeoutException() {
    },
    Completer: function Completer() {
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    _AsyncRun: function _AsyncRun() {
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    EventSink: function EventSink() {
    },
    StreamView: function StreamView() {
    },
    StreamConsumer: function StreamConsumer() {
    },
    StreamSink: function StreamSink() {
    },
    StreamTransformer: function StreamTransformer() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    StreamIterator: function StreamIterator() {
    },
    _ControllerEventSinkWrapper: function _ControllerEventSinkWrapper() {
    },
    StreamController: function StreamController() {
    },
    SynchronousStreamController: function SynchronousStreamController() {
    },
    _StreamControllerLifecycle: function _StreamControllerLifecycle() {
    },
    _StreamControllerBase: function _StreamControllerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController() {
    },
    _SyncStreamController: function _SyncStreamController() {
    },
    _ControllerStream: function _ControllerStream() {
    },
    _ControllerSubscription: function _ControllerSubscription() {
    },
    _StreamSinkWrapper: function _StreamSinkWrapper() {
    },
    _AddStreamState: function _AddStreamState() {
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState() {
    },
    _EventSink: function _EventSink() {
    },
    _EventDispatch: function _EventDispatch() {
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl() {
    },
    _IterablePendingEvents: function _IterablePendingEvents() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError() {
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._zone = t0;
      _._state = 0;
      _._onDone = t1;
      _.$ti = t2;
    },
    _AsBroadcastStream: function _AsBroadcastStream() {
    },
    _BroadcastSubscriptionWrapper: function _BroadcastSubscriptionWrapper() {
    },
    _StreamIterator: function _StreamIterator() {
    },
    _EmptyStream: function _EmptyStream() {
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription() {
    },
    _WhereStream: function _WhereStream() {
    },
    _MapStream: function _MapStream() {
    },
    _ExpandStream: function _ExpandStream() {
    },
    _HandleErrorStream: function _HandleErrorStream() {
    },
    _TakeStream: function _TakeStream() {
    },
    _StateStreamSubscription: function _StateStreamSubscription() {
    },
    _TakeWhileStream: function _TakeWhileStream() {
    },
    _SkipStream: function _SkipStream() {
    },
    _SkipWhileStream: function _SkipWhileStream() {
    },
    _DistinctStream: function _DistinctStream() {
    },
    _EventSinkWrapper: function _EventSinkWrapper() {
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription() {
    },
    _StreamSinkTransformer: function _StreamSinkTransformer() {
    },
    _BoundSinkStream: function _BoundSinkStream() {
    },
    _HandlerEventSink: function _HandlerEventSink() {
    },
    _StreamHandlerTransformer: function _StreamHandlerTransformer() {
    },
    _StreamBindTransformer: function _StreamBindTransformer() {
    },
    _StreamSubscriptionTransformer: function _StreamSubscriptionTransformer() {
    },
    _BoundSubscriptionStream: function _BoundSubscriptionStream() {
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _ZoneFunction: function _ZoneFunction(t0, t1, t2) {
      this.zone = t0;
      this.$function = t1;
      this.$ti = t2;
    },
    ZoneSpecification: function ZoneSpecification() {
    },
    _ZoneSpecification: function _ZoneSpecification(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.handleUncaughtError = t0;
      _.run = t1;
      _.runUnary = t2;
      _.runBinary = t3;
      _.registerCallback = t4;
      _.registerUnaryCallback = t5;
      _.registerBinaryCallback = t6;
      _.errorCallback = t7;
      _.scheduleMicrotask = t8;
      _.createTimer = t9;
      _.createPeriodicTimer = t10;
      _.print = t11;
      _.fork = t12;
    },
    ZoneDelegate: function ZoneDelegate() {
    },
    Zone: function Zone() {
    },
    _ZoneDelegate: function _ZoneDelegate(t0) {
      this._delegationTarget = t0;
    },
    _Zone: function _Zone() {
    },
    _CustomZone: function _CustomZone(t0, t1) {
      var _ = this;
      _._delegateCache = _._handleUncaughtError = _._fork = _._print = _._createPeriodicTimer = _._async$_createTimer = _._scheduleMicrotask = _._errorCallback = _._registerBinaryCallback = _._registerUnaryCallback = _._registerCallback = _._async$_runBinary = _._async$_runUnary = _._async$_run = null;
      _.parent = t0;
      _._async$_map = t1;
    },
    _CustomZone_bindCallback_closure: function _CustomZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.R = t2;
    },
    _CustomZone_bindUnaryCallback_closure: function _CustomZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.registered = t1;
      _.T = t2;
      _.R = t3;
    },
    _CustomZone_bindCallbackGuarded_closure: function _CustomZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.registered = t1;
    },
    _CustomZone_bindUnaryCallbackGuarded_closure: function _CustomZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.registered = t1;
      this.T = t2;
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindUnaryCallback_closure: function _RootZone_bindUnaryCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.T = t2;
      _.R = t3;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    runZoned_closure: function runZoned_closure(t0) {
      this._box_0 = t0;
    },
    HashMap_HashMap: function($K, $V) {
      var t1 = P._HashMap$($K, $V);
      return t1;
    },
    _HashMap$: function($K, $V) {
      return new P._HashMap([$K, $V]);
    },
    _HashMap__isStringKey: function(key) {
      return typeof key === "string" && key !== "__proto__";
    },
    _HashMap__isNumericKey: function(key) {
      return typeof key === "number" && (key & 1073741823) === key;
    },
    _HashMap__hasTableEntry: function(table, key) {
      return table[key] != null;
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _HashMap__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._HashMap__setTableEntry(table, _s20_, table);
      P._HashMap__deleteTableEntry(table, _s20_);
      return table;
    },
    _HashMapKeyIterable$: function(_map, $E) {
      return new P._HashMapKeyIterable(_map, [$E]);
    },
    _HashMapKeyIterator$: function(_map, _keys, $E) {
      return new P._HashMapKeyIterator(_map, _keys, [$E]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V)), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6($K, $V);
    },
    LinkedHashMap__makeEmpty: function() {
      return H.JsLinkedHashMap$(null, null);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, H.JsLinkedHashMap$(null, null));
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      var t1 = P._LinkedHashSet$($E);
      return t1;
    },
    _LinkedHashSet$: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__isStringElement: function(element) {
      return typeof element === "string" && element !== "__proto__";
    },
    _LinkedHashSet__isNumericElement: function(element) {
      return typeof element === "number" && (element & 1073741823) === element;
    },
    _LinkedHashSet__getTableEntry: function(table, key) {
      return table[key];
    },
    _LinkedHashSet__setTableEntry: function(table, key, value) {
      table[key] = value;
    },
    _LinkedHashSet__deleteTableEntry: function(table, key) {
      delete table[key];
    },
    _LinkedHashSet__newHashTable: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      P._LinkedHashSet__setTableEntry(table, _s20_, table);
      P._LinkedHashSet__deleteTableEntry(table, _s20_);
      return table;
    },
    _LinkedHashSetCell$: function(_element) {
      return new P._LinkedHashSetCell(_element);
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._LinkedHashSetIterator$2(_set, _modifications, $E);
      return t1;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap($K, $V);
      J.forEach$1$ax(other, new P.HashMap_HashMap$from_closure(result, $K, $V));
      return H.assertSubtype(result, "$isHashMap", [$K, $V], "$asHashMap");
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable))) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      t1 = P.StringBuffer$(leftDelimiter);
      t1.writeAll$2(parts, ", ");
      t1.write$1(0, rightDelimiter);
      return t1.toString$0(0);
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (H.boolConversionCheck(P._isToStringVisiting(iterable)))
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = J.getInterceptor$ax($._toStringVisiting);
      t1.add$1($._toStringVisiting, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        t1.removeLast$0($._toStringVisiting);
      }
      J.write$1$z(buffer, rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var t2,
        t1 = J.getInterceptor$asx($._toStringVisiting),
        i = 0;
      while (true) {
        t2 = t1.get$length($._toStringVisiting);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = t1.$index($._toStringVisiting, i);
        if (o == null ? t2 == null : o === t2)
          return true;
        ++i;
      }
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, t2, elision,
        it = J.get$iterator$ax(iterable),
        t1 = J.getInterceptor$asx(parts),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!H.boolConversionCheck(it.moveNext$0()))
          return;
        next = H.S(it.get$current(it));
        t1.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!H.boolConversionCheck(it.moveNext$0())) {
        if (count <= 5)
          return;
        ultimateString = t1.removeLast$0(parts);
        penultimateString = t1.removeLast$0(parts);
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!H.boolConversionCheck(it.moveNext$0())) {
          if (count <= 4) {
            t1.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          penultimateString = t1.removeLast$0(parts);
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; H.boolConversionCheck(it.moveNext$0()); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                t2 = J.get$length$asx(t1.removeLast$0(parts));
                if (typeof t2 !== "number")
                  return t2.$add();
                $length -= t2 + 2;
                --count;
              }
              t1.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      t2 = t1.get$length(parts);
      if (typeof t2 !== "number")
        return t2.$add();
      if (count > t2 + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if ($length > 80) {
          t2 = t1.get$length(parts);
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 3;
        } else
          t2 = false;
        if (!t2)
          break;
        t2 = J.get$length$asx(t1.removeLast$0(parts));
        if (typeof t2 !== "number")
          return t2.$add();
        $length -= t2 + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        t1.add$1(parts, elision);
      t1.add$1(parts, penultimateString);
      t1.add$1(parts, ultimateString);
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(list, "[", "]");
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (H.boolConversionCheck(P._isToStringVisiting(m)))
        return "{...}";
      result = P.StringBuffer$("");
      try {
        J.add$1$ax($._toStringVisiting, m);
        J.write$1$z(result, "{");
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        J.write$1$z(result, "}");
      } finally {
        J.removeLast$0$ax($._toStringVisiting);
      }
      return J.toString$0$(result);
    },
    _MapBaseValueIterable$: function(_map, $K, $V) {
      return new P._MapBaseValueIterable(_map, [$K, $V]);
    },
    _MapBaseValueIterator$: function(map, $K, $V) {
      return new P._MapBaseValueIterator(J.get$iterator$ax(J.get$keys$x(map)), map, [$K, $V]);
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap() {
    },
    _CustomHashMap: function _CustomHashMap() {
    },
    _CustomHashMap_closure: function _CustomHashMap_closure() {
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap() {
    },
    _Es6LinkedIdentityHashMap: function _Es6LinkedIdentityHashMap() {
    },
    _Es6MapIterable: function _Es6MapIterable() {
    },
    _Es6MapIterator: function _Es6MapIterator() {
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap() {
    },
    _HashSet: function _HashSet() {
    },
    _IdentityHashSet: function _IdentityHashSet() {
    },
    _CustomHashSet: function _CustomHashSet() {
    },
    _HashSetIterator: function _HashSetIterator() {
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedIdentityHashSet: function _LinkedIdentityHashSet() {
    },
    _LinkedCustomHashSet: function _LinkedCustomHashSet() {
    },
    _LinkedCustomHashSet_closure: function _LinkedCustomHashSet_closure() {
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._collection$_element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    UnmodifiableListView: function UnmodifiableListView() {
    },
    HashMap: function HashMap() {
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    HashSet: function HashSet() {
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    HasNextIterator: function HasNextIterator() {
    },
    LinkedHashMap: function LinkedHashMap() {
    },
    LinkedHashSet: function LinkedHashSet() {
    },
    LinkedList0: function LinkedList0() {
    },
    _LinkedListIterator0: function _LinkedListIterator0() {
    },
    LinkedListEntry: function LinkedListEntry() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    Queue: function Queue() {
    },
    _DoubleLink: function _DoubleLink() {
    },
    DoubleLinkedQueueEntry: function DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueEntry: function _DoubleLinkedQueueEntry() {
    },
    _DoubleLinkedQueueElement: function _DoubleLinkedQueueElement() {
    },
    _DoubleLinkedQueueSentinel: function _DoubleLinkedQueueSentinel() {
    },
    DoubleLinkedQueue: function DoubleLinkedQueue() {
    },
    _DoubleLinkedQueueIterator: function _DoubleLinkedQueueIterator() {
    },
    ListQueue: function ListQueue() {
    },
    _ListQueueIterator: function _ListQueueIterator() {
    },
    SetMixin: function SetMixin() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSet: function _UnmodifiableSet() {
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeMapNode: function _SplayTreeMapNode() {
    },
    _SplayTree: function _SplayTree() {
    },
    _TypeTest: function _TypeTest() {
    },
    SplayTreeMap: function SplayTreeMap() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable() {
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator() {
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator() {
    },
    _SplayTreeNodeIterator: function _SplayTreeNodeIterator() {
    },
    SplayTreeSet: function SplayTreeSet() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SetBase_Object_SetMixin: function _SetBase_Object_SetMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var decoder, t1, $length;
      if (H.boolConversionCheck(allowMalformed))
        return;
      decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && end == null)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      if (H.boolConversionCheck(P.Utf8Decoder__unsafe(codeUnits)))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var i,
        limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var unit,
        t1 = J.getInterceptor$asx(units),
        i = from;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof endIndex !== "number")
          return H.iae(endIndex);
        if (!(i < endIndex))
          break;
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit) {
          if (typeof from !== "number")
            return H.iae(from);
          return i - from;
        }
        ++i;
      }
      if (typeof from !== "number")
        return H.iae(from);
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (typeof $length !== "number")
        return $length.$mod();
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (typeof firstPadding !== "number")
        return firstPadding.$add();
      if (typeof paddingCount !== "number")
        return H.iae(paddingCount);
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder$: function(urlSafe) {
      return new P._Base64Encoder(H.boolConversionCheck(urlSafe) ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    },
    _Base64Encoder__encodeState: function(count, bits) {
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Encoder__stateBits: function(state) {
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Encoder__stateCount: function(state) {
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Encoder_encodeChunk: function(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var expectedChars, t2, t3, i, byteOr, byte, outputIndex0,
        bits = P._Base64Encoder__stateBits(state),
        t1 = P._Base64Encoder__stateCount(state);
      if (typeof t1 !== "number")
        return H.iae(t1);
      expectedChars = 3 - t1;
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$s(alphabet);
      t3 = output && C.NativeUint8List_methods;
      i = start;
      byteOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr = (byteOr | byte) >>> 0;
        if (typeof bits !== "number")
          return bits.$shl();
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          if (typeof outputIndex !== "number")
            return outputIndex.$add();
          outputIndex0 = outputIndex + 1;
          t3.$indexSet(output, outputIndex, t2._codeUnitAt$1(alphabet, bits >>> 18 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 12 & 63));
          outputIndex0 = outputIndex + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits >>> 6 & 63));
          outputIndex = outputIndex0 + 1;
          C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits & 63));
          bits = 0;
          expectedChars = 3;
        }
        ++i;
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (H.boolConversionCheck(isLast) && expectedChars < 3) {
          P._Base64Encoder_writeFinalChunk(alphabet, output, outputIndex, 3 - expectedChars, bits);
          return 0;
        }
        return P._Base64Encoder__encodeState(3 - expectedChars, bits);
      }
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw H.wrapException(P.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + H.S(J.toRadixString$1$n(t1.$index(bytes, i), 16)), null));
    },
    _Base64Encoder_writeFinalChunk: function(alphabet, output, outputIndex, count, bits) {
      var outputIndex0,
        t1 = J.getInterceptor$s(alphabet),
        t2 = output && C.NativeUint8List_methods;
      if (count === 1) {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 2) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, bits << 4 & 63));
        outputIndex0 = outputIndex + 1;
        t1 = output.length;
        if (outputIndex < 0 || outputIndex >= t1)
          return H.ioore(output, outputIndex);
        output[outputIndex] = 61;
        if (outputIndex0 < 0 || outputIndex0 >= t1)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      } else {
        if (typeof outputIndex !== "number")
          return outputIndex.$add();
        outputIndex0 = outputIndex + 1;
        if (typeof bits !== "number")
          return bits.$shr();
        t2.$indexSet(output, outputIndex, t1._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 10) & 63));
        outputIndex = outputIndex0 + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex0, C.JSString_methods._codeUnitAt$1(alphabet, C.JSInt_methods._shrOtherPositive$1(bits, 4) & 63));
        outputIndex0 = outputIndex + 1;
        C.NativeUint8List_methods.$indexSet(output, outputIndex, C.JSString_methods._codeUnitAt$1(alphabet, bits << 2 & 63));
        if (outputIndex0 < 0 || outputIndex0 >= output.length)
          return H.ioore(output, outputIndex0);
        output[outputIndex0] = 61;
      }
    },
    _Base64Decoder$: function() {
      return new P._Base64Decoder();
    },
    _Base64Decoder__encodeCharacterState: function(count, bits) {
      if (typeof bits !== "number")
        return bits.$shl();
      if (typeof count !== "number")
        return H.iae(count);
      return (bits << 2 | count) >>> 0;
    },
    _Base64Decoder__stateCount: function(state) {
      if (typeof state !== "number")
        return state.$and();
      return state & 3;
    },
    _Base64Decoder__stateBits: function(state) {
      if (typeof state !== "number")
        return state.$shr();
      return C.JSInt_methods._shrOtherPositive$1(state, 2);
    },
    _Base64Decoder__encodePaddingState: function(expectedPadding) {
      if (typeof expectedPadding !== "number")
        return expectedPadding.$negate();
      return -expectedPadding - 1;
    },
    _Base64Decoder__statePadding: function(state) {
      if (typeof state !== "number")
        return state.$negate();
      return -state - 1;
    },
    _Base64Decoder__hasSeenPadding: function(state) {
      if (typeof state !== "number")
        return state.$lt();
      return state < 0;
    },
    _Base64Decoder_decodeChunk: function(input, start, end, output, outIndex, state) {
      var char, code, outIndex0, t2, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = P._Base64Decoder__stateBits(state),
        count = P._Base64Decoder__stateCount(state),
        t1 = J.getInterceptor$s(input),
        i = start,
        charOr = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(input, i);
          if (typeof char !== "number")
            return H.iae(char);
          charOr = (charOr | char) >>> 0;
          code = J.$index$asx($.$get$_Base64Decoder__inverseAlphabet(), char & 127);
          if (typeof code !== "number")
            return code.$ge();
          if (code >= 0) {
            if (typeof bits !== "number")
              return bits.$shl();
            bits = (bits << 6 | code) & 16777215;
            if (typeof count !== "number")
              return count.$add();
            count = count + 1 & 3;
            if (count === 0) {
              if (typeof outIndex !== "number")
                return outIndex.$add();
              outIndex0 = outIndex + 1;
              t2 = output.length;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits >>> 16 & 255;
              outIndex = outIndex0 + 1;
              if (outIndex0 < 0 || outIndex0 >= t2)
                return H.ioore(output, outIndex0);
              output[outIndex0] = bits >>> 8 & 255;
              outIndex0 = outIndex + 1;
              if (outIndex < 0 || outIndex >= t2)
                return H.ioore(output, outIndex);
              output[outIndex] = bits & 255;
              outIndex = outIndex0;
              bits = 0;
            }
            break c$0;
          } else {
            if (code === -1) {
              if (typeof count !== "number")
                return count.$gt();
              t2 = count > 1;
            } else
              t2 = false;
            if (t2) {
              if (charOr > 127)
                break;
              if (count === 3) {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 3) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                outIndex0 = outIndex + 1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 10);
                t2 = output.length;
                if (outIndex < 0 || outIndex >= t2)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 2);
                if (outIndex0 < 0 || outIndex0 >= t2)
                  return H.ioore(output, outIndex0);
                output[outIndex0] = t1;
              } else {
                if (typeof bits !== "number")
                  return bits.$and();
                if ((bits & 15) !== 0)
                  throw H.wrapException(P.FormatException$(_s31_, input, i));
                if (typeof outIndex !== "number")
                  return outIndex.$add();
                t1 = C.JSInt_methods._shrOtherPositive$1(bits, 4);
                if (outIndex < 0 || outIndex >= output.length)
                  return H.ioore(output, outIndex);
                output[outIndex] = t1;
              }
              if (typeof count !== "number")
                return H.iae(count);
              expectedPadding = (3 - count) * 3;
              return P._Base64Decoder__checkPadding(input, i + 1, end, P._Base64Decoder__encodePaddingState(char === 37 ? expectedPadding + 2 : expectedPadding));
            }
          }
          throw H.wrapException(P.FormatException$(_s17_, input, i));
        }
        ++i;
      }
      if (charOr >= 0 && charOr <= 127)
        return P._Base64Decoder__encodeCharacterState(count, bits);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(input, i);
        if (typeof char !== "number")
          return char.$lt();
        if (char < 0 || char > 127)
          break;
        ++i;
      }
      throw H.wrapException(P.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer: function(input, start, end, state) {
      var $length, bufferLength, remainderLength,
        paddingStart = P._Base64Decoder__trimPaddingChars(input, start, end),
        t1 = P._Base64Decoder__stateCount(state);
      if (typeof paddingStart !== "number")
        return paddingStart.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      if (typeof t1 !== "number")
        return t1.$add();
      $length = t1 + (paddingStart - start);
      bufferLength = C.JSInt_methods._shrOtherPositive$1($length, 2) * 3;
      remainderLength = $length & 3;
      if (remainderLength !== 0) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = paddingStart < end;
      } else
        t1 = false;
      if (t1)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return H.NativeUint8List_NativeUint8List(bufferLength);
      return;
    },
    _Base64Decoder__trimPaddingChars: function(input, start, end) {
      var char,
        t1 = J.getInterceptor$s(input),
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (typeof index !== "number")
          return index.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          char = t1.codeUnitAt$1(input, index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if (typeof char !== "number")
            return char.$or();
          if ((char | 32) >>> 0 === 100) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            char = C.JSString_methods.codeUnitAt$1(input, index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding: function(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start == end)
        return state;
      expectedPadding = P._Base64Decoder__statePadding(state);
      t1 = J.getInterceptor$s(input);
      while (true) {
        if (typeof expectedPadding !== "number")
          return expectedPadding.$gt();
        if (!(expectedPadding > 0))
          break;
        char = t1.codeUnitAt$1(input, start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            if (typeof start !== "number")
              return start.$add();
            ++start;
            if (start === end)
              break;
            char = C.JSString_methods.codeUnitAt$1(input, start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          if (typeof start !== "number")
            return start.$add();
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          char = C.JSString_methods.codeUnitAt$1(input, start);
        }
        if (typeof char !== "number")
          return char.$or();
        if ((char | 32) >>> 0 !== 100)
          break;
        if (typeof start !== "number")
          return start.$add();
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start != end)
        throw H.wrapException(P.FormatException$("Invalid padding character", input, start));
      return P._Base64Decoder__encodePaddingState(expectedPadding);
    },
    _FusedCodec$: function(_first, _second, $S, $M, $T) {
      return new P._FusedCodec(_first, _second, [$S, $M, $T]);
    },
    _FusedConverter$: function(_first, _second, $S, $M, $T) {
      return new P._FusedConverter(_first, _second, [$S, $M, $T]);
    },
    Encoding_getByName: function($name) {
      if ($name == null)
        return;
      return J.$index$asx($.Encoding__nameToEncoding, C.JSString_methods.toLowerCase$0($name));
    },
    _Utf8Encoder$withBufferSize: function(bufferSize) {
      return new P._Utf8Encoder(P._Utf8Encoder__createBuffer(bufferSize));
    },
    _Utf8Encoder__createBuffer: function(size) {
      return H.NativeUint8List_NativeUint8List(size);
    },
    Utf8Decoder$: function(allowMalformed) {
      return new P.Utf8Decoder(allowMalformed);
    },
    _isLeadSurrogate: function(codeUnit) {
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 55296;
    },
    _isTailSurrogate: function(codeUnit) {
      if (typeof codeUnit !== "number")
        return codeUnit.$and();
      return (codeUnit & 64512) === 56320;
    },
    _combineSurrogatePair: function(lead, tail) {
      if (typeof lead !== "number")
        return lead.$and();
      if (typeof tail !== "number")
        return tail.$and();
      return 65536 + ((lead & 1023) << 10) | tail & 1023;
    },
    _Utf8Decoder$: function(_stringSink, _allowMalformed) {
      return new P._Utf8Decoder(_allowMalformed, _stringSink);
    },
    _JsonMap: function _JsonMap() {
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable() {
    },
    _JsonDecoderSink: function _JsonDecoderSink() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetEncoderSink: function _UnicodeSubsetEncoderSink() {
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _ErrorHandlingAsciiDecoderSink: function _ErrorHandlingAsciiDecoderSink() {
    },
    _SimpleAsciiDecoderSink: function _SimpleAsciiDecoderSink() {
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    _BufferCachingBase64Encoder: function _BufferCachingBase64Encoder() {
    },
    _Base64EncoderSink: function _Base64EncoderSink() {
    },
    _AsciiBase64EncoderSink: function _AsciiBase64EncoderSink() {
    },
    _Utf8Base64EncoderSink: function _Utf8Base64EncoderSink() {
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    _Base64DecoderSink: function _Base64DecoderSink() {
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    ByteConversionSinkBase: function ByteConversionSinkBase() {
    },
    _ByteAdapterSink: function _ByteAdapterSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink() {
    },
    ChunkedConversionSink: function ChunkedConversionSink() {
    },
    _SimpleCallbackSink: function _SimpleCallbackSink() {
    },
    _ConverterStreamEventSink: function _ConverterStreamEventSink() {
    },
    Codec: function Codec() {
    },
    _FusedCodec: function _FusedCodec(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    _InvertedCodec: function _InvertedCodec() {
    },
    Converter: function Converter() {
    },
    _FusedConverter: function _FusedConverter(t0, t1, t2) {
      this._convert$_first = t0;
      this._second = t1;
      this.$ti = t2;
    },
    Encoding: function Encoding() {
    },
    HtmlEscapeMode: function HtmlEscapeMode() {
    },
    HtmlEscape: function HtmlEscape() {
    },
    _HtmlEscapeSink: function _HtmlEscapeSink() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError() {
    },
    JsonCyclicError: function JsonCyclicError() {
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder() {
    },
    JsonUtf8Encoder: function JsonUtf8Encoder() {
    },
    _JsonEncoderSink: function _JsonEncoderSink() {
    },
    _JsonUtf8EncoderSink: function _JsonUtf8EncoderSink() {
    },
    JsonDecoder: function JsonDecoder() {
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonPrettyPrintMixin: function _JsonPrettyPrintMixin() {
    },
    _JsonStringStringifier: function _JsonStringStringifier() {
    },
    _JsonStringStringifierPretty: function _JsonStringStringifierPretty() {
    },
    _JsonUtf8Stringifier: function _JsonUtf8Stringifier() {
    },
    _JsonUtf8StringifierPretty: function _JsonUtf8StringifierPretty() {
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Latin1Decoder: function Latin1Decoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    _Latin1DecoderSink: function _Latin1DecoderSink() {
    },
    _Latin1AllowInvalidDecoderSink: function _Latin1AllowInvalidDecoderSink() {
    },
    LineSplitter: function LineSplitter() {
    },
    _LineSplitterSink: function _LineSplitterSink() {
    },
    _LineSplitterEventSink: function _LineSplitterEventSink() {
    },
    StringConversionSink: function StringConversionSink() {
    },
    ClosableStringSink: function ClosableStringSink() {
    },
    _ClosableStringSink: function _ClosableStringSink() {
    },
    _StringConversionSinkAsStringSinkAdapter: function _StringConversionSinkAsStringSinkAdapter() {
    },
    StringConversionSinkBase: function StringConversionSinkBase() {
    },
    StringConversionSinkMixin: function StringConversionSinkMixin() {
    },
    _StringSinkConversionSink: function _StringSinkConversionSink() {
    },
    _StringCallbackSink: function _StringCallbackSink() {
    },
    _StringAdapterSink: function _StringAdapterSink() {
    },
    _Utf8StringSinkAdapter: function _Utf8StringSinkAdapter() {
    },
    _Utf8ConversionSink: function _Utf8ConversionSink() {
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._buffer = t0;
    },
    _Utf8EncoderSink: function _Utf8EncoderSink() {
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._value = 0;
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: function __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin() {
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: function __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin() {
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: function __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin() {
    },
    _symbolToString: function(symbol) {
      return H.Symbol_getName(symbol);
    },
    Function_apply: function($function, positionalArguments) {
      return H.Primitives_applyFunction($function, positionalArguments, null);
    },
    Expando$: function($name, $T) {
      var t1 = typeof WeakMap == "function" ? new WeakMap() : P.Expando__createKey();
      return new P.Expando(t1, $name, [$T]);
    },
    Expando__getFromObject: function(key, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, key);
    },
    Expando__setOnObject: function(key, object, value) {
      var _s14_ = "expando$values",
        values = H.Primitives_getProperty(object, _s14_);
      if (values == null) {
        values = P.Object$();
        H.Primitives_setProperty(object, _s14_, values);
      }
      H.Primitives_setProperty(values, key, value);
    },
    Expando__createKey: function() {
      var t1 = $.Expando__keyCount;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Expando__keyCount = t1 + 1;
      return "expando$key$" + H.S(t1);
    },
    Expando__checkType: function(object) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
    },
    int_parse: function(source, onError, radix) {
      var value = P.int_tryParse(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    int_tryParse: function(source, radix) {
      return H.Primitives_parseInt(source, radix);
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(string);
    },
    DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
      var t1;
      if (typeof millisecondsSinceEpoch !== "number")
        return H.iae(millisecondsSinceEpoch);
      t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
      t1.DateTime$_withValue$2$isUtc(millisecondsSinceEpoch, isUtc);
      return t1;
    },
    List_List$filled: function($length, fill, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); H.boolConversionCheck(t1.moveNext$0());)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(J.get$current$z(t1), $E));
      if (H.boolConversionCheck(growable))
        return list;
      return H.makeListFixedLength(list, $E);
    },
    List_List$unmodifiable: function(elements, $E) {
      return H.makeFixedListUnmodifiable(H.assertSubtype(P.List_List$from(elements, false, $E), "$isList", [$E], "$asList"), $E);
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array)
        return P.String__stringFromJSArray(H.assertSubtype(charCodes, "$isJSArray", [P.int], "$asJSArray"), start, end);
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return P.String__stringFromUint8List(charCodes, start, end);
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode: function(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromJSArray: function(list, start, endOrNull) {
      var t2,
        t1 = J.getInterceptor$asx(list),
        len = t1.get$length(list),
        end = P.RangeError_checkValidRange(start, endOrNull, len);
      if (typeof start !== "number")
        return start.$gt();
      if (start <= 0) {
        if (typeof end !== "number")
          return end.$lt();
        if (typeof len !== "number")
          return H.iae(len);
        t2 = end < len;
      } else
        t2 = true;
      return H.Primitives_stringFromCharCodes(t2 ? t1.sublist$2(list, start, end) : list);
    },
    String__stringFromUint8List: function(charCodes, start, endOrNull) {
      return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, endOrNull, charCodes.length));
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!H.boolConversionCheck(it.moveNext$0()))
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; H.boolConversionCheck(it.moveNext$0());)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!H.boolConversionCheck(it.moveNext$0()))
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, multiLine) {
      return H.JSSyntaxRegExp$(source, true, false, multiLine, false);
    },
    StringBuffer$: function($content) {
      return new P.StringBuffer(H.S($content));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return string;
      if (H.boolConversionCheck(J.get$isEmpty$asx(separator))) {
        do
          string = P.StringBuffer__writeOne(string, iterator.get$current(iterator));
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        string = P.StringBuffer__writeOne(string, iterator.get$current(iterator));
        for (; H.boolConversionCheck(iterator.moveNext$0());)
          string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current(iterator));
      }
      return string;
    },
    StringBuffer__writeOne: function(string, obj) {
      return H.Primitives_stringConcatUnchecked(string, H.S(obj));
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base: function() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__isWindows: function() {
      return $.$get$_Uri__isWindowsCached();
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var result, bytes, t1, t2, i, t3, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === C.C_Utf8Codec && H.boolConversionCheck($.$get$_Uri__needsNoEncoding().hasMatch$1(text)))
        return text;
      result = P.StringBuffer$("");
      bytes = encoding.encode$1(text);
      t1 = J.getInterceptor$asx(bytes);
      t2 = J.getInterceptor$asx(canonicalTable);
      i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return byte.$lt();
        if (byte < 128) {
          t3 = t2.$index(canonicalTable, C.JSInt_methods._shrOtherPositive$1(byte, 4));
          if (typeof t3 !== "number")
            return t3.$and();
          t3 = (t3 & 1 << (byte & 15)) >>> 0 !== 0;
        } else
          t3 = false;
        if (t3)
          result.writeCharCode$1(byte);
        else if (H.boolConversionCheck(spaceToPlus) && byte === 32)
          result.write$1(0, "+");
        else {
          result.write$1(0, "%");
          result.write$1(0, _s16_[C.JSInt_methods._shrOtherPositive$1(byte, 4) & 15]);
          result.write$1(0, _s16_[byte & 15]);
        }
        ++i;
      }
      return result.toString$0(0);
    },
    StackTrace_current: function() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    DateTime$_withValue: function(_value, isUtc) {
      var t1 = new P.DateTime(_value, isUtc);
      t1.DateTime$_withValue$2$isUtc(_value, isUtc);
      return t1;
    },
    DateTime__fourDigits: function(n) {
      var absN, sign;
      if (typeof n !== "number")
        return n.abs$0();
      absN = Math.abs(n);
      sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(seconds) {
      if (typeof seconds !== "number")
        return H.iae(seconds);
      return new P.Duration(1000000 * seconds);
    },
    Duration$_microseconds: function(_duration) {
      return new P.Duration(_duration);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    NullThrownError$: function() {
      return new P.NullThrownError();
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    ArgumentError_checkNotNull: function(argument, $name) {
      if (argument == null)
        throw H.wrapException(P.ArgumentError$notNull($name));
    },
    RangeError$: function(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, message != null ? message : "Invalid value");
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      if (typeof value !== "number")
        return value.$lt();
      if (typeof minValue !== "number")
        return H.iae(minValue);
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, message != null ? message : "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    StackOverflowError$: function() {
      return new P.StackOverflowError();
    },
    CyclicInitializationError$: function(variableName) {
      return new P.CyclicInitializationError(variableName);
    },
    Exception_Exception: function(message) {
      return P._Exception$(message);
    },
    _Exception$: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, t1, i;
      if (H.boolConversionCheck(growable)) {
        result = H.setRuntimeTypeInfo([], [$E]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = new Array($length);
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [$E]);
      }
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    Object$: function() {
      return new P.Object();
    },
    print: function(object) {
      var line = H.S(object),
        t1 = $.printToZone;
      if (t1 == null)
        H.printToConsole(line);
      else
        t1.call$1(line);
    },
    _StringStackTrace$: function(_stackTrace) {
      return new P._StringStackTrace(_stackTrace);
    },
    Uri_Uri$dataFromString: function($content) {
      return P.UriData_UriData$fromString($content, false, null, null, null).get$uri();
    },
    Uri_parse: function(uri) {
      var dataDelta, t1, indices, state, schemeEnd, t2, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, schemeAuth, delta, queryStart0, pathStart0, _null = null,
        end = uri.length;
      if (end >= 5) {
        dataDelta = P._startsWithData(uri, 0);
        if (dataDelta === 0)
          return P.UriData__parse(end < end ? J.substring$2$s(uri, 0, end) : uri, 5, _null).get$uri();
        else if (dataDelta === 32)
          return P.UriData__parse(J.substring$2$s(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      state = P._scan(uri, 0, end, 0, indices);
      if (typeof state !== "number")
        return state.$ge();
      if (state >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      t1 = indices.length;
      if (1 >= t1)
        return H.ioore(indices, 1);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          C.JSArray_methods.$indexSet(indices, 7, schemeEnd);
      if (2 >= t1)
        return H.ioore(indices, 2);
      t2 = indices[2];
      if (typeof t2 !== "number")
        return t2.$add();
      hostStart = t2 + 1;
      if (3 >= t1)
        return H.ioore(indices, 3);
      portStart = indices[3];
      if (4 >= t1)
        return H.ioore(indices, 4);
      pathStart = indices[4];
      if (5 >= t1)
        return H.ioore(indices, 5);
      queryStart = indices[5];
      if (6 >= t1)
        return H.ioore(indices, 6);
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      if (7 >= t1)
        return H.ioore(indices, 7);
      t1 = indices[7];
      if (typeof t1 !== "number")
        return t1.$lt();
      isSimple = t1 < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && H.boolConversionCheck(J.startsWith$2$s(uri, "..", pathStart))))
              t2 = queryStart > pathStart + 2 && H.boolConversionCheck(J.startsWith$2$s(uri, "/..", queryStart - 3));
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (H.boolConversionCheck(J.startsWith$2$s(uri, "file", 0))) {
                  if (hostStart <= 0) {
                    if (!H.boolConversionCheck(C.JSString_methods.startsWith$2(uri, "/", pathStart))) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = C.JSString_methods.$add(schemeAuth, C.JSString_methods.substring$2(uri, pathStart, end));
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (H.boolConversionCheck(C.JSString_methods.startsWith$2(uri, "http", 0))) {
                  if (t1 && portStart + 3 === pathStart && H.boolConversionCheck(C.JSString_methods.startsWith$2(uri, "80", portStart + 1))) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && H.boolConversionCheck(J.startsWith$2$s(uri, "https", 0))) {
                if (t1 && portStart + 4 === pathStart && H.boolConversionCheck(J.startsWith$2$s(uri, "443", portStart + 1))) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = J.replaceRange$3$asx(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        t1 = uri.length;
        if (end < t1) {
          uri = J.substring$2$s(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return P._SimpleUri$(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri_encodeQueryComponent: function(component) {
      return P._Uri__uriEncode(C.List_nxB, component, C.C_Utf8Codec, true);
    },
    Uri_decodeComponent: function(encodedComponent) {
      H.stringTypeCheck(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _null = null,
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = H.NativeUint8List_NativeUint8List(4),
        t1 = J.getInterceptor$s(host),
        i = start,
        partStart = i,
        partIndex = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char !== 46) {
          if (typeof char !== "number")
            return char.$xor();
          if ((char ^ 48) >>> 0 > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= result.length)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
        ++i;
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(t1.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= result.length)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var error, parseHex, parts, t1, i, partStart, wildcardSeen, seenDot, char, atEnd, isLastWildcard, last, t2, t3, bytes, wildCardLength, index, value, j;
      if (end == null)
        end = host.length;
      error = new P.Uri_parseIPv6Address_error(host);
      parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      t1 = J.getInterceptor$s(host);
      i = start;
      partStart = i;
      wildcardSeen = false;
      seenDot = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (!(i < end))
          break;
        char = t1.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58)))
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
        ++i;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      isLastWildcard = J.$eq$(C.JSArray_methods.get$last(parts), -1);
      if (atEnd && !H.boolConversionCheck(isLastWildcard))
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          t1 = J.getInterceptor$asx(last);
          t2 = t1.$index(last, 0);
          if (typeof t2 !== "number")
            return t2.$shl();
          t3 = t1.$index(last, 1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          C.JSArray_methods.add$1(parts, (t2 << 8 | t3) >>> 0);
          t3 = t1.$index(last, 2);
          if (typeof t3 !== "number")
            return t3.$shl();
          t1 = t1.$index(last, 3);
          if (typeof t1 !== "number")
            return H.iae(t1);
          C.JSArray_methods.add$1(parts, (t3 << 8 | t1) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = H.NativeUint8List_NativeUint8List(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            t2 = bytes.length;
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          if (typeof value !== "number")
            return value.$shr();
          t2 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          t3 = bytes.length;
          if (index < 0 || index >= t3)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (t2 >= t3)
            return H.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal: function(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new P._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      if (scheme == null) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$gt();
        if (typeof start !== "number")
          return H.iae(start);
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      }
      if (typeof hostStart !== "number")
        return hostStart.$gt();
      if (typeof start !== "number")
        return H.iae(start);
      if (hostStart > start) {
        if (typeof schemeEnd !== "number")
          return schemeEnd.$add();
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      if (typeof fragmentStart !== "number")
        return H.iae(fragmentStart);
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      if (typeof end !== "number")
        return H.iae(end);
      return P._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__Uri: function(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, _null = null;
      scheme = P._Uri__makeScheme(scheme, 0, P._stringOrNullLength(scheme));
      userInfo = P._Uri__makeUserInfo(_null, 0, P._stringOrNullLength(_null));
      host = P._Uri__makeHost(host, 0, P._stringOrNullLength(host), false);
      query = P._Uri__makeQuery(_null, 0, P._stringOrNullLength(_null), _null);
      fragment = P._Uri__makeFragment(_null, 0, P._stringOrNullLength(_null));
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = H.boolConversionCheck(J.get$isNotEmpty$asx(userInfo)) || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(path, 0, P._stringOrNullLength(path), pathSegments, scheme, hasAuthority);
      if (H.boolConversionCheck(J.getInterceptor$asx(scheme).get$isEmpty(scheme)) && t1 && !H.boolConversionCheck(J.startsWith$1$s(path, "/")))
        path = P._Uri__normalizeRelativePath(path, H.boolConversionCheck(C.JSString_methods.get$isNotEmpty(scheme)) || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return P._Uri$_internal(scheme, userInfo, t1 && H.boolConversionCheck(J.startsWith$1$s(path, "//")) ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__Uri$file: function(path, windows) {
      return H.interceptedTypeCheck(H.boolConversionCheck(windows == null ? P._Uri__isWindows() : windows) ? P._Uri__makeWindowsFileUrl(path, false) : P._Uri__makeFileUri(path, false), "$is_Uri");
    },
    _Uri__checkNonWindowsPathReservedCharacters: function(segments, argumentError) {
      J.forEach$1$ax(segments, new P._Uri__checkNonWindowsPathReservedCharacters_closure(argumentError));
    },
    _Uri__checkWindowsPathReservedCharacters: function(segments, argumentError, firstSegment) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(J.skip$1$ax(segments, firstSegment)); H.boolConversionCheck(t1.moveNext$0());) {
        t2 = J.get$current$z(t1);
        if (H.boolConversionCheck(J.contains$1$asx(t2, P.RegExp_RegExp('["*/:<>?\\\\|]', false))))
          if (H.boolConversionCheck(argumentError))
            throw H.wrapException(P.ArgumentError$("Illegal character in path"));
          else
            throw H.wrapException(P.UnsupportedError$("Illegal character in path: " + t2));
      }
    },
    _Uri__checkWindowsDriveLetter: function(charCode, argumentError) {
      var t1,
        _s21_ = "Illegal drive letter ";
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      if (H.boolConversionCheck(argumentError))
        throw H.wrapException(P.ArgumentError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
      else
        throw H.wrapException(P.UnsupportedError$(C.JSString_methods.$add(_s21_, P.String_String$fromCharCode(charCode))));
    },
    _Uri__makeFileUri: function(path, slashTerminated) {
      var _null = null,
        segments = H.setRuntimeTypeInfo(path.split("/"), [P.String]);
      if (H.boolConversionCheck(slashTerminated) && H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(segments)) && H.boolConversionCheck(J.get$isNotEmpty$asx(C.JSArray_methods.get$last(segments))))
        C.JSArray_methods.add$1(segments, "");
      if (H.boolConversionCheck(C.JSString_methods.startsWith$1(path, "/")))
        return P._Uri__Uri(_null, _null, segments, "file");
      else
        return P._Uri__Uri(_null, _null, segments, _null);
    },
    _Uri__makeWindowsFileUrl: function(path, slashTerminated) {
      var t1, pathSegments, pathStart, hostPart, _s1_ = "\\", _s4_ = "file", _null = null;
      if (H.boolConversionCheck(J.getInterceptor$s(path).startsWith$1(path, "\\\\?\\")))
        if (H.boolConversionCheck(C.JSString_methods.startsWith$2(path, "UNC\\", 4)))
          path = C.JSString_methods.replaceRange$3(path, 0, 7, _s1_);
        else {
          path = C.JSString_methods.substring$1(path, 4);
          if (path.length < 3 || !H.boolConversionCheck(J.$eq$(J.getInterceptor$s(path)._codeUnitAt$1(path, 1), 58)) || !H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(path, 2), 92)))
            throw H.wrapException(P.ArgumentError$("Windows paths with \\\\?\\ prefix must be absolute"));
        }
      else
        path = C.JSString_methods.replaceAll$2(path, "/", _s1_);
      t1 = path.length;
      if (t1 > 1 && H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 58))) {
        P._Uri__checkWindowsDriveLetter(C.JSString_methods._codeUnitAt$1(path, 0), true);
        if (t1 === 2 || !H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(path, 2), 92)))
          throw H.wrapException(P.ArgumentError$("Windows paths with drive letter must be absolute"));
        pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
        if (H.boolConversionCheck(slashTerminated) && H.boolConversionCheck(J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments))))
          C.JSArray_methods.add$1(pathSegments, "");
        P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 1);
        return P._Uri__Uri(_null, _null, pathSegments, _s4_);
      }
      if (H.boolConversionCheck(C.JSString_methods.startsWith$1(path, _s1_)))
        if (H.boolConversionCheck(C.JSString_methods.startsWith$2(path, _s1_, 1))) {
          pathStart = C.JSString_methods.indexOf$2(path, _s1_, 2);
          if (typeof pathStart !== "number")
            return pathStart.$lt();
          t1 = pathStart < 0;
          hostPart = t1 ? C.JSString_methods.substring$1(path, 2) : C.JSString_methods.substring$2(path, 2, pathStart);
          pathSegments = H.setRuntimeTypeInfo((t1 ? "" : C.JSString_methods.substring$1(path, pathStart + 1)).split(_s1_), [P.String]);
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          if (H.boolConversionCheck(slashTerminated) && H.boolConversionCheck(J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments))))
            C.JSArray_methods.add$1(pathSegments, "");
          return P._Uri__Uri(hostPart, _null, pathSegments, _s4_);
        } else {
          pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
          if (H.boolConversionCheck(slashTerminated) && H.boolConversionCheck(J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments))))
            C.JSArray_methods.add$1(pathSegments, "");
          P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
          return P._Uri__Uri(_null, _null, pathSegments, _s4_);
        }
      else {
        pathSegments = H.setRuntimeTypeInfo(path.split(_s1_), [P.String]);
        P._Uri__checkWindowsPathReservedCharacters(pathSegments, true, 0);
        if (H.boolConversionCheck(slashTerminated) && H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(pathSegments)) && H.boolConversionCheck(J.get$isNotEmpty$asx(C.JSArray_methods.get$last(pathSegments))))
          C.JSArray_methods.add$1(pathSegments, "");
        return P._Uri__Uri(_null, _null, pathSegments, _null);
      }
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return;
      if (start == end)
        return "";
      if (H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(host, start), 91))) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (!H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(host, t1), 93)))
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        if (typeof start !== "number")
          return start.$add();
        t2 = start + 1;
        index = P._Uri__checkZoneID(host, t2, t1);
        if (typeof index !== "number")
          return index.$lt();
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = P._Uri__normalizeZoneID(host, H.boolConversionCheck(C.JSString_methods.startsWith$2(host, "25", zoneIDstart)) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        P.Uri_parseIPv6Address(host, t2, index);
        return J.$add$ansx(J.$add$ansx(J.toLowerCase$0$s(C.JSString_methods.substring$2(host, start, index)), zoneID), "]");
      }
      if (!H.boolConversionCheck(strictIPv6)) {
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (typeof end !== "number")
            return H.iae(end);
          if (!(i < end))
            break;
          if (H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(host, i), 58))) {
            index = P._Uri__checkZoneID(host, start, end);
            if (typeof index !== "number")
              return index.$lt();
            if (index < end) {
              zoneIDstart = index + 1;
              zoneID = P._Uri__normalizeZoneID(host, H.boolConversionCheck(C.JSString_methods.startsWith$2(host, "25", zoneIDstart)) ? index + 3 : zoneIDstart, end, "%25");
            } else
              zoneID = "";
            P.Uri_parseIPv6Address(host, start, index);
            return J.$add$ansx(C.JSString_methods.$add("[" + H.S(C.JSString_methods.substring$2(host, start, index)), zoneID), "]");
          }
          ++i;
        }
      }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID: function(host, start, end) {
      var t1,
        index = J.indexOf$2$s(host, "%", start);
      if (typeof index !== "number")
        return index.$ge();
      if (typeof start !== "number")
        return H.iae(start);
      if (index >= start) {
        if (typeof end !== "number")
          return H.iae(end);
        t1 = index < end;
      } else
        t1 = false;
      if (!t1)
        index = end;
      return index;
    },
    _Uri__isZoneIDChar: function(char) {
      var t1;
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = C.List_nxB[t1];
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeZoneID: function(host, start, end, prefix) {
      var char, replacement, t2, tail, sourceLength,
        buffer = prefix !== "" ? P.StringBuffer$(prefix) : null,
        t1 = J.getInterceptor$s(host),
        index = start,
        sectionStart = index,
        isNormalized = true;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t2 = replacement == null;
            if (t2 && isNormalized) {
              index += 3;
              break c$0;
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            buffer.write$1(0, C.JSString_methods.substring$2(host, sectionStart, index));
            if (t2)
              replacement = C.JSString_methods.substring$2(host, index, index + 3);
            else if (replacement === "%")
              P._Uri__fail(host, index, "ZoneID should not contain % anymore");
            buffer.write$1(0, replacement);
            index += 3;
            sectionStart = index;
            isNormalized = true;
          } else if (H.boolConversionCheck(P._Uri__isZoneIDChar(char))) {
            if (isNormalized) {
              if (typeof char !== "number")
                return H.iae(char);
              t2 = 65 <= char && 90 >= char;
            } else
              t2 = false;
            if (t2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              if (typeof sectionStart !== "number")
                return sectionStart.$lt();
              if (sectionStart < index) {
                buffer.write$1(0, C.JSString_methods.substring$2(host, sectionStart, index));
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (typeof char !== "number")
              return char.$and();
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if (typeof tail !== "number")
                return tail.$and();
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = P.StringBuffer$("");
            buffer.write$1(0, C.JSString_methods.substring$2(host, sectionStart, index));
            buffer.write$1(0, P._Uri__escapeChar(char));
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return t1.substring$2(host, start, end);
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer.write$1(0, t1.substring$2(host, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isRegNameChar: function(char) {
      var t1;
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = C.List_qNA[t1];
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var char, replacement, t2, slice, sourceLength, tail,
        t1 = J.getInterceptor$s(host),
        index = start,
        sectionStart = index,
        buffer = null,
        isNormalized = true;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(host, index);
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(host, index, true);
            t2 = replacement == null;
            if (t2 && isNormalized) {
              index += 3;
              break c$0;
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(0, !isNormalized ? J.toLowerCase$0$s(slice) : slice);
            if (t2) {
              replacement = C.JSString_methods.substring$2(host, index, index + 3);
              sourceLength = 3;
            } else if (replacement === "%") {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
            buffer.write$1(0, replacement);
            index += sourceLength;
            sectionStart = index;
            isNormalized = true;
          } else if (H.boolConversionCheck(P._Uri__isRegNameChar(char))) {
            if (isNormalized) {
              if (typeof char !== "number")
                return H.iae(char);
              t2 = 65 <= char && 90 >= char;
            } else
              t2 = false;
            if (t2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              if (typeof sectionStart !== "number")
                return sectionStart.$lt();
              if (sectionStart < index) {
                buffer.write$1(0, C.JSString_methods.substring$2(host, sectionStart, index));
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else if (H.boolConversionCheck(P._Uri__isGeneralDelimiter(char)))
            P._Uri__fail(host, index, "Invalid character");
          else {
            if (typeof char !== "number")
              return char.$and();
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if (typeof tail !== "number")
                return tail.$and();
              if ((tail & 64512) === 56320) {
                char = 65536 | (char & 1023) << 10 | tail & 1023;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            if (buffer == null)
              buffer = P.StringBuffer$("");
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            buffer.write$1(0, !isNormalized ? J.toLowerCase$0$s(slice) : slice);
            buffer.write$1(0, P._Uri__escapeChar(char));
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return t1.substring$2(host, start, end);
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end) {
        slice = t1.substring$2(host, sectionStart, end);
        buffer.write$1(0, !isNormalized ? J.toLowerCase$0$s(slice) : slice);
      }
      return buffer.toString$0(0);
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit;
      if (start == end)
        return "";
      if (!H.boolConversionCheck(P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme).codeUnitAt$1(scheme, start))))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      i = start;
      containsUpperCase = false;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        codeUnit = C.JSString_methods.codeUnitAt$1(scheme, i);
        if (!H.boolConversionCheck(P._Uri__isSchemeCharacter(codeUnit)))
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (typeof codeUnit !== "number")
          return H.iae(codeUnit);
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
        ++i;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? J.toLowerCase$0$s(scheme) : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || H.boolConversionCheck(hasAuthority),
        t1 = path == null;
      if (t1 && pathSegments == null)
        return isFile ? "/" : "";
      t1 = !t1;
      if (t1 && pathSegments != null)
        throw H.wrapException(P.ArgumentError$("Both path and pathSegments specified"));
      result = t1 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : J.join$1$ax(J.map$1$1$ax(pathSegments, new P._Uri__makePath_closure(), P.String), "/");
      if (H.boolConversionCheck(J.getInterceptor$asx(result).get$isEmpty(result))) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !H.boolConversionCheck(C.JSString_methods.startsWith$1(result, "/")))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      if (H.boolConversionCheck(J.getInterceptor$asx(scheme).get$isEmpty(scheme)) && !H.boolConversionCheck(hasAuthority) && !H.boolConversionCheck(J.startsWith$1$s(path, "/")))
        return P._Uri__normalizeRelativePath(path, H.boolConversionCheck(C.JSString_methods.get$isNotEmpty(scheme)) || H.boolConversionCheck(hasAuthority));
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      var result, t1 = {};
      if (query != null) {
        if (queryParameters != null)
          throw H.wrapException(P.ArgumentError$("Both query and queryParameters specified"));
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      }
      if (queryParameters == null)
        return;
      result = P.StringBuffer$("");
      t1.separator = "";
      J.forEach$1$ax(queryParameters, new P._Uri__makeQuery_closure(new P._Uri__makeQuery_writeParameter(t1, result)));
      return result.toString$0(0);
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var t1, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value;
      if (typeof index !== "number")
        return index.$add();
      t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = J.getInterceptor$s(source).codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (typeof firstDigitValue !== "number")
        return firstDigitValue.$lt();
      if (firstDigitValue >= 0) {
        if (typeof secondDigitValue !== "number")
          return secondDigitValue.$lt();
        t1 = secondDigitValue < 0;
      } else
        t1 = true;
      if (t1)
        return "%";
      if (typeof secondDigitValue !== "number")
        return H.iae(secondDigitValue);
      value = firstDigitValue * 16 + secondDigitValue;
      if (H.boolConversionCheck(P._Uri__isUnreservedChar(value)))
        return P.String_String$fromCharCode(H.boolConversionCheck(lowerCase) && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (typeof firstDigit !== "number")
        return firstDigit.$ge();
      if (firstDigit < 97) {
        if (typeof secondDigit !== "number")
          return secondDigit.$ge();
        t1 = secondDigit >= 97;
      } else
        t1 = true;
      if (t1)
        return J.toUpperCase$0$s(C.JSString_methods.substring$2(source, index, index + 3));
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (typeof char !== "number")
        return char.$lt();
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, C.JSInt_methods._shrOtherPositive$1(char, 4)));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods.$shr(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? J.substring$2$s(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var char, t3, replacement, sourceLength, tail,
        t1 = J.getInterceptor$s(component),
        t2 = J.getInterceptor$asx(charTable),
        index = start,
        sectionStart = index,
        buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = t1.codeUnitAt$1(component, index);
          if (typeof char !== "number")
            return char.$lt();
          if (char < 127) {
            t3 = t2.$index(charTable, C.JSInt_methods._shrOtherPositive$1(char, 4));
            if (typeof t3 !== "number")
              return t3.$and();
            t3 = (t3 & 1 << (char & 15)) >>> 0 !== 0;
          } else
            t3 = false;
          if (t3)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else if (!H.boolConversionCheck(escapeDelimiters) && H.boolConversionCheck(P._Uri__isGeneralDelimiter(char))) {
              P._Uri__fail(component, index, "Invalid character");
              replacement = null;
              sourceLength = null;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t3);
                  if (typeof tail !== "number")
                    return tail.$and();
                  if ((tail & 64512) === 56320) {
                    char = 65536 | (char & 1023) << 10 | tail & 1023;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
            if (buffer == null)
              buffer = P.StringBuffer$("");
            buffer.write$1(0, C.JSString_methods.substring$2(component, sectionStart, index));
            buffer.write$1(0, replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer.write$1(0, t1.substring$2(component, sectionStart, end));
      return buffer.toString$0(0);
    },
    _Uri__isSchemeCharacter: function(ch) {
      var t1;
      if (typeof ch !== "number")
        return ch.$lt();
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_JYB, t1);
        t1 = C.List_JYB[t1];
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 1 << (ch & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__isGeneralDelimiter: function(ch) {
      var t1;
      if (typeof ch !== "number")
        return ch.$le();
      if (ch <= 93) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_2Vk, t1);
        t1 = C.List_2Vk[t1];
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 1 << (ch & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (H.boolConversionCheck(J.getInterceptor$s(path).startsWith$1(path, ".")))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var t1, output, appendSlash, t2;
      if (!H.boolConversionCheck(P._Uri__mayContainDotSegments(path)))
        return path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; H.boolConversionCheck(t1.moveNext$0());) {
        t2 = J.get$current$z(t1);
        if (t2 === "..") {
          if (H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(output))) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            if (H.boolConversionCheck(C.JSArray_methods.get$isEmpty(output)))
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var t1, output, appendSlash, t2;
      if (!H.boolConversionCheck(P._Uri__mayContainDotSegments(path)))
        return !H.boolConversionCheck(allowScheme) ? P._Uri__escapeScheme(path) : path;
      t1 = P.String;
      output = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(path.split("/"), [t1])), appendSlash = false; H.boolConversionCheck(t1.moveNext$0());) {
        t2 = J.get$current$z(t1);
        if (".." === t2)
          if (!H.boolConversionCheck(C.JSArray_methods.get$isEmpty(output)) && !H.boolConversionCheck(J.$eq$(C.JSArray_methods.get$last(output), ".."))) {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === t2)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, t2);
          appendSlash = false;
        }
      }
      if (!H.boolConversionCheck(C.JSArray_methods.get$isEmpty(output))) {
        t1 = output.length;
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = H.boolConversionCheck(J.get$isEmpty$asx(output[0]));
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || H.boolConversionCheck(J.$eq$(C.JSArray_methods.get$last(output), "..")))
        C.JSArray_methods.add$1(output, "");
      if (!H.boolConversionCheck(allowScheme)) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && H.boolConversionCheck(P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0))))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return H.S(C.JSString_methods.substring$2(path, 0, i)) + "%3A" + H.S(C.JSString_methods.substring$1(path, i + 1));
          if (typeof char !== "number")
            return char.$gt();
          if (char <= 127) {
            t2 = C.JSInt_methods._shrOtherPositive$1(char, 4);
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = C.List_JYB[t2];
            if (typeof t2 !== "number")
              return t2.$and();
            t2 = (t2 & 1 << (char & 15)) >>> 0 === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__toWindowsFilePath: function(uri) {
      var hasDriveLetter, result, host,
        segments = uri.get$pathSegments(),
        t1 = J.getInterceptor$asx(segments),
        t2 = t1.get$length(segments);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0 && H.boolConversionCheck(J.$eq$(J.get$length$asx(t1.$index(segments, 0)), 2)) && H.boolConversionCheck(J.$eq$(J.codeUnitAt$1$s(t1.$index(segments, 0), 1), 58))) {
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(t1.$index(segments, 0), 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      result = P.StringBuffer$("");
      if (H.boolConversionCheck(uri.get$hasAbsolutePath()) && !hasDriveLetter)
        result.write$1(0, "\\");
      if (H.boolConversionCheck(uri.get$hasAuthority())) {
        host = uri.get$host(uri);
        if (H.boolConversionCheck(J.get$isNotEmpty$asx(host))) {
          result.write$1(0, "\\");
          result.write$1(0, host);
          result.write$1(0, "\\");
        }
      }
      result.writeAll$2(segments, "\\");
      if (hasDriveLetter && H.boolConversionCheck(J.$eq$(t1.get$length(segments), 1)))
        result.write$1(0, "\\");
      return result.toString$0(0);
    },
    _Uri__hexCharPairToByte: function(s, pos) {
      var t1, byte, i, charCode;
      for (t1 = J.getInterceptor$s(s), byte = 0, i = 0; i < 2; ++i) {
        if (typeof pos !== "number")
          return pos.$add();
        charCode = t1.codeUnitAt$1(s, pos + i);
        if (typeof charCode !== "number")
          return H.iae(charCode);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode = (charCode | 32) >>> 0;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
        }
      }
      return byte;
    },
    _Uri__uriDecode: function(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = J.getInterceptor$s(text),
        i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1.codeUnitAt$1(text, i);
        if (typeof codeUnit !== "number")
          return codeUnit.$gt();
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = H.boolConversionCheck(plusToSpace) && codeUnit === 43;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (C.C_Utf8Codec === encoding || C.C_Latin1Codec === encoding || C.C_AsciiCodec === encoding)
          return t1.substring$2(text, start, end);
        else
          bytes = J.get$codeUnits$s(t1.substring$2(text, start, end));
      else {
        bytes = H.setRuntimeTypeInfo([], [P.int]);
        i = start;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (!(i < end))
            break;
          codeUnit = t1.codeUnitAt$1(text, i);
          if (typeof codeUnit !== "number")
            return codeUnit.$gt();
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI"));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else if (H.boolConversionCheck(plusToSpace) && codeUnit === 43)
            C.JSArray_methods.add$1(bytes, 32);
          else
            C.JSArray_methods.add$1(bytes, codeUnit);
          ++i;
        }
      }
      return encoding.decode$1(0, bytes);
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase;
      if (typeof codeUnit !== "number")
        return codeUnit.$or();
      lowerCase = (codeUnit | 32) >>> 0;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    _Uri__isUnreservedChar: function(char) {
      var t1;
      if (typeof char !== "number")
        return char.$lt();
      if (char < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(char, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = C.List_nxB[t1];
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 1 << (char & 15)) >>> 0 !== 0;
      } else
        t1 = false;
      return t1;
    },
    UriData$_: function(_text, _separatorIndices, _uriCache) {
      return new P.UriData(_text, _separatorIndices, _uriCache);
    },
    UriData_UriData$fromString: function($content, base64, encoding, mimeType, parameters) {
      var encodingName, t1, _null = null,
        buffer = P.StringBuffer$(""),
        indices = H.setRuntimeTypeInfo([-1], [P.int]),
        charsetName = parameters != null ? J.$index$asx(parameters, "charset") : _null;
      if (encoding == null) {
        if (charsetName != null)
          encoding = P.Encoding_getByName(charsetName);
        encodingName = _null;
      } else
        encodingName = charsetName == null ? encoding.get$name(encoding) : _null;
      if (encoding == null)
        encoding = C.C_AsciiCodec;
      P.UriData__writeUri(mimeType, encodingName, parameters, buffer, indices);
      C.JSArray_methods.add$1(indices, buffer.get$length(buffer));
      if (H.boolConversionCheck(base64)) {
        buffer.write$1(0, ";base64,");
        t1 = buffer.get$length(buffer);
        if (typeof t1 !== "number")
          return t1.$sub();
        C.JSArray_methods.add$1(indices, t1 - 1);
        buffer.write$1(0, encoding.fuse$1$1(C.C_Base64Codec, P.String).encode$1($content));
      } else {
        buffer.write$1(0, ",");
        P.UriData__uriEncodeBytes(C.List_CVk, encoding.encode$1($content), buffer);
      }
      return P.UriData$_(buffer.toString$0(0), indices, _null);
    },
    UriData__writeUri: function(mimeType, charsetName, parameters, buffer, indices) {
      var slashIndex, t1, t2;
      if (mimeType == null || mimeType === "text/plain")
        mimeType = "";
      if (H.boolConversionCheck(J.getInterceptor$asx(mimeType).get$isEmpty(mimeType)) || mimeType === "application/octet-stream")
        buffer.write$1(0, mimeType);
      else {
        slashIndex = P.UriData__validateMimeType(mimeType);
        if (typeof slashIndex !== "number")
          return slashIndex.$lt();
        if (slashIndex < 0)
          throw H.wrapException(P.ArgumentError$value(mimeType, "mimeType", "Invalid MIME type"));
        buffer.write$1(0, P._Uri__uriEncode(C.List_qFt, C.JSString_methods.substring$2(mimeType, 0, slashIndex), C.C_Utf8Codec, false));
        buffer.write$1(0, "/");
        buffer.write$1(0, P._Uri__uriEncode(C.List_qFt, C.JSString_methods.substring$1(mimeType, slashIndex + 1), C.C_Utf8Codec, false));
      }
      if (charsetName != null) {
        if (indices != null) {
          t1 = J.getInterceptor$ax(indices);
          t1.add$1(indices, buffer.get$length(buffer));
          t2 = buffer.get$length(buffer);
          if (typeof t2 !== "number")
            return t2.$add();
          t1.add$1(indices, t2 + 8);
        }
        buffer.write$1(0, ";charset=");
        buffer.write$1(0, P._Uri__uriEncode(C.List_qFt, charsetName, C.C_Utf8Codec, false));
      }
      if (parameters != null)
        J.forEach$1$ax(parameters, new P.UriData__writeUri_closure(indices, buffer));
    },
    UriData__validateMimeType: function(mimeType) {
      var t1, slashIndex, i;
      for (t1 = mimeType.length, slashIndex = -1, i = 0; i < t1; ++i) {
        if (C.JSString_methods._codeUnitAt$1(mimeType, i) !== 47)
          continue;
        if (slashIndex < 0) {
          slashIndex = i;
          continue;
        }
        return -1;
      }
      return slashIndex;
    },
    UriData__parse: function(text, start, sourceUri) {
      var indices, t1, i, slashIndex, char, t2, equalsIndex, lastSeparator, data,
        _s17_ = "Invalid MIME type";
      if (typeof start !== "number")
        return start.$sub();
      indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods.codeUnitAt$1(text, i);
        t2 = J.getInterceptor$(char);
        if (H.boolConversionCheck(t2.$eq(char, 44)) || H.boolConversionCheck(t2.$eq(char, 59)))
          break;
        if (H.boolConversionCheck(t2.$eq(char, 47))) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; !H.boolConversionCheck(J.$eq$(char, 44));) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods.codeUnitAt$1(text, i);
          t2 = J.getInterceptor$(char);
          if (H.boolConversionCheck(t2.$eq(char, 61))) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (H.boolConversionCheck(t2.$eq(char, 59)) || H.boolConversionCheck(t2.$eq(char, 44)))
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (H.boolConversionCheck(J.$eq$(char, 44))) {
            if (typeof lastSeparator !== "number")
              return lastSeparator.$add();
            t2 = i !== lastSeparator + 7 || !H.boolConversionCheck(C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1));
          } else
            t2 = true;
          if (t2)
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if (H.boolConversionCheck(C.JSInt_methods.get$isOdd(indices.length)))
        text = C.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return P.UriData$_(text, indices, sourceUri);
    },
    UriData__uriEncodeBytes: function(canonicalTable, bytes, buffer) {
      var t3, byte,
        _s16_ = "0123456789ABCDEF",
        t1 = J.getInterceptor$asx(bytes),
        t2 = J.getInterceptor$asx(canonicalTable),
        byteOr = 0, i = 0;
      while (true) {
        t3 = t1.get$length(bytes);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        byte = t1.$index(bytes, i);
        if (typeof byte !== "number")
          return H.iae(byte);
        byteOr |= byte;
        if (byte < 128) {
          t3 = t2.$index(canonicalTable, C.JSInt_methods._shrOtherPositive$1(byte, 4));
          if (typeof t3 !== "number")
            return t3.$and();
          t3 = (t3 & 1 << (byte & 15)) >>> 0 !== 0;
        } else
          t3 = false;
        if (t3)
          buffer.writeCharCode$1(byte);
        else {
          buffer.writeCharCode$1(37);
          buffer.writeCharCode$1(C.JSString_methods._codeUnitAt$1(_s16_, C.JSInt_methods._shrOtherPositive$1(byte, 4)));
          buffer.writeCharCode$1(C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
        }
        ++i;
      }
      if ((byteOr & 4294967040) >>> 0 !== 0) {
        i = 0;
        while (true) {
          t2 = t1.get$length(bytes);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          byte = t1.$index(bytes, i);
          if (typeof byte !== "number")
            return byte.$lt();
          if (byte < 0 || byte > 255)
            throw H.wrapException(P.ArgumentError$value(byte, "non-byte value", null));
          ++i;
        }
      }
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var table, t4, char, transition,
        tables = $.$get$_scannerTables(),
        t1 = J.getInterceptor$ax(indices),
        t2 = J.getInterceptor$asx(tables),
        t3 = J.getInterceptor$s(uri),
        i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        table = t2.$index(tables, state);
        t4 = t3.codeUnitAt$1(uri, i);
        if (typeof t4 !== "number")
          return t4.$xor();
        char = (t4 ^ 96) >>> 0;
        if (char > 95)
          char = 31;
        if (char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        t1.$indexSet(indices, C.JSInt_methods._shrOtherPositive$1(transition, 5), i);
        ++i;
      }
      return state;
    },
    _SimpleUri$: function(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache) {
      return new P._SimpleUri(_uri, _schemeEnd, _hostStart, _portStart, _pathStart, _queryStart, _fragmentStart, _schemeCache);
    },
    _DataUri$: function(_data, path, query) {
      var _null = null;
      return new P._DataUri("data", _null, _null, _null, path, query, _null);
    },
    _startsWithData: function(text, start) {
      var t1, t2, t3, t4, t5;
      if (typeof start !== "number")
        return start.$add();
      t1 = J.getInterceptor$s(text).codeUnitAt$1(text, start + 4);
      if (typeof t1 !== "number")
        return t1.$xor();
      t2 = C.JSString_methods.codeUnitAt$1(text, start);
      if (typeof t2 !== "number")
        return t2.$xor();
      t3 = C.JSString_methods.codeUnitAt$1(text, start + 1);
      if (typeof t3 !== "number")
        return t3.$xor();
      t4 = C.JSString_methods.codeUnitAt$1(text, start + 2);
      if (typeof t4 !== "number")
        return t4.$xor();
      t5 = C.JSString_methods.codeUnitAt$1(text, start + 3);
      if (typeof t5 !== "number")
        return t5.$xor();
      return (((t1 ^ 58) >>> 0) * 3 | t2 ^ 100 | t3 ^ 97 | t4 ^ 116 | t5 ^ 97) >>> 0;
    },
    _stringOrNullLength: function(s) {
      return s == null ? 0 : s.length;
    },
    _symbolMapToStringMap_closure: function _symbolMapToStringMap_closure() {
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    _CompileTimeError: function _CompileTimeError() {
    },
    _DuplicatedFieldInitializerError: function _DuplicatedFieldInitializerError() {
    },
    _BigIntImpl: function _BigIntImpl() {
    },
    _BigIntReduction: function _BigIntReduction() {
    },
    _BigIntClassic: function _BigIntClassic() {
    },
    Deprecated: function Deprecated() {
    },
    _Override: function _Override() {
    },
    Provisional: function Provisional() {
    },
    _Proxy0: function _Proxy0() {
    },
    pragma: function pragma() {
    },
    BigInt: function BigInt() {
    },
    bool: function bool() {
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    TypeError: function TypeError() {
    },
    CastError: function CastError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    FallThroughError: function FallThroughError() {
    },
    AbstractClassInstantiationError: function AbstractClassInstantiationError() {
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    LateInitializationError: function LateInitializationError() {
    },
    Exception: function Exception() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Expando: function Expando(t0, t1, t2) {
      this._jsWeakMapOrKey = t0;
      this.name = t1;
      this.$ti = t2;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Invocation: function Invocation() {
    },
    _Invocation: function _Invocation() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable() {
    },
    BidirectionalIterator: function BidirectionalIterator() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    MapEntry: function MapEntry() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Pattern: function Pattern() {
    },
    Match: function Match() {
    },
    RegExp: function RegExp() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    Set: function Set() {
    },
    Sink: function Sink() {
    },
    StackTrace: function StackTrace() {
    },
    _StringStackTrace: function _StringStackTrace(t0) {
      this._stackTrace = t0;
    },
    Stopwatch: function Stopwatch() {
    },
    String: function String() {
    },
    Runes: function Runes() {
    },
    RuneIterator: function RuneIterator() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    StringSink: function StringSink() {
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri: function Uri() {
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1) {
      this.uri = t0;
      this.portStart = t1;
    },
    _Uri__checkNonWindowsPathReservedCharacters_closure: function _Uri__checkNonWindowsPathReservedCharacters_closure(t0) {
      this.argumentError = t0;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQuery_writeParameter: function _Uri__makeQuery_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQuery_closure: function _Uri__makeQuery_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    UriData__writeUri_closure: function UriData__writeUri_closure(t0, t1) {
      this.indices = t0;
      this.buffer = t1;
    },
    _createTables_closure: function _createTables_closure() {
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = _._pathSegments = null;
    },
    _FakeUserTag: function _FakeUserTag() {
    },
    ServiceExtensionResponse: function ServiceExtensionResponse() {
    },
    UserTag: function UserTag() {
    },
    Metric: function Metric() {
    },
    Gauge: function Gauge() {
    },
    Counter: function Counter() {
    },
    Metrics: function Metrics() {
    },
    ServiceProtocolInfo: function ServiceProtocolInfo() {
    },
    Service: function Service() {
    },
    Flow: function Flow() {
    },
    Timeline: function Timeline() {
    },
    TimelineTask: function TimelineTask() {
    },
    _AsyncBlock: function _AsyncBlock() {
    },
    _SyncBlock: function _SyncBlock() {
    },
    convertDartToNative_SerializedScriptValue: function(value) {
      return P.convertDartToNative_PrepareForStructuredClone(value);
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, t1, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      for (t1 = C.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); H.boolConversionCheck(t1.moveNext$0());) {
        key = H.stringTypeCheck(J.get$current$z(t1));
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertNativeToDart_DateTime: function(date) {
      return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
    },
    convertDartToNative_DateTime: function(date) {
      return new Date(date.get$millisecondsSinceEpoch());
    },
    convertDartToNative_PrepareForStructuredClone: function(value) {
      return P._StructuredCloneDart2Js$().convertDartToNative_PrepareForStructuredClone$1(value);
    },
    convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
      return P._AcceptStructuredCloneDart2Js$().convertNativeToDart_AcceptStructuredClone$2$mustCopy(object, mustCopy);
    },
    _StructuredCloneDart2Js$: function() {
      return new P._StructuredCloneDart2Js([], []);
    },
    _AcceptStructuredCloneDart2Js$: function() {
      return new P._AcceptStructuredCloneDart2Js([], []);
    },
    isJavaScriptDate: function(value) {
      return value instanceof Date;
    },
    isJavaScriptRegExp: function(value) {
      return value instanceof RegExp;
    },
    isJavaScriptArray: function(value) {
      return value instanceof Array;
    },
    isJavaScriptSimpleObject: function(value) {
      var proto = Object.getPrototypeOf(value);
      return proto === Object.prototype || proto === null;
    },
    isJavaScriptPromise: function(value) {
      return typeof Promise != "undefined" && value instanceof Promise;
    },
    Device_userAgent: function() {
      return W.window().navigator.userAgent;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      return t1 == null ? $.Device__isOpera = J.contains$2$asx(P.Device_userAgent(), "Opera", 0) : t1;
    },
    Device_isIE: function() {
      var t1 = $.Device__isIE;
      if (t1 == null)
        t1 = $.Device__isIE = !H.boolConversionCheck(P.Device_isOpera()) && H.boolConversionCheck(J.contains$2$asx(P.Device_userAgent(), "Trident/", 0));
      return t1;
    },
    Device_isFirefox: function() {
      var t1 = $.Device__isFirefox;
      return t1 == null ? $.Device__isFirefox = J.contains$2$asx(P.Device_userAgent(), "Firefox", 0) : t1;
    },
    Device_cssPrefix: function() {
      var prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      if (H.boolConversionCheck(P.Device_isFirefox()))
        prefix = "-moz-";
      else if (H.boolConversionCheck(P.Device_isIE()))
        prefix = "-ms-";
      else
        prefix = H.boolConversionCheck(P.Device_isOpera()) ? "-o-" : "-webkit-";
      return $.Device__cachedCssPrefix = prefix;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    ContextAttributes: function ContextAttributes() {
    },
    _TypedImageData: function _TypedImageData() {
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure() {
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    CssClassSetImpl: function CssClassSetImpl() {
    },
    CssClassSetImpl_add_closure: function CssClassSetImpl_add_closure(t0) {
      this.value = t0;
    },
    Device: function Device() {
    },
    FilteredElementList: function FilteredElementList() {
    },
    Lists: function Lists() {
    },
    NodeListWrapper: function NodeListWrapper() {
    },
    _convertNativeToDart_IDBAny: function(object) {
      return P.convertNativeToDart_AcceptStructuredClone(object, false);
    },
    _completeRequest: function(request, $T) {
      var completer = P.Completer_Completer$sync($T),
        t1 = J.getInterceptor$x(request);
      t1.get$onSuccess(request).listen$1(new P._completeRequest_closure(request, completer, $T));
      t1.get$onError(request).listen$1(completer.get$completeError());
      return completer.future;
    },
    _KeyRangeFactoryProvider: function _KeyRangeFactoryProvider() {
    },
    Cursor: function Cursor() {
    },
    CursorWithValue: function CursorWithValue() {
    },
    Database: function Database() {
    },
    IdbFactory: function IdbFactory() {
    },
    _completeRequest_closure: function _completeRequest_closure(t0, t1, t2) {
      this.request = t0;
      this.completer = t1;
      this.T = t2;
    },
    Index: function Index() {
    },
    KeyRange: function KeyRange() {
    },
    ObjectStore: function ObjectStore() {
    },
    Observation: function Observation() {
    },
    Observer: function Observer() {
    },
    ObserverChanges: function ObserverChanges() {
    },
    OpenDBRequest: function OpenDBRequest() {
    },
    Request: function Request() {
    },
    Transaction: function Transaction() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    BytesBuilder: function BytesBuilder() {
    },
    _CopyingBytesBuilder0: function _CopyingBytesBuilder0() {
    },
    _BytesBuilder: function _BytesBuilder() {
    },
    IOException: function IOException() {
    },
    OSError: function OSError() {
    },
    _BufferAndStart: function _BufferAndStart() {
    },
    _IOCrypto: function _IOCrypto() {
    },
    ZLibOption: function ZLibOption() {
    },
    ZLibCodec: function ZLibCodec() {
    },
    GZipCodec: function GZipCodec() {
    },
    ZLibEncoder: function ZLibEncoder() {
    },
    ZLibDecoder: function ZLibDecoder() {
    },
    RawZLibFilter: function RawZLibFilter() {
    },
    _BufferSink: function _BufferSink() {
    },
    _ZLibEncoderSink: function _ZLibEncoderSink() {
    },
    _ZLibDecoderSink: function _ZLibDecoderSink() {
    },
    _FilterSink: function _FilterSink() {
    },
    Directory: function Directory() {
    },
    _Directory: function _Directory() {
    },
    _AsyncDirectoryListerOps: function _AsyncDirectoryListerOps() {
    },
    _AsyncDirectoryLister: function _AsyncDirectoryLister() {
    },
    _EmbedderConfig: function _EmbedderConfig() {
    },
    _EventHandler: function _EventHandler() {
    },
    FileMode: function FileMode() {
    },
    FileLock: function FileLock() {
    },
    File0: function File0() {
    },
    RandomAccessFile: function RandomAccessFile() {
    },
    FileSystemException: function FileSystemException() {
    },
    _FileStream: function _FileStream() {
    },
    _FileStreamConsumer: function _FileStreamConsumer() {
    },
    _File: function _File() {
    },
    _RandomAccessFileOps: function _RandomAccessFileOps() {
    },
    _RandomAccessFile: function _RandomAccessFile() {
    },
    FileSystemEntityType: function FileSystemEntityType() {
    },
    FileStat: function FileStat() {
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    FileSystemEvent: function FileSystemEvent() {
    },
    FileSystemCreateEvent: function FileSystemCreateEvent() {
    },
    FileSystemModifyEvent: function FileSystemModifyEvent() {
    },
    FileSystemDeleteEvent: function FileSystemDeleteEvent() {
    },
    FileSystemMoveEvent: function FileSystemMoveEvent() {
    },
    _FileSystemWatcher: function _FileSystemWatcher() {
    },
    _IOResourceInfo: function _IOResourceInfo() {
    },
    _ReadWriteResourceInfo: function _ReadWriteResourceInfo() {
    },
    _FileResourceInfo: function _FileResourceInfo() {
    },
    _ProcessResourceInfo: function _ProcessResourceInfo() {
    },
    _SocketResourceInfo: function _SocketResourceInfo() {
    },
    _IOService: function _IOService() {
    },
    IOSink: function IOSink() {
    },
    _StreamSinkImpl0: function _StreamSinkImpl0() {
    },
    _IOSinkImpl0: function _IOSinkImpl0() {
    },
    Link: function Link() {
    },
    _Link: function _Link() {
    },
    _Namespace: function _Namespace() {
    },
    _NetworkProfiling: function _NetworkProfiling() {
    },
    _HttpProfile: function _HttpProfile() {
    },
    _SocketProfile: function _SocketProfile() {
    },
    IOOverrides: function IOOverrides() {
    },
    _IOOverridesScope: function _IOOverridesScope() {
    },
    Platform0: function Platform0() {
    },
    _Platform: function _Platform() {
    },
    _CaseInsensitiveStringMap: function _CaseInsensitiveStringMap() {
    },
    _ProcessUtils: function _ProcessUtils() {
    },
    ProcessInfo: function ProcessInfo() {
    },
    ProcessStartMode: function ProcessStartMode() {
    },
    Process: function Process() {
    },
    ProcessResult: function ProcessResult() {
    },
    ProcessSignal: function ProcessSignal() {
    },
    SignalException: function SignalException() {
    },
    ProcessException: function ProcessException() {
    },
    SecureServerSocket: function SecureServerSocket() {
    },
    RawSecureServerSocket: function RawSecureServerSocket() {
    },
    SecureSocket: function SecureSocket() {
    },
    RawSecureSocket: function RawSecureSocket() {
    },
    X509Certificate: function X509Certificate() {
    },
    _FilterStatus: function _FilterStatus() {
    },
    _RawSecureSocket: function _RawSecureSocket() {
    },
    _ExternalBuffer: function _ExternalBuffer() {
    },
    _SecureFilter: function _SecureFilter() {
    },
    TlsException: function TlsException() {
    },
    HandshakeException: function HandshakeException() {
    },
    CertificateException: function CertificateException() {
    },
    SecurityContext: function SecurityContext() {
    },
    _ServiceObject0: function _ServiceObject0() {
    },
    InternetAddressType: function InternetAddressType() {
    },
    InternetAddress: function InternetAddress() {
    },
    NetworkInterface: function NetworkInterface() {
    },
    RawServerSocket: function RawServerSocket() {
    },
    ServerSocket: function ServerSocket() {
    },
    SocketDirection: function SocketDirection() {
    },
    SocketOption: function SocketOption() {
    },
    _RawSocketOptions: function _RawSocketOptions() {
    },
    RawSocketOption: function RawSocketOption() {
    },
    RawSocketEvent: function RawSocketEvent() {
    },
    ConnectionTask: function ConnectionTask() {
    },
    RawSocket: function RawSocket() {
    },
    Socket: function Socket() {
    },
    Datagram: function Datagram() {
    },
    RawDatagramSocket: function RawDatagramSocket() {
    },
    SocketException: function SocketException() {
    },
    _StdStream: function _StdStream() {
    },
    Stdin: function Stdin() {
    },
    Stdout: function Stdout() {
    },
    StdoutException: function StdoutException() {
    },
    StdinException: function StdinException() {
    },
    _StdConsumer: function _StdConsumer() {
    },
    _StdSink: function _StdSink() {
    },
    StdioType: function StdioType() {
    },
    _StdIOUtils: function _StdIOUtils() {
    },
    SystemEncoding: function SystemEncoding() {
    },
    _WindowsCodePageEncoder: function _WindowsCodePageEncoder() {
    },
    _WindowsCodePageEncoderSink: function _WindowsCodePageEncoderSink() {
    },
    _WindowsCodePageDecoder: function _WindowsCodePageDecoder() {
    },
    _WindowsCodePageDecoderSink: function _WindowsCodePageDecoderSink() {
    },
    RawSynchronousSocket: function RawSynchronousSocket() {
    },
    _ReceivePortImpl: function _ReceivePortImpl() {
    },
    Capability: function Capability() {
    },
    IsolateSpawnException: function IsolateSpawnException() {
    },
    Isolate: function Isolate() {
    },
    SendPort: function SendPort() {
    },
    ReceivePort: function ReceivePort() {
    },
    RawReceivePort: function RawReceivePort() {
    },
    RemoteError: function RemoteError() {
    },
    TransferableTypedData: function TransferableTypedData() {
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      return P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), $arguments);
    },
    allowInterop: function(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    },
    JsObject: function JsObject() {
    },
    JsFunction: function JsFunction() {
    },
    JsArray: function JsArray() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    newObject: function() {
      return {};
    },
    hasProperty: function(o, $name) {
      return $name in o;
    },
    getProperty: function(o, $name) {
      return o[$name];
    },
    setProperty: function(o, $name, value) {
      return o[$name] = value;
    },
    callMethod: function(o, method, args) {
      return o[method].apply(o, args);
    },
    promiseToFuture: function(jsPromise, $T) {
      var completer = P.Completer_Completer($T);
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return completer.future;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    min: function(a, b, $T) {
      return Math.min(H.checkNum(a), H.checkNum(b));
    },
    max: function(a, b, $T) {
      H.assertIsSubtype($T, P.num, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'max'.");
      H.assertSubtypeOfRuntimeType(a, $T);
      H.assertSubtypeOfRuntimeType(b, $T);
      return Math.max(H.checkNum(a), H.checkNum(b));
    },
    Random_Random: function() {
      return C.C__JSRandom;
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish0: function(hash) {
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _JenkinsSmiHash_hash2: function(a, b) {
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, H.intTypeCheck(a)), H.intTypeCheck(b)));
    },
    Point$: function(x, y, $T) {
      return new P.Point(x, y, [$T]);
    },
    _JSRandom: function _JSRandom() {
    },
    _Random: function _Random() {
    },
    _JSSecureRandom: function _JSSecureRandom() {
    },
    _JenkinsSmiHash0: function _JenkinsSmiHash0() {
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    Random: function Random() {
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    MutableRectangle: function MutableRectangle() {
    },
    MirrorSystem: function MirrorSystem() {
    },
    Mirror: function Mirror() {
    },
    IsolateMirror: function IsolateMirror() {
    },
    DeclarationMirror: function DeclarationMirror() {
    },
    ObjectMirror: function ObjectMirror() {
    },
    InstanceMirror: function InstanceMirror() {
    },
    ClosureMirror: function ClosureMirror() {
    },
    LibraryMirror: function LibraryMirror() {
    },
    LibraryDependencyMirror: function LibraryDependencyMirror() {
    },
    CombinatorMirror: function CombinatorMirror() {
    },
    TypeMirror: function TypeMirror() {
    },
    ClassMirror: function ClassMirror() {
    },
    FunctionTypeMirror: function FunctionTypeMirror() {
    },
    TypeVariableMirror: function TypeVariableMirror() {
    },
    TypedefMirror: function TypedefMirror() {
    },
    MethodMirror: function MethodMirror() {
    },
    VariableMirror: function VariableMirror() {
    },
    ParameterMirror: function ParameterMirror() {
    },
    SourceLocation: function SourceLocation() {
    },
    Comment0: function Comment0() {
    },
    MirrorsUsed: function MirrorsUsed() {
    },
    _SvgElementFactoryProvider: function _SvgElementFactoryProvider() {
    },
    AElement: function AElement() {
    },
    Angle: function Angle() {
    },
    AnimateElement: function AnimateElement() {
    },
    AnimateMotionElement: function AnimateMotionElement() {
    },
    AnimateTransformElement: function AnimateTransformElement() {
    },
    AnimatedAngle: function AnimatedAngle() {
    },
    AnimatedBoolean: function AnimatedBoolean() {
    },
    AnimatedEnumeration: function AnimatedEnumeration() {
    },
    AnimatedInteger: function AnimatedInteger() {
    },
    AnimatedLength: function AnimatedLength() {
    },
    AnimatedLengthList: function AnimatedLengthList() {
    },
    AnimatedNumber: function AnimatedNumber() {
    },
    AnimatedNumberList: function AnimatedNumberList() {
    },
    AnimatedPreserveAspectRatio: function AnimatedPreserveAspectRatio() {
    },
    AnimatedRect: function AnimatedRect() {
    },
    AnimatedString: function AnimatedString() {
    },
    AnimatedTransformList: function AnimatedTransformList() {
    },
    AnimationElement: function AnimationElement() {
    },
    CircleElement: function CircleElement() {
    },
    ClipPathElement: function ClipPathElement() {
    },
    DefsElement: function DefsElement() {
    },
    DescElement: function DescElement() {
    },
    DiscardElement: function DiscardElement() {
    },
    EllipseElement: function EllipseElement() {
    },
    FEBlendElement: function FEBlendElement() {
    },
    FEColorMatrixElement: function FEColorMatrixElement() {
    },
    FEComponentTransferElement: function FEComponentTransferElement() {
    },
    FECompositeElement: function FECompositeElement() {
    },
    FEConvolveMatrixElement: function FEConvolveMatrixElement() {
    },
    FEDiffuseLightingElement: function FEDiffuseLightingElement() {
    },
    FEDisplacementMapElement: function FEDisplacementMapElement() {
    },
    FEDistantLightElement: function FEDistantLightElement() {
    },
    FEFloodElement: function FEFloodElement() {
    },
    FEFuncAElement: function FEFuncAElement() {
    },
    FEFuncBElement: function FEFuncBElement() {
    },
    FEFuncGElement: function FEFuncGElement() {
    },
    FEFuncRElement: function FEFuncRElement() {
    },
    FEGaussianBlurElement: function FEGaussianBlurElement() {
    },
    FEImageElement: function FEImageElement() {
    },
    FEMergeElement: function FEMergeElement() {
    },
    FEMergeNodeElement: function FEMergeNodeElement() {
    },
    FEMorphologyElement: function FEMorphologyElement() {
    },
    FEOffsetElement: function FEOffsetElement() {
    },
    FEPointLightElement: function FEPointLightElement() {
    },
    FESpecularLightingElement: function FESpecularLightingElement() {
    },
    FESpotLightElement: function FESpotLightElement() {
    },
    FETileElement: function FETileElement() {
    },
    FETurbulenceElement: function FETurbulenceElement() {
    },
    FilterElement: function FilterElement() {
    },
    FilterPrimitiveStandardAttributes: function FilterPrimitiveStandardAttributes() {
    },
    FitToViewBox: function FitToViewBox() {
    },
    ForeignObjectElement: function ForeignObjectElement() {
    },
    GElement: function GElement() {
    },
    GeometryElement: function GeometryElement() {
    },
    GraphicsElement: function GraphicsElement() {
    },
    ImageElement0: function ImageElement0() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    LineElement: function LineElement() {
    },
    LinearGradientElement: function LinearGradientElement() {
    },
    MarkerElement: function MarkerElement() {
    },
    MaskElement: function MaskElement() {
    },
    Matrix: function Matrix() {
    },
    MetadataElement: function MetadataElement() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PathElement: function PathElement() {
    },
    PatternElement: function PatternElement() {
    },
    Point0: function Point0() {
    },
    PointList: function PointList() {
    },
    PolygonElement: function PolygonElement() {
    },
    PolylineElement: function PolylineElement() {
    },
    PreserveAspectRatio: function PreserveAspectRatio() {
    },
    RadialGradientElement: function RadialGradientElement() {
    },
    Rect: function Rect() {
    },
    RectElement: function RectElement() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    SetElement: function SetElement() {
    },
    StopElement: function StopElement() {
    },
    StringList: function StringList() {
    },
    StyleElement0: function StyleElement0() {
    },
    AttributeClassSet: function AttributeClassSet() {
    },
    SvgElement: function SvgElement() {
    },
    SvgSvgElement: function SvgSvgElement() {
    },
    SwitchElement: function SwitchElement() {
    },
    SymbolElement: function SymbolElement() {
    },
    TSpanElement: function TSpanElement() {
    },
    Tests: function Tests() {
    },
    TextContentElement: function TextContentElement() {
    },
    TextElement: function TextElement() {
    },
    TextPathElement: function TextPathElement() {
    },
    TextPositioningElement: function TextPositioningElement() {
    },
    TitleElement0: function TitleElement0() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    UnitTypes: function UnitTypes() {
    },
    UriReference: function UriReference() {
    },
    UseElement: function UseElement() {
    },
    ViewElement: function ViewElement() {
    },
    ZoomAndPan: function ZoomAndPan() {
    },
    _GradientElement: function _GradientElement() {
    },
    _SVGComponentTransferFunctionElement: function _SVGComponentTransferFunctionElement() {
    },
    _SVGFEDropShadowElement: function _SVGFEDropShadowElement() {
    },
    _SVGMPathElement: function _SVGMPathElement() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    ByteBuffer: function ByteBuffer() {
    },
    TypedData: function TypedData() {
    },
    _TypedIntList: function _TypedIntList() {
    },
    _TypedFloatList: function _TypedFloatList() {
    },
    Endian: function Endian() {
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Int64List: function Int64List() {
    },
    Uint64List: function Uint64List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    Float32x4List: function Float32x4List() {
    },
    Int32x4List: function Int32x4List() {
    },
    Float64x2List: function Float64x2List() {
    },
    Float32x4: function Float32x4() {
    },
    Int32x4: function Int32x4() {
    },
    Float64x2: function Float64x2() {
    },
    UnmodifiableByteBufferView: function UnmodifiableByteBufferView() {
    },
    UnmodifiableByteDataView: function UnmodifiableByteDataView() {
    },
    _UnmodifiableListMixin: function _UnmodifiableListMixin() {
    },
    UnmodifiableUint8ListView: function UnmodifiableUint8ListView() {
    },
    UnmodifiableInt8ListView: function UnmodifiableInt8ListView() {
    },
    UnmodifiableUint8ClampedListView: function UnmodifiableUint8ClampedListView() {
    },
    UnmodifiableUint16ListView: function UnmodifiableUint16ListView() {
    },
    UnmodifiableInt16ListView: function UnmodifiableInt16ListView() {
    },
    UnmodifiableUint32ListView: function UnmodifiableUint32ListView() {
    },
    UnmodifiableInt32ListView: function UnmodifiableInt32ListView() {
    },
    UnmodifiableUint64ListView: function UnmodifiableUint64ListView() {
    },
    UnmodifiableInt64ListView: function UnmodifiableInt64ListView() {
    },
    UnmodifiableInt32x4ListView: function UnmodifiableInt32x4ListView() {
    },
    UnmodifiableFloat32x4ListView: function UnmodifiableFloat32x4ListView() {
    },
    UnmodifiableFloat64x2ListView: function UnmodifiableFloat64x2ListView() {
    },
    UnmodifiableFloat32ListView: function UnmodifiableFloat32ListView() {
    },
    UnmodifiableFloat64ListView: function UnmodifiableFloat64ListView() {
    },
    _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin: function _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin() {
    },
    AnalyserNode: function AnalyserNode() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioBufferSourceNode: function AudioBufferSourceNode() {
    },
    AudioContext: function AudioContext() {
    },
    AudioDestinationNode: function AudioDestinationNode() {
    },
    AudioListener: function AudioListener() {
    },
    AudioNode: function AudioNode() {
    },
    AudioParam: function AudioParam() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioParamMap_values_closure: function AudioParamMap_values_closure(t0) {
      this.values = t0;
    },
    AudioProcessingEvent: function AudioProcessingEvent() {
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AudioTrack: function AudioTrack() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    AudioWorkletGlobalScope: function AudioWorkletGlobalScope() {
    },
    AudioWorkletNode: function AudioWorkletNode() {
    },
    AudioWorkletProcessor: function AudioWorkletProcessor() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    BiquadFilterNode: function BiquadFilterNode() {
    },
    ChannelMergerNode: function ChannelMergerNode() {
    },
    ChannelSplitterNode: function ChannelSplitterNode() {
    },
    ConstantSourceNode: function ConstantSourceNode() {
    },
    ConvolverNode: function ConvolverNode() {
    },
    DelayNode: function DelayNode() {
    },
    DynamicsCompressorNode: function DynamicsCompressorNode() {
    },
    GainNode: function GainNode() {
    },
    IirFilterNode: function IirFilterNode() {
    },
    MediaElementAudioSourceNode: function MediaElementAudioSourceNode() {
    },
    MediaStreamAudioDestinationNode: function MediaStreamAudioDestinationNode() {
    },
    MediaStreamAudioSourceNode: function MediaStreamAudioSourceNode() {
    },
    OfflineAudioCompletionEvent: function OfflineAudioCompletionEvent() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    OscillatorNode: function OscillatorNode() {
    },
    PannerNode: function PannerNode() {
    },
    PeriodicWave: function PeriodicWave() {
    },
    ScriptProcessorNode: function ScriptProcessorNode() {
    },
    StereoPannerNode: function StereoPannerNode() {
    },
    WaveShaperNode: function WaveShaperNode() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    AngleInstancedArrays: function AngleInstancedArrays() {
    },
    Buffer: function Buffer() {
    },
    Canvas: function Canvas() {
    },
    ColorBufferFloat: function ColorBufferFloat() {
    },
    CompressedTextureAstc: function CompressedTextureAstc() {
    },
    CompressedTextureAtc: function CompressedTextureAtc() {
    },
    CompressedTextureETC1: function CompressedTextureETC1() {
    },
    CompressedTextureEtc: function CompressedTextureEtc() {
    },
    CompressedTexturePvrtc: function CompressedTexturePvrtc() {
    },
    CompressedTextureS3TC: function CompressedTextureS3TC() {
    },
    CompressedTextureS3TCsRgb: function CompressedTextureS3TCsRgb() {
    },
    ContextEvent: function ContextEvent() {
    },
    DebugRendererInfo: function DebugRendererInfo() {
    },
    DebugShaders: function DebugShaders() {
    },
    DepthTexture: function DepthTexture() {
    },
    DrawBuffers: function DrawBuffers() {
    },
    EXTsRgb: function EXTsRgb() {
    },
    ExtBlendMinMax: function ExtBlendMinMax() {
    },
    ExtColorBufferFloat: function ExtColorBufferFloat() {
    },
    ExtColorBufferHalfFloat: function ExtColorBufferHalfFloat() {
    },
    ExtDisjointTimerQuery: function ExtDisjointTimerQuery() {
    },
    ExtDisjointTimerQueryWebGL2: function ExtDisjointTimerQueryWebGL2() {
    },
    ExtFragDepth: function ExtFragDepth() {
    },
    ExtShaderTextureLod: function ExtShaderTextureLod() {
    },
    ExtTextureFilterAnisotropic: function ExtTextureFilterAnisotropic() {
    },
    Framebuffer: function Framebuffer() {
    },
    GetBufferSubDataAsync: function GetBufferSubDataAsync() {
    },
    LoseContext: function LoseContext() {
    },
    OesElementIndexUint: function OesElementIndexUint() {
    },
    OesStandardDerivatives: function OesStandardDerivatives() {
    },
    OesTextureFloat: function OesTextureFloat() {
    },
    OesTextureFloatLinear: function OesTextureFloatLinear() {
    },
    OesTextureHalfFloat: function OesTextureHalfFloat() {
    },
    OesTextureHalfFloatLinear: function OesTextureHalfFloatLinear() {
    },
    OesVertexArrayObject: function OesVertexArrayObject() {
    },
    Program: function Program() {
    },
    Query: function Query() {
    },
    Renderbuffer: function Renderbuffer() {
    },
    RenderingContext: function RenderingContext() {
    },
    RenderingContext2: function RenderingContext2() {
    },
    Sampler: function Sampler() {
    },
    Shader: function Shader() {
    },
    ShaderPrecisionFormat: function ShaderPrecisionFormat() {
    },
    Sync: function Sync() {
    },
    Texture: function Texture() {
    },
    TimerQueryExt: function TimerQueryExt() {
    },
    TransformFeedback: function TransformFeedback() {
    },
    UniformLocation: function UniformLocation() {
    },
    VertexArrayObject: function VertexArrayObject() {
    },
    VertexArrayObjectOes: function VertexArrayObjectOes() {
    },
    WebGL: function WebGL() {
    },
    _WebGL2RenderingContextBase: function _WebGL2RenderingContextBase() {
    },
    _WebGLRenderingContextBase: function _WebGLRenderingContextBase() {
    },
    SqlDatabase: function SqlDatabase() {
    },
    SqlError: function SqlError() {
    },
    SqlResultSet: function SqlResultSet() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    SqlTransaction: function SqlTransaction() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {
    window: function() {
      return window;
    },
    document: function() {
      return document;
    },
    CssStyleDeclaration__readCache: function(key) {
      return $.$get$CssStyleDeclaration__propertyCache()[key];
    },
    CssStyleDeclaration__writeCache: function(key, value) {
      $.$get$CssStyleDeclaration__propertyCache()[key] = value;
    },
    CssStyleDeclaration__camelCase: function(hyphenated) {
      return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      });
    },
    StyleElement_StyleElement: function() {
      return W.document().createElement("style");
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      if (typeof hash !== "number")
        return hash.$add();
      if (typeof value !== "number")
        return H.iae(value);
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      if (typeof hash !== "number")
        return H.iae(hash);
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, H.intTypeCheck(a)), H.intTypeCheck(b)), H.intTypeCheck(c)), H.intTypeCheck(d)));
    },
    _ElementCssClassSet$: function(_element) {
      return new W._ElementCssClassSet(_element);
    },
    _ElementCssClassSet__contains: function(_element, value) {
      return typeof value === "string" && H.boolConversionCheck(W._ElementCssClassSet__classListContains(W._ElementCssClassSet__classListOf(_element), value));
    },
    _ElementCssClassSet__add: function(_element, value) {
      var list = W._ElementCssClassSet__classListOf(_element),
        t1 = H.boolConversionCheck(W._ElementCssClassSet__classListContainsBeforeAddOrRemove(list, value));
      W._ElementCssClassSet__classListAdd(list, value);
      return !t1;
    },
    _ElementCssClassSet__remove: function(_element, value) {
      var list = W._ElementCssClassSet__classListOf(_element),
        removed = W._ElementCssClassSet__classListContainsBeforeAddOrRemove(list, value);
      W._ElementCssClassSet__classListRemove(list, value);
      return removed;
    },
    _ElementCssClassSet__classListOf: function(e) {
      return e.classList;
    },
    _ElementCssClassSet__classListLength: function(list) {
      return list.length;
    },
    _ElementCssClassSet__classListContains: function(list, value) {
      return list.contains(value);
    },
    _ElementCssClassSet__classListContainsBeforeAddOrRemove: function(list, value) {
      return list.contains(value);
    },
    _ElementCssClassSet__classListAdd: function(list, value) {
      list.add(value);
    },
    _ElementCssClassSet__classListRemove: function(list, value) {
      list.remove(value);
    },
    _EventStream$: function(_target, _eventType, _useCapture, $T) {
      return new W._EventStream(_target, _eventType, _useCapture, [$T]);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, _useCapture, [$T]);
      t1._EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T);
      return t1;
    },
    FixedSizeListIterator$: function(array, $T) {
      return new W.FixedSizeListIterator(array, J.get$length$asx(array), [$T]);
    },
    _wrapZone: function(callback, $T) {
      if (H.boolConversionCheck(J.$eq$(P.Zone_current(), C.C__RootZone)))
        return callback;
      if (callback == null)
        return;
      return P.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    querySelector: function(selectors) {
      return J.querySelector$1$x(W.document(), selectors);
    },
    HtmlElement: function HtmlElement() {
    },
    AbortPaymentEvent: function AbortPaymentEvent() {
    },
    AbsoluteOrientationSensor: function AbsoluteOrientationSensor() {
    },
    AbstractWorker: function AbstractWorker() {
    },
    Accelerometer: function Accelerometer() {
    },
    AccessibleNode: function AccessibleNode() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AmbientLightSensor: function AmbientLightSensor() {
    },
    AnchorElement: function AnchorElement() {
    },
    Animation: function Animation() {
    },
    AnimationEffectReadOnly: function AnimationEffectReadOnly() {
    },
    AnimationEffectTiming: function AnimationEffectTiming() {
    },
    AnimationEffectTimingReadOnly: function AnimationEffectTimingReadOnly() {
    },
    AnimationEvent: function AnimationEvent() {
    },
    AnimationPlaybackEvent: function AnimationPlaybackEvent() {
    },
    AnimationTimeline: function AnimationTimeline() {
    },
    AnimationWorkletGlobalScope: function AnimationWorkletGlobalScope() {
    },
    ApplicationCache: function ApplicationCache() {
    },
    ApplicationCacheErrorEvent: function ApplicationCacheErrorEvent() {
    },
    AreaElement: function AreaElement() {
    },
    AudioElement: function AudioElement() {
    },
    AuthenticatorAssertionResponse: function AuthenticatorAssertionResponse() {
    },
    AuthenticatorAttestationResponse: function AuthenticatorAttestationResponse() {
    },
    AuthenticatorResponse: function AuthenticatorResponse() {
    },
    BRElement: function BRElement() {
    },
    BackgroundFetchClickEvent: function BackgroundFetchClickEvent() {
    },
    BackgroundFetchEvent: function BackgroundFetchEvent() {
    },
    BackgroundFetchFailEvent: function BackgroundFetchFailEvent() {
    },
    BackgroundFetchFetch: function BackgroundFetchFetch() {
    },
    BackgroundFetchManager: function BackgroundFetchManager() {
    },
    BackgroundFetchRegistration: function BackgroundFetchRegistration() {
    },
    BackgroundFetchSettledFetch: function BackgroundFetchSettledFetch() {
    },
    BackgroundFetchedEvent: function BackgroundFetchedEvent() {
    },
    BarProp: function BarProp() {
    },
    BarcodeDetector: function BarcodeDetector() {
    },
    BaseElement: function BaseElement() {
    },
    BatteryManager: function BatteryManager() {
    },
    BeforeInstallPromptEvent: function BeforeInstallPromptEvent() {
    },
    BeforeUnloadEvent: function BeforeUnloadEvent() {
    },
    Blob: function Blob() {
    },
    BlobEvent: function BlobEvent() {
    },
    BluetoothRemoteGattDescriptor: function BluetoothRemoteGattDescriptor() {
    },
    Body: function Body() {
    },
    BodyElement: function BodyElement() {
    },
    BroadcastChannel: function BroadcastChannel() {
    },
    BudgetState: function BudgetState() {
    },
    ButtonElement: function ButtonElement() {
    },
    CDataSection: function CDataSection() {
    },
    CacheStorage: function CacheStorage() {
    },
    CanMakePaymentEvent: function CanMakePaymentEvent() {
    },
    CanvasCaptureMediaStreamTrack: function CanvasCaptureMediaStreamTrack() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasGradient: function CanvasGradient() {
    },
    CanvasPattern: function CanvasPattern() {
    },
    CanvasRenderingContext: function CanvasRenderingContext() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    ChildNode: function ChildNode() {
    },
    Client: function Client() {
    },
    Clients: function Clients() {
    },
    ClipboardEvent: function ClipboardEvent() {
    },
    CloseEvent: function CloseEvent() {
    },
    Comment: function Comment() {
    },
    CompositionEvent: function CompositionEvent() {
    },
    ContentElement: function ContentElement() {
    },
    CookieStore: function CookieStore() {
    },
    Coordinates: function Coordinates() {
    },
    Credential: function Credential() {
    },
    CredentialUserData: function CredentialUserData() {
    },
    CredentialsContainer: function CredentialsContainer() {
    },
    Crypto: function Crypto() {
    },
    CryptoKey: function CryptoKey() {
    },
    Css: function Css() {
    },
    CssCharsetRule: function CssCharsetRule() {
    },
    CssConditionRule: function CssConditionRule() {
    },
    CssFontFaceRule: function CssFontFaceRule() {
    },
    CssGroupingRule: function CssGroupingRule() {
    },
    CssImageValue: function CssImageValue() {
    },
    CssImportRule: function CssImportRule() {
    },
    CssKeyframeRule: function CssKeyframeRule() {
    },
    CssKeyframesRule: function CssKeyframesRule() {
    },
    CssKeywordValue: function CssKeywordValue() {
    },
    CssMatrixComponent: function CssMatrixComponent() {
    },
    CssMediaRule: function CssMediaRule() {
    },
    CssNamespaceRule: function CssNamespaceRule() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPageRule: function CssPageRule() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssPositionValue: function CssPositionValue() {
    },
    CssResourceValue: function CssResourceValue() {
    },
    CssRotation: function CssRotation() {
    },
    CssRule: function CssRule() {
    },
    CssScale: function CssScale() {
    },
    CssSkew: function CssSkew() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    _CssStyleDeclarationSet: function _CssStyleDeclarationSet() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleRule: function CssStyleRule() {
    },
    CssStyleSheet: function CssStyleSheet() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssSupportsRule: function CssSupportsRule() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssTranslation: function CssTranslation() {
    },
    CssUnitValue: function CssUnitValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    CssVariableReferenceValue: function CssVariableReferenceValue() {
    },
    CssViewportRule: function CssViewportRule() {
    },
    CssurlImageValue: function CssurlImageValue() {
    },
    CustomElementRegistry: function CustomElementRegistry() {
    },
    CustomEvent: function CustomEvent() {
    },
    DListElement: function DListElement() {
    },
    DataElement: function DataElement() {
    },
    DataListElement: function DataListElement() {
    },
    DataTransfer: function DataTransfer() {
    },
    DataTransferItem: function DataTransferItem() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DeprecatedStorageInfo: function DeprecatedStorageInfo() {
    },
    DeprecatedStorageQuota: function DeprecatedStorageQuota() {
    },
    DeprecationReport: function DeprecationReport() {
    },
    DetailsElement: function DetailsElement() {
    },
    DetectedBarcode: function DetectedBarcode() {
    },
    DetectedFace: function DetectedFace() {
    },
    DetectedText: function DetectedText() {
    },
    DeviceAcceleration: function DeviceAcceleration() {
    },
    DeviceMotionEvent: function DeviceMotionEvent() {
    },
    DeviceOrientationEvent: function DeviceOrientationEvent() {
    },
    DeviceRotationRate: function DeviceRotationRate() {
    },
    DialogElement: function DialogElement() {
    },
    DirectoryEntry: function DirectoryEntry() {
    },
    DirectoryReader: function DirectoryReader() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DocumentFragment: function DocumentFragment() {
    },
    DocumentOrShadowRoot: function DocumentOrShadowRoot() {
    },
    DocumentTimeline: function DocumentTimeline() {
    },
    DomError: function DomError() {
    },
    DomException: function DomException() {
    },
    DomImplementation: function DomImplementation() {
    },
    DomIterator: function DomIterator() {
    },
    DomMatrix: function DomMatrix() {
    },
    DomMatrixReadOnly: function DomMatrixReadOnly() {
    },
    DomParser: function DomParser() {
    },
    DomPoint: function DomPoint() {
    },
    DomPointReadOnly: function DomPointReadOnly() {
    },
    DomQuad: function DomQuad() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomStringMap: function DomStringMap() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList() {
    },
    ElementList: function ElementList() {
    },
    _FrozenElementList: function _FrozenElementList() {
    },
    Element: function Element() {
    },
    _ElementFactoryProvider: function _ElementFactoryProvider() {
    },
    ScrollAlignment: function ScrollAlignment() {
    },
    EmbedElement: function EmbedElement() {
    },
    Entry: function Entry() {
    },
    ErrorEvent: function ErrorEvent() {
    },
    Event: function Event() {
    },
    EventSource: function EventSource() {
    },
    Events: function Events() {
    },
    ElementEvents: function ElementEvents() {
    },
    EventTarget: function EventTarget() {
    },
    ExtendableEvent: function ExtendableEvent() {
    },
    ExtendableMessageEvent: function ExtendableMessageEvent() {
    },
    External: function External() {
    },
    FaceDetector: function FaceDetector() {
    },
    FederatedCredential: function FederatedCredential() {
    },
    FetchEvent: function FetchEvent() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    File: function File() {
    },
    FileEntry: function FileEntry() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileSystem: function FileSystem() {
    },
    FileWriter: function FileWriter() {
    },
    FocusEvent: function FocusEvent() {
    },
    FontFace: function FontFace() {
    },
    FontFaceSet: function FontFaceSet() {
    },
    FontFaceSetLoadEvent: function FontFaceSetLoadEvent() {
    },
    FontFaceSource: function FontFaceSource() {
    },
    ForeignFetchEvent: function ForeignFetchEvent() {
    },
    FormData: function FormData() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    GamepadButton: function GamepadButton() {
    },
    GamepadEvent: function GamepadEvent() {
    },
    GamepadPose: function GamepadPose() {
    },
    Geolocation: function Geolocation() {
    },
    _GeopositionWrapper: function _GeopositionWrapper() {
    },
    Geoposition: function Geoposition() {
    },
    GlobalEventHandlers: function GlobalEventHandlers() {
    },
    Gyroscope: function Gyroscope() {
    },
    HRElement: function HRElement() {
    },
    HashChangeEvent: function HashChangeEvent() {
    },
    HeadElement: function HeadElement() {
    },
    Headers: function Headers() {
    },
    HeadingElement: function HeadingElement() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HtmlDocument: function HtmlDocument() {
    },
    HtmlFormControlsCollection: function HtmlFormControlsCollection() {
    },
    HtmlHtmlElement: function HtmlHtmlElement() {
    },
    HtmlHyperlinkElementUtils: function HtmlHyperlinkElementUtils() {
    },
    HtmlOptionsCollection: function HtmlOptionsCollection() {
    },
    HttpRequest0: function HttpRequest0() {
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    HttpRequestUpload: function HttpRequestUpload() {
    },
    IFrameElement: function IFrameElement() {
    },
    IdleDeadline: function IdleDeadline() {
    },
    ImageBitmap: function ImageBitmap() {
    },
    ImageBitmapRenderingContext: function ImageBitmapRenderingContext() {
    },
    ImageCapture: function ImageCapture() {
    },
    ImageData: function ImageData() {
    },
    ImageElement: function ImageElement() {
    },
    InputDeviceCapabilities: function InputDeviceCapabilities() {
    },
    InputElement: function InputElement() {
    },
    InputElementBase: function InputElementBase() {
    },
    HiddenInputElement: function HiddenInputElement() {
    },
    TextInputElementBase: function TextInputElementBase() {
    },
    SearchInputElement: function SearchInputElement() {
    },
    TextInputElement: function TextInputElement() {
    },
    UrlInputElement: function UrlInputElement() {
    },
    TelephoneInputElement: function TelephoneInputElement() {
    },
    EmailInputElement: function EmailInputElement() {
    },
    PasswordInputElement: function PasswordInputElement() {
    },
    RangeInputElementBase: function RangeInputElementBase() {
    },
    DateInputElement: function DateInputElement() {
    },
    MonthInputElement: function MonthInputElement() {
    },
    WeekInputElement: function WeekInputElement() {
    },
    TimeInputElement: function TimeInputElement() {
    },
    LocalDateTimeInputElement: function LocalDateTimeInputElement() {
    },
    NumberInputElement: function NumberInputElement() {
    },
    RangeInputElement: function RangeInputElement() {
    },
    CheckboxInputElement: function CheckboxInputElement() {
    },
    RadioButtonInputElement: function RadioButtonInputElement() {
    },
    FileUploadInputElement: function FileUploadInputElement() {
    },
    SubmitButtonInputElement: function SubmitButtonInputElement() {
    },
    ImageButtonInputElement: function ImageButtonInputElement() {
    },
    ResetButtonInputElement: function ResetButtonInputElement() {
    },
    ButtonInputElement: function ButtonInputElement() {
    },
    InstallEvent: function InstallEvent() {
    },
    IntersectionObserver: function IntersectionObserver() {
    },
    IntersectionObserverEntry: function IntersectionObserverEntry() {
    },
    InterventionReport: function InterventionReport() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    KeyframeEffect: function KeyframeEffect() {
    },
    KeyframeEffectReadOnly: function KeyframeEffectReadOnly() {
    },
    LIElement: function LIElement() {
    },
    LabelElement: function LabelElement() {
    },
    LegendElement: function LegendElement() {
    },
    LinearAccelerationSensor: function LinearAccelerationSensor() {
    },
    LinkElement: function LinkElement() {
    },
    Location: function Location() {
    },
    Magnetometer: function Magnetometer() {
    },
    MapElement: function MapElement() {
    },
    MediaCapabilities: function MediaCapabilities() {
    },
    MediaCapabilitiesInfo: function MediaCapabilitiesInfo() {
    },
    MediaDeviceInfo: function MediaDeviceInfo() {
    },
    MediaDevices: function MediaDevices() {
    },
    MediaElement: function MediaElement() {
    },
    MediaEncryptedEvent: function MediaEncryptedEvent() {
    },
    MediaError: function MediaError() {
    },
    MediaKeyMessageEvent: function MediaKeyMessageEvent() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaKeyStatusMap: function MediaKeyStatusMap() {
    },
    MediaKeySystemAccess: function MediaKeySystemAccess() {
    },
    MediaKeys: function MediaKeys() {
    },
    MediaKeysPolicy: function MediaKeysPolicy() {
    },
    MediaList: function MediaList() {
    },
    MediaMetadata: function MediaMetadata() {
    },
    MediaQueryList: function MediaQueryList() {
    },
    MediaQueryListEvent: function MediaQueryListEvent() {
    },
    MediaRecorder: function MediaRecorder() {
    },
    MediaSession: function MediaSession() {
    },
    MediaSettingsRange: function MediaSettingsRange() {
    },
    MediaSource: function MediaSource() {
    },
    MediaStream: function MediaStream() {
    },
    MediaStreamEvent: function MediaStreamEvent() {
    },
    MediaStreamTrack: function MediaStreamTrack() {
    },
    MediaStreamTrackEvent: function MediaStreamTrackEvent() {
    },
    MemoryInfo: function MemoryInfo() {
    },
    MenuElement: function MenuElement() {
    },
    MessageChannel: function MessageChannel() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MetaElement: function MetaElement() {
    },
    Metadata: function Metadata() {
    },
    MeterElement: function MeterElement() {
    },
    MidiAccess: function MidiAccess() {
    },
    MidiConnectionEvent: function MidiConnectionEvent() {
    },
    MidiInput: function MidiInput() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiInputMap_values_closure: function MidiInputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiMessageEvent: function MidiMessageEvent() {
    },
    MidiOutput: function MidiOutput() {
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap_values_closure: function MidiOutputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiPort: function MidiPort() {
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    ModElement: function ModElement() {
    },
    MouseEvent: function MouseEvent() {
    },
    MutationEvent: function MutationEvent() {
    },
    MutationObserver: function MutationObserver() {
    },
    MutationRecord: function MutationRecord() {
    },
    NavigationPreloadManager: function NavigationPreloadManager() {
    },
    Navigator: function Navigator() {
    },
    NavigatorAutomationInformation: function NavigatorAutomationInformation() {
    },
    NavigatorConcurrentHardware: function NavigatorConcurrentHardware() {
    },
    NavigatorCookies: function NavigatorCookies() {
    },
    NavigatorID: function NavigatorID() {
    },
    NavigatorLanguage: function NavigatorLanguage() {
    },
    NavigatorOnLine: function NavigatorOnLine() {
    },
    NavigatorUserMediaError: function NavigatorUserMediaError() {
    },
    NetworkInformation: function NetworkInformation() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy() {
    },
    Node: function Node() {
    },
    NodeFilter: function NodeFilter() {
    },
    NodeIterator: function NodeIterator() {
    },
    NodeList: function NodeList() {
    },
    NonDocumentTypeChildNode: function NonDocumentTypeChildNode() {
    },
    NonElementParentNode: function NonElementParentNode() {
    },
    NoncedElement: function NoncedElement() {
    },
    Notification: function Notification() {
    },
    NotificationEvent: function NotificationEvent() {
    },
    OListElement: function OListElement() {
    },
    ObjectElement: function ObjectElement() {
    },
    OffscreenCanvas: function OffscreenCanvas() {
    },
    OffscreenCanvasRenderingContext2D: function OffscreenCanvasRenderingContext2D() {
    },
    OptGroupElement: function OptGroupElement() {
    },
    OptionElement: function OptionElement() {
    },
    OrientationSensor: function OrientationSensor() {
    },
    OutputElement: function OutputElement() {
    },
    OverconstrainedError: function OverconstrainedError() {
    },
    PageTransitionEvent: function PageTransitionEvent() {
    },
    PaintRenderingContext2D: function PaintRenderingContext2D() {
    },
    PaintSize: function PaintSize() {
    },
    PaintWorkletGlobalScope: function PaintWorkletGlobalScope() {
    },
    ParagraphElement: function ParagraphElement() {
    },
    ParamElement: function ParamElement() {
    },
    ParentNode: function ParentNode() {
    },
    PasswordCredential: function PasswordCredential() {
    },
    Path2D: function Path2D() {
    },
    PaymentAddress: function PaymentAddress() {
    },
    PaymentInstruments: function PaymentInstruments() {
    },
    PaymentManager: function PaymentManager() {
    },
    PaymentRequest: function PaymentRequest() {
    },
    PaymentRequestEvent: function PaymentRequestEvent() {
    },
    PaymentRequestUpdateEvent: function PaymentRequestUpdateEvent() {
    },
    PaymentResponse: function PaymentResponse() {
    },
    Performance: function Performance() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceLongTaskTiming: function PerformanceLongTaskTiming() {
    },
    PerformanceMark: function PerformanceMark() {
    },
    PerformanceMeasure: function PerformanceMeasure() {
    },
    PerformanceNavigation: function PerformanceNavigation() {
    },
    PerformanceNavigationTiming: function PerformanceNavigationTiming() {
    },
    PerformanceObserver: function PerformanceObserver() {
    },
    PerformanceObserverEntryList: function PerformanceObserverEntryList() {
    },
    PerformancePaintTiming: function PerformancePaintTiming() {
    },
    PerformanceResourceTiming: function PerformanceResourceTiming() {
    },
    PerformanceServerTiming: function PerformanceServerTiming() {
    },
    PerformanceTiming: function PerformanceTiming() {
    },
    PermissionStatus: function PermissionStatus() {
    },
    Permissions: function Permissions() {
    },
    PhotoCapabilities: function PhotoCapabilities() {
    },
    PictureElement: function PictureElement() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PointerEvent: function PointerEvent() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    PositionError: function PositionError() {
    },
    PreElement: function PreElement() {
    },
    Presentation: function Presentation() {
    },
    PresentationAvailability: function PresentationAvailability() {
    },
    PresentationConnection: function PresentationConnection() {
    },
    PresentationConnectionAvailableEvent: function PresentationConnectionAvailableEvent() {
    },
    PresentationConnectionCloseEvent: function PresentationConnectionCloseEvent() {
    },
    PresentationConnectionList: function PresentationConnectionList() {
    },
    PresentationReceiver: function PresentationReceiver() {
    },
    PresentationRequest: function PresentationRequest() {
    },
    ProcessingInstruction: function ProcessingInstruction() {
    },
    ProgressElement: function ProgressElement() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    PromiseRejectionEvent: function PromiseRejectionEvent() {
    },
    PublicKeyCredential: function PublicKeyCredential() {
    },
    PushEvent: function PushEvent() {
    },
    PushManager: function PushManager() {
    },
    PushMessageData: function PushMessageData() {
    },
    PushSubscription: function PushSubscription() {
    },
    PushSubscriptionOptions: function PushSubscriptionOptions() {
    },
    QuoteElement: function QuoteElement() {
    },
    Range: function Range() {
    },
    RelatedApplication: function RelatedApplication() {
    },
    RelativeOrientationSensor: function RelativeOrientationSensor() {
    },
    RemotePlayback: function RemotePlayback() {
    },
    ReportBody: function ReportBody() {
    },
    ReportingObserver: function ReportingObserver() {
    },
    ResizeObserver: function ResizeObserver() {
    },
    ResizeObserverEntry: function ResizeObserverEntry() {
    },
    RtcCertificate: function RtcCertificate() {
    },
    RtcDataChannel: function RtcDataChannel() {
    },
    RtcDataChannelEvent: function RtcDataChannelEvent() {
    },
    RtcDtmfSender: function RtcDtmfSender() {
    },
    RtcDtmfToneChangeEvent: function RtcDtmfToneChangeEvent() {
    },
    RtcIceCandidate: function RtcIceCandidate() {
    },
    RtcLegacyStatsReport: function RtcLegacyStatsReport() {
    },
    RtcPeerConnection: function RtcPeerConnection() {
    },
    RtcPeerConnectionIceEvent: function RtcPeerConnectionIceEvent() {
    },
    RtcRtpContributingSource: function RtcRtpContributingSource() {
    },
    RtcRtpReceiver: function RtcRtpReceiver() {
    },
    RtcRtpSender: function RtcRtpSender() {
    },
    RtcSessionDescription: function RtcSessionDescription() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    RtcStatsReport_values_closure: function RtcStatsReport_values_closure(t0) {
      this.values = t0;
    },
    RtcStatsResponse: function RtcStatsResponse() {
    },
    RtcTrackEvent: function RtcTrackEvent() {
    },
    Screen: function Screen() {
    },
    ScreenOrientation: function ScreenOrientation() {
    },
    ScriptElement: function ScriptElement() {
    },
    ScrollState: function ScrollState() {
    },
    ScrollTimeline: function ScrollTimeline() {
    },
    SecurityPolicyViolationEvent: function SecurityPolicyViolationEvent() {
    },
    SelectElement: function SelectElement() {
    },
    Selection: function Selection() {
    },
    Sensor: function Sensor() {
    },
    SensorErrorEvent: function SensorErrorEvent() {
    },
    ServiceWorker: function ServiceWorker() {
    },
    ServiceWorkerContainer: function ServiceWorkerContainer() {
    },
    ServiceWorkerGlobalScope: function ServiceWorkerGlobalScope() {
    },
    ServiceWorkerRegistration: function ServiceWorkerRegistration() {
    },
    ShadowElement: function ShadowElement() {
    },
    ShadowRoot: function ShadowRoot() {
    },
    SharedArrayBuffer: function SharedArrayBuffer() {
    },
    SharedWorker: function SharedWorker() {
    },
    SharedWorkerGlobalScope: function SharedWorkerGlobalScope() {
    },
    SlotElement: function SlotElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SourceElement: function SourceElement() {
    },
    SpanElement: function SpanElement() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognition: function SpeechRecognition() {
    },
    SpeechRecognitionAlternative: function SpeechRecognitionAlternative() {
    },
    SpeechRecognitionError: function SpeechRecognitionError() {
    },
    SpeechRecognitionEvent: function SpeechRecognitionEvent() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    SpeechSynthesis: function SpeechSynthesis() {
    },
    SpeechSynthesisEvent: function SpeechSynthesisEvent() {
    },
    SpeechSynthesisUtterance: function SpeechSynthesisUtterance() {
    },
    SpeechSynthesisVoice: function SpeechSynthesisVoice() {
    },
    StaticRange: function StaticRange() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    Storage_values_closure: function Storage_values_closure(t0) {
      this.values = t0;
    },
    StorageEvent: function StorageEvent() {
    },
    StorageManager: function StorageManager() {
    },
    StyleElement: function StyleElement() {
    },
    StyleMedia: function StyleMedia() {
    },
    StylePropertyMap: function StylePropertyMap() {
    },
    StylePropertyMapReadonly: function StylePropertyMapReadonly() {
    },
    StyleSheet: function StyleSheet() {
    },
    SyncEvent: function SyncEvent() {
    },
    SyncManager: function SyncManager() {
    },
    TableCaptionElement: function TableCaptionElement() {
    },
    TableCellElement: function TableCellElement() {
    },
    TableColElement: function TableColElement() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TaskAttributionTiming: function TaskAttributionTiming() {
    },
    TemplateElement: function TemplateElement() {
    },
    Text: function Text() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextDetector: function TextDetector() {
    },
    TextEvent: function TextEvent() {
    },
    TextMetrics: function TextMetrics() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeElement: function TimeElement() {
    },
    TimeRanges: function TimeRanges() {
    },
    TitleElement: function TitleElement() {
    },
    Touch: function Touch() {
    },
    TouchEvent: function TouchEvent() {
    },
    TouchList: function TouchList() {
    },
    TrackDefault: function TrackDefault() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    TrackElement: function TrackElement() {
    },
    TrackEvent: function TrackEvent() {
    },
    TransitionEvent: function TransitionEvent() {
    },
    TreeWalker: function TreeWalker() {
    },
    TrustedHtml: function TrustedHtml() {
    },
    TrustedScriptUrl: function TrustedScriptUrl() {
    },
    TrustedUrl: function TrustedUrl() {
    },
    UIEvent: function UIEvent() {
    },
    UListElement: function UListElement() {
    },
    UnderlyingSourceBase: function UnderlyingSourceBase() {
    },
    UnknownElement: function UnknownElement() {
    },
    Url: function Url() {
    },
    UrlSearchParams: function UrlSearchParams() {
    },
    UrlUtilsReadOnly: function UrlUtilsReadOnly() {
    },
    VR: function VR() {
    },
    VRCoordinateSystem: function VRCoordinateSystem() {
    },
    VRDevice: function VRDevice() {
    },
    VRDeviceEvent: function VRDeviceEvent() {
    },
    VRDisplay: function VRDisplay() {
    },
    VRDisplayCapabilities: function VRDisplayCapabilities() {
    },
    VRDisplayEvent: function VRDisplayEvent() {
    },
    VREyeParameters: function VREyeParameters() {
    },
    VRFrameData: function VRFrameData() {
    },
    VRFrameOfReference: function VRFrameOfReference() {
    },
    VRPose: function VRPose() {
    },
    VRSession: function VRSession() {
    },
    VRSessionEvent: function VRSessionEvent() {
    },
    VRStageBounds: function VRStageBounds() {
    },
    VRStageBoundsPoint: function VRStageBoundsPoint() {
    },
    VRStageParameters: function VRStageParameters() {
    },
    ValidityState: function ValidityState() {
    },
    VideoElement: function VideoElement() {
    },
    VideoPlaybackQuality: function VideoPlaybackQuality() {
    },
    VideoTrack: function VideoTrack() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    VisualViewport: function VisualViewport() {
    },
    VttCue: function VttCue() {
    },
    VttRegion: function VttRegion() {
    },
    WebSocket0: function WebSocket0() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window: function Window() {
    },
    _BeforeUnloadEvent: function _BeforeUnloadEvent() {
    },
    _BeforeUnloadEventStreamProvider: function _BeforeUnloadEventStreamProvider() {
    },
    WindowBase64: function WindowBase64() {
    },
    WindowClient: function WindowClient() {
    },
    WindowEventHandlers: function WindowEventHandlers() {
    },
    Worker: function Worker() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    WorkerPerformance: function WorkerPerformance() {
    },
    WorkletAnimation: function WorkletAnimation() {
    },
    WorkletGlobalScope: function WorkletGlobalScope() {
    },
    XPathEvaluator: function XPathEvaluator() {
    },
    XPathExpression: function XPathExpression() {
    },
    XPathNSResolver: function XPathNSResolver() {
    },
    XPathResult: function XPathResult() {
    },
    XmlDocument: function XmlDocument() {
    },
    XmlSerializer: function XmlSerializer() {
    },
    XsltProcessor: function XsltProcessor() {
    },
    _Attr: function _Attr() {
    },
    _Bluetooth: function _Bluetooth() {
    },
    _BluetoothCharacteristicProperties: function _BluetoothCharacteristicProperties() {
    },
    _BluetoothDevice: function _BluetoothDevice() {
    },
    _BluetoothRemoteGATTCharacteristic: function _BluetoothRemoteGATTCharacteristic() {
    },
    _BluetoothRemoteGATTServer: function _BluetoothRemoteGATTServer() {
    },
    _BluetoothRemoteGATTService: function _BluetoothRemoteGATTService() {
    },
    _BluetoothUUID: function _BluetoothUUID() {
    },
    _BudgetService: function _BudgetService() {
    },
    _Cache: function _Cache() {
    },
    _CanvasPath: function _CanvasPath() {
    },
    _Clipboard: function _Clipboard() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DOMFileSystemSync: function _DOMFileSystemSync() {
    },
    _DirectoryEntrySync: function _DirectoryEntrySync() {
    },
    _DirectoryReaderSync: function _DirectoryReaderSync() {
    },
    _DocumentType: function _DocumentType() {
    },
    _DomRect: function _DomRect() {
    },
    _JenkinsSmiHash: function _JenkinsSmiHash() {
    },
    _EntrySync: function _EntrySync() {
    },
    _FileEntrySync: function _FileEntrySync() {
    },
    _FileReaderSync: function _FileReaderSync() {
    },
    _FileWriterSync: function _FileWriterSync() {
    },
    _GamepadList: function _GamepadList() {
    },
    _HTMLAllCollection: function _HTMLAllCollection() {
    },
    _HTMLDirectoryElement: function _HTMLDirectoryElement() {
    },
    _HTMLFontElement: function _HTMLFontElement() {
    },
    _HTMLFrameElement: function _HTMLFrameElement() {
    },
    _HTMLFrameSetElement: function _HTMLFrameSetElement() {
    },
    _HTMLMarqueeElement: function _HTMLMarqueeElement() {
    },
    _Mojo: function _Mojo() {
    },
    _MojoHandle: function _MojoHandle() {
    },
    _MojoInterfaceInterceptor: function _MojoInterfaceInterceptor() {
    },
    _MojoInterfaceRequestEvent: function _MojoInterfaceRequestEvent() {
    },
    _MojoWatcher: function _MojoWatcher() {
    },
    _NFC: function _NFC() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _PagePopupController: function _PagePopupController() {
    },
    _Report: function _Report() {
    },
    _Request: function _Request() {
    },
    _ResourceProgressEvent: function _ResourceProgressEvent() {
    },
    _Response: function _Response() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _SubtleCrypto: function _SubtleCrypto() {
    },
    _USB: function _USB() {
    },
    _USBAlternateInterface: function _USBAlternateInterface() {
    },
    _USBConfiguration: function _USBConfiguration() {
    },
    _USBConnectionEvent: function _USBConnectionEvent() {
    },
    _USBDevice: function _USBDevice() {
    },
    _USBEndpoint: function _USBEndpoint() {
    },
    _USBInTransferResult: function _USBInTransferResult() {
    },
    _USBInterface: function _USBInterface() {
    },
    _USBIsochronousInTransferPacket: function _USBIsochronousInTransferPacket() {
    },
    _USBIsochronousInTransferResult: function _USBIsochronousInTransferResult() {
    },
    _USBIsochronousOutTransferPacket: function _USBIsochronousOutTransferPacket() {
    },
    _USBIsochronousOutTransferResult: function _USBIsochronousOutTransferResult() {
    },
    _USBOutTransferResult: function _USBOutTransferResult() {
    },
    _WindowTimers: function _WindowTimers() {
    },
    _WorkerLocation: function _WorkerLocation() {
    },
    _WorkerNavigator: function _WorkerNavigator() {
    },
    _Worklet: function _Worklet() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap() {
    },
    _NamespacedAttributeMap: function _NamespacedAttributeMap() {
    },
    _DataAttributeMap: function _DataAttributeMap() {
    },
    CanvasImageSource: function CanvasImageSource() {
    },
    WindowBase: function WindowBase() {
    },
    LocationBase: function LocationBase() {
    },
    HistoryBase: function HistoryBase() {
    },
    CssClassSet: function CssClassSet() {
    },
    _ContentCssRect: function _ContentCssRect() {
    },
    _ContentCssListRect: function _ContentCssListRect() {
    },
    _PaddingCssRect: function _PaddingCssRect() {
    },
    _BorderCssRect: function _BorderCssRect() {
    },
    _MarginCssRect: function _MarginCssRect() {
    },
    CssRect: function CssRect() {
    },
    _MultiElementCssClassSet: function _MultiElementCssClassSet() {
    },
    _ElementCssClassSet: function _ElementCssClassSet(t0) {
      this._element = t0;
    },
    Dimension: function Dimension() {
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    ElementStream: function ElementStream() {
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl() {
    },
    _ElementListEventStreamImpl: function _ElementListEventStreamImpl() {
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._html$_onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    CustomStream: function CustomStream() {
    },
    _CustomEventStreamImpl: function _CustomEventStreamImpl() {
    },
    _CustomKeyEventStreamImpl: function _CustomKeyEventStreamImpl() {
    },
    _StreamPool: function _StreamPool() {
    },
    _CustomEventStreamProvider: function _CustomEventStreamProvider() {
    },
    _Html5NodeValidator: function _Html5NodeValidator() {
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    KeyCode: function KeyCode() {
    },
    KeyLocation: function KeyLocation() {
    },
    _KeyName: function _KeyName() {
    },
    _KeyboardEventHandler: function _KeyboardEventHandler() {
    },
    KeyboardEventStream: function KeyboardEventStream() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder() {
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _CustomElementNodeValidator: function _CustomElementNodeValidator() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    ReadyState: function ReadyState() {
    },
    _WrappedList: function _WrappedList() {
    },
    _WrappedIterator: function _WrappedIterator() {
    },
    _HttpRequestUtils: function _HttpRequestUtils() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _VariableSizeListIterator: function _VariableSizeListIterator() {
    },
    Console: function Console() {
    },
    _JSElementUpgrader: function _JSElementUpgrader() {
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    _LocationCrossFrame: function _LocationCrossFrame() {
    },
    _HistoryCrossFrame: function _HistoryCrossFrame() {
    },
    KeyEvent: function KeyEvent() {
    },
    Platform: function Platform() {
    },
    _WrappedEvent: function _WrappedEvent() {
    },
    ElementUpgrader: function ElementUpgrader() {
    },
    NodeValidator: function NodeValidator() {
    },
    NodeTreeSanitizer: function NodeTreeSanitizer() {
    },
    _TrustedHtmlTreeSanitizer: function _TrustedHtmlTreeSanitizer() {
    },
    UriPolicy: function UriPolicy() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy() {
    },
    _ThrowsNodeValidator: function _ThrowsNodeValidator() {
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer() {
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssStyleDeclarationSet_Object_CssStyleDeclarationBase: function __CssStyleDeclarationSet_Object_CssStyleDeclarationBase() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  G = {
    ThrowingSlowComponentLoader$: function() {
      return new G.ThrowingSlowComponentLoader();
    },
    createRandomAppId: function() {
      var t1 = new G.createRandomAppId_char(P.Random_Random());
      return H.S(t1.call$0()) + H.S(t1.call$0()) + H.S(t1.call$0());
    },
    ThrowingSlowComponentLoader: function ThrowingSlowComponentLoader() {
    },
    createRandomAppId_char: function createRandomAppId_char(t0) {
      this.random = t0;
    },
    _createNgZone: function() {
      return Y.NgZone_NgZone();
    },
    appInjector: function(userProvidedInjector) {
      var ngZone, t1 = {},
        minimalInjector = $.$get$appGlobals().createAppInjector$1(Y.modules_template__minimalApp$Injector$closure());
      t1.applicationRef = null;
      ngZone = G._createNgZone();
      return ngZone.run$1$1(new G.appInjector_closure(t1, ngZone, userProvidedInjector.call$1(G._LazyInjector$(P.LinkedHashMap_LinkedHashMap$_literal([C.Type_ApplicationRef_Aij, new G.appInjector_closure0(t1), C.Type_AppViewUtils_NWH, new G.appInjector_closure1(), C.Type_NgZone_6ty, new G.appInjector_closure2(ngZone), C.Type_Testability_h8g, new G.appInjector_closure3(ngZone)], P.Object, {func: 1, ret: P.Object}), X.unsafeCast(minimalInjector, E.HierarchicalInjector)))), M.Injector);
    },
    _LazyInjector$: function(_providers, $parent) {
      return new G._LazyInjector(_providers, $parent == null ? C.EmptyInjector_null : $parent);
    },
    _identityInjector: function($parent) {
      return H.interceptedTypeCheck($parent, "$isInjector");
    },
    runApp: function(componentFactory, $T) {
      if (H.boolConversionCheck(X.isDevMode()) && componentFactory == null)
        throw H.wrapException(P.ArgumentError$notNull("componentFactory"));
      return G.appInjector(G.run___identityInjector$closure()).provideType$1$1(C.Type_ApplicationRef_Aij, Y.ApplicationRef).bootstrap$1$1(componentFactory, $T);
    },
    appInjector_closure0: function appInjector_closure0(t0) {
      this._box_0 = t0;
    },
    appInjector_closure1: function appInjector_closure1() {
    },
    appInjector_closure2: function appInjector_closure2(t0) {
      this.ngZone = t0;
    },
    appInjector_closure3: function appInjector_closure3(t0) {
      this.ngZone = t0;
    },
    appInjector_closure: function appInjector_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.ngZone = t1;
      this.userInjector = t2;
    },
    _LazyInjector: function _LazyInjector(t0, t1) {
      this._providers = t0;
      this.parent = t1;
    },
    _HostViewData$: function() {
      return new G._HostViewData();
    },
    HostView: function HostView() {
    },
    _HostViewData: function _HostViewData() {
      this._onDestroyCallbacks = null;
      this._host_view$_changeDetectorState = 0;
      this._host_view$_shouldSkipChangeDetection = false;
    },
    ElementInjector$: function(_view, _nodeIndex) {
      return new G.ElementInjector(_view, _nodeIndex, C.EmptyInjector_null);
    },
    ElementInjector: function ElementInjector(t0, t1, t2) {
      this._view = t0;
      this._nodeIndex = t1;
      this.parent = t2;
    },
    Module: function Module() {
    },
    _GameUpdateEventEmitter__runCase: function($event, callback) {
      switch ($event) {
        case C.Event_0:
          return callback.call$1($.$get$_GameUpdateEventEmitter__awakeStream());
        case C.Event_1:
          return callback.call$1($.$get$_GameUpdateEventEmitter__startStream());
        case C.Event_2:
          return callback.call$1($.$get$_GameUpdateEventEmitter__earlyUpdateStream());
        case C.Event_3:
          return callback.call$1($.$get$_GameUpdateEventEmitter__fixedUpdateStream());
        case C.Event_4:
          return callback.call$1($.$get$_GameUpdateEventEmitter__updateStream());
        case C.Event_5:
          return callback.call$1($.$get$_GameUpdateEventEmitter__lateUpdateStream());
        case C.Event_6:
          return callback.call$1($.$get$_GameUpdateEventEmitter__earlyRenderStream());
        case C.Event_7:
          return callback.call$1($.$get$_GameUpdateEventEmitter__renderStream());
        case C.Event_8:
          return callback.call$1($.$get$_GameUpdateEventEmitter__lateRenderStream());
        case C.Event_9:
          return callback.call$1($.$get$_GameUpdateEventEmitter__guiStream());
        case C.Event_10:
          return callback.call$1($.$get$_GameUpdateEventEmitter__quitStream());
      }
    },
    _GameUpdateEventEmitter_SetStream: function(e, t) {
      return H.interceptedTypeCheck(G._GameUpdateEventEmitter__runCase(e, new G._GameUpdateEventEmitter_SetStream_closure(e, t, new G._GameUpdateEventEmitter_SetStream_closure0(t))), "$isStreamSubscription");
    },
    _GameUpdateEventEmitter_Emit: function(e, v) {
      G._GameUpdateEventEmitter__runCase(e, new G._GameUpdateEventEmitter_Emit_closure(v));
    },
    Game__SetStream: function(e, t) {
      return G._GameUpdateEventEmitter_SetStream(e, t);
    },
    Game__Emit: function(e, t) {
      return G._GameUpdateEventEmitter_Emit(e, t);
    },
    Game_OnAwake: function(f) {
      return G.Game__SetStream(C.Event_0, f);
    },
    Game_OnStart: function(f) {
      return G.Game__SetStream(C.Event_1, f);
    },
    Game_OnEarlyUpdate: function(f) {
      return G.Game__SetStream(C.Event_2, f);
    },
    Game_OnFixedUpdate: function(f) {
      return G.Game__SetStream(C.Event_3, f);
    },
    Game_OnUpdate: function(f) {
      return G.Game__SetStream(C.Event_4, f);
    },
    Game_OnLateUpdate: function(f) {
      return G.Game__SetStream(C.Event_5, f);
    },
    Game_OnEarlyRender: function(f) {
      return G.Game__SetStream(C.Event_6, f);
    },
    Game_OnRender: function(f) {
      return G.Game__SetStream(C.Event_7, f);
    },
    Game_OnLateRender: function(f) {
      return G.Game__SetStream(C.Event_8, f);
    },
    Game_OnGUI: function(f) {
      return G.Game__SetStream(C.Event_9, f);
    },
    Game_OnQuit: function(f) {
      return G.Game__SetStream(C.Event_10, f);
    },
    Game$: function(canvas, guiCanvas) {
      var t1 = new G.Game(canvas, guiCanvas);
      t1.Game$2(canvas, guiCanvas);
      return t1;
    },
    CursorData: function CursorData() {
    },
    Event0: function Event0(t0) {
      this._Game$_name = t0;
    },
    _GameUpdateEventEmitter: function _GameUpdateEventEmitter() {
    },
    _GameUpdateEventEmitter_SetStream_closure0: function _GameUpdateEventEmitter_SetStream_closure0(t0) {
      this.t = t0;
    },
    _GameUpdateEventEmitter_SetStream_closure: function _GameUpdateEventEmitter_SetStream_closure(t0, t1, t2) {
      this.e = t0;
      this.t = t1;
      this.f = t2;
    },
    _GameUpdateEventEmitter_Emit_closure: function _GameUpdateEventEmitter_Emit_closure(t0) {
      this.v = t0;
    },
    Game: function Game(t0, t1) {
      var _ = this;
      _.frame = 0;
      _.canvas = t0;
      _.context = null;
      _.guiCanvas = t1;
      _.guiContext = null;
    }
  },
  Y = {
    minimalApp$Injector: function($parent) {
      return Y._Injector$minimalApp$_(H.interceptedTypeCheck($parent, "$isInjector"));
    },
    _Injector$minimalApp$_: function($parent) {
      return new Y._Injector$minimalApp($parent == null ? C.EmptyInjector_null : $parent);
    },
    _Injector$minimalApp: function _Injector$minimalApp(t0) {
      var _ = this;
      _._field5 = _._field3 = _._field2 = _._field1 = _._field0 = null;
      _.parent = t0;
    },
    NgClass: function NgClass() {
    },
    LowerCasePipe: function LowerCasePipe() {
    },
    internalCreateApplicationRef: function(ngZone, injector) {
      return Y.ApplicationRef$_(ngZone, injector.provideType$1$1(C.Type_ExceptionHandler_qBE, U.ExceptionHandler), injector);
    },
    ApplicationRef$_: function(_ngZone, _exceptionHandler, _injector) {
      var t1 = new Y.ApplicationRef(H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]), H.setRuntimeTypeInfo([], [[D.ComponentRef, -1]]), _exceptionHandler, _injector, _ngZone, H.setRuntimeTypeInfo([], [S.ChangeDetectorRef]));
      t1.ApplicationRef$_$3(_ngZone, _exceptionHandler, _injector);
      return t1;
    },
    ApplicationRef: function ApplicationRef(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._disposeListeners = t0;
      _._rootComponents = t1;
      _._exceptionHandler = t2;
      _._injector = t3;
      _._ngZone = t4;
      _._lastCaughtTrace = _._lastCaughtException = _._lastGuardedView = null;
      _._runningTick = false;
      _._changeDetectors = t5;
    },
    ApplicationRef$__closure: function ApplicationRef$__closure(t0) {
      this.$this = t0;
    },
    ApplicationRef$__closure0: function ApplicationRef$__closure0(t0) {
      this.$this = t0;
    },
    ApplicationRef_bootstrap_closure: function ApplicationRef_bootstrap_closure(t0, t1, t2) {
      this.$this = t0;
      this.componentFactory = t1;
      this.T = t2;
    },
    ApplicationRef__loadedRootComponent_closure: function ApplicationRef__loadedRootComponent_closure(t0, t1, t2) {
      this.$this = t0;
      this.component = t1;
      this.node = t2;
    },
    NgZone_isInAngularZone: function() {
      return J.$index$asx(P.Zone_current(), $.$get$NgZone__anyZoneKey()) === true;
    },
    NgZone_assertNotInAngularZone: function() {
      if (H.boolConversionCheck(Y.NgZone_isInAngularZone()))
        throw H.wrapException(P.Exception_Exception("Expected to not be in Angular Zone, but it is!"));
    },
    NgZone_NgZone: function() {
      return H.boolConversionCheck(X.isDevMode()) && H.boolConversionCheck(U.debugAsyncStackTraces()) ? Y.NgZone$_debugAsyncStackTraces() : Y.NgZone$_();
    },
    NgZone$_: function() {
      var t1 = -1;
      t1 = new Y.NgZone(P.Object$(), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, Y.NgZoneError), H.setRuntimeTypeInfo([], [Y._WrappedTimer]));
      t1.NgZone$_$0();
      return t1;
    },
    NgZone$_debugAsyncStackTraces: function() {
      var t1 = -1;
      t1 = new Y.NgZone(P.Object$(), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, t1), P.StreamController_StreamController$broadcast(true, Y.NgZoneError), H.setRuntimeTypeInfo([], [Y._WrappedTimer]));
      t1.NgZone$_debugAsyncStackTraces$0();
      return t1;
    },
    _WrappedTimer$: function(_timer, _duration, _onCancel) {
      return new Y._WrappedTimer();
    },
    NgZoneError$: function(error, stackTrace) {
      return new Y.NgZoneError(error, stackTrace);
    },
    NgZone: function NgZone(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._thisZoneKey = t0;
      _._onTurnStart = t1;
      _._onMicrotaskEmpty = t2;
      _._onTurnDone = t3;
      _._ng_zone$_onError = t4;
      _._innerZone = _._outerZone = null;
      _._hasPendingMacrotasks = _._hasPendingMicrotasks = false;
      _._isStable = true;
      _._pendingMicrotasks = _._nesting = 0;
      _._pendingTimers = t5;
    },
    NgZone$_debugAsyncStackTraces_closure: function NgZone$_debugAsyncStackTraces_closure(t0) {
      this.$this = t0;
    },
    NgZone__scheduleMicrotask_closure: function NgZone__scheduleMicrotask_closure(t0, t1) {
      this.$this = t0;
      this.fn = t1;
    },
    NgZone__run_closure: function NgZone__run_closure(t0, t1, t2) {
      this.$this = t0;
      this.fn = t1;
      this.R = t2;
    },
    NgZone__runUnary_closure: function NgZone__runUnary_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.fn = t1;
      _.T = t2;
      _.R = t3;
    },
    NgZone__runBinary_closure: function NgZone__runBinary_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.fn = t1;
      _.T1 = t2;
      _.T2 = t3;
      _.R = t4;
    },
    NgZone__onErrorWithLongStackTrace_closure: function NgZone__onErrorWithLongStackTrace_closure() {
    },
    NgZone__createTimer_closure: function NgZone__createTimer_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    NgZone__createTimer_closure0: function NgZone__createTimer_closure0(t0, t1) {
      this.fn = t0;
      this.onDone = t1;
    },
    NgZone__checkStable_closure: function NgZone__checkStable_closure(t0) {
      this.$this = t0;
    },
    _WrappedTimer: function _WrappedTimer() {
    },
    NgZoneError: function NgZoneError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Transform$: function(gameObject) {
      return new Y.Transform0(V.Vector2$(null, null), V.Vector2_one());
    },
    Transform0: function Transform0(t0, t1) {
      this.position = t0;
      this.scale = t1;
    },
    Scene$: function() {
      var t1 = new Y.Scene(P.Random_Random(), H.setRuntimeTypeInfo([], [Q.Star]), M.Particles$(), K.Background$());
      t1.GameObject$0();
      return t1;
    },
    Scene: function Scene(t0, t1, t2, t3) {
      var _ = this;
      _.rand = t0;
      _.stars = t1;
      _.particles = t2;
      _.background = t3;
      _._QuitSubscription = _._GUISubscription = _._LateRenderSubscription = _._RenderSubscription = _._EarlyRenderSubscription = _._LateUpdateSubscription = _._UpdateSubscription = _._FixedUpdateSubscription = _._EarlyUpdateSubscription = _._StartSubscription = _._AwakeSubscription = null;
    },
    Scene_OnUpdate_closure: function Scene_OnUpdate_closure(t0, t1) {
      this.$this = t0;
      this.tbd = t1;
    },
    Scene_OnUpdate_closure0: function Scene_OnUpdate_closure0(t0) {
      this.$this = t0;
    },
    Scene_OnRender_closure: function Scene_OnRender_closure(t0) {
      this.ctx = t0;
    },
    PriorityQueue: function PriorityQueue() {
    },
    HeapPriorityQueue: function HeapPriorityQueue() {
    },
    UnionSetController: function UnionSetController() {
    },
    Level: function Level() {
    },
    Trace_Trace$from: function(trace) {
      if (trace == null)
        throw H.wrapException(P.ArgumentError$("Cannot create a Trace from null."));
      if (!!trace.$isTrace)
        return trace;
      if (!!trace.$isChain)
        return trace.toTrace$0();
      return T.LazyTrace$(new Y.Trace_Trace$from_closure(trace));
    },
    Trace_Trace$parse: function(trace) {
      var error, t1, exception;
      try {
        if (H.boolConversionCheck(J.get$isEmpty$asx(trace))) {
          t1 = Y.Trace$(H.setRuntimeTypeInfo([], [A.Frame]), null);
          return t1;
        }
        if (H.boolConversionCheck(J.contains$1$asx(trace, $.$get$_v8Trace()))) {
          t1 = Y.Trace$parseV8(trace);
          return t1;
        }
        if (H.boolConversionCheck(J.contains$1$asx(trace, "\tat "))) {
          t1 = Y.Trace$parseJSCore(trace);
          return t1;
        }
        if (H.boolConversionCheck(J.contains$1$asx(trace, $.$get$_firefoxSafariTrace()))) {
          t1 = Y.Trace$parseFirefox(trace);
          return t1;
        }
        if (H.boolConversionCheck(J.contains$1$asx(trace, "===== asynchronous gap ===========================\n"))) {
          t1 = U.Chain_Chain$parse(trace).toTrace$0();
          return t1;
        }
        if (H.boolConversionCheck(J.contains$1$asx(trace, $.$get$_friendlyTrace()))) {
          t1 = Y.Trace$parseFriendly(trace);
          return t1;
        }
        t1 = Y.Trace$parseVM(trace);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (t1 instanceof P.FormatException) {
          error = t1;
          throw H.wrapException(P.FormatException$(H.S(error.message) + "\nStack trace:\n" + H.S(trace), null, null));
        } else
          throw exception;
      }
    },
    Trace$parseVM: function(trace) {
      return new Y.Trace(P.List_List$unmodifiable(Y.Trace__parseVM(trace), A.Frame), P._StringStackTrace$(trace));
    },
    Trace__parseVM: function(trace) {
      var $frames,
        lines = J.split$1$s(J.replaceAll$2$s(J.trim$0$s(trace), "<asynchronous suspension>\n", ""), "\n"),
        t1 = J.getInterceptor$asx(lines),
        t2 = t1.get$length(lines);
      if (typeof t2 !== "number")
        return t2.$sub();
      $frames = J.toList$0$ax(J.map$1$1$ax(t1.take$1(lines, t2 - 1), new Y.Trace__parseVM_closure(), A.Frame));
      if (!H.boolConversionCheck(J.endsWith$1$s(t1.get$last(lines), ".da")))
        J.add$1$ax($frames, A.Frame_Frame$parseVM(t1.get$last(lines)));
      return $frames;
    },
    Trace$parseV8: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(J.skipWhile$1$ax(C.JSArray_methods.skip$1(H.setRuntimeTypeInfo(trace.split("\n"), [P.String]), 1), new Y.Trace$parseV8_closure()), new Y.Trace$parseV8_closure0(), t1), t1), P._StringStackTrace$(trace));
    },
    Trace$parseJSCore: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(C.JSArray_methods.where$1(H.setRuntimeTypeInfo(trace.split("\n"), [P.String]), new Y.Trace$parseJSCore_closure()), new Y.Trace$parseJSCore_closure0(), t1), t1), P._StringStackTrace$(trace));
    },
    Trace$parseFirefox: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(J.map$1$1$ax(J.where$1$ax(J.split$1$s(J.trim$0$s(trace), "\n"), new Y.Trace$parseFirefox_closure()), new Y.Trace$parseFirefox_closure0(), t1), t1), P._StringStackTrace$(trace));
    },
    Trace$parseFriendly: function(trace) {
      var t1 = A.Frame;
      return new Y.Trace(P.List_List$unmodifiable(H.boolConversionCheck(J.get$isEmpty$asx(trace)) ? H.setRuntimeTypeInfo([], [t1]) : J.map$1$1$ax(J.where$1$ax(J.split$1$s(C.JSString_methods.trim$0(trace), "\n"), new Y.Trace$parseFriendly_closure()), new Y.Trace$parseFriendly_closure0(), t1), t1), P._StringStackTrace$(trace));
    },
    Trace$: function($frames, original) {
      return new Y.Trace(P.List_List$unmodifiable($frames, A.Frame), P._StringStackTrace$(original));
    },
    Trace: function Trace(t0, t1) {
      this.frames = t0;
      this.original = t1;
    },
    Trace_Trace$from_closure: function Trace_Trace$from_closure(t0) {
      this.trace = t0;
    },
    Trace__parseVM_closure: function Trace__parseVM_closure() {
    },
    Trace$parseV8_closure: function Trace$parseV8_closure() {
    },
    Trace$parseV8_closure0: function Trace$parseV8_closure0() {
    },
    Trace$parseJSCore_closure: function Trace$parseJSCore_closure() {
    },
    Trace$parseJSCore_closure0: function Trace$parseJSCore_closure0() {
    },
    Trace$parseFirefox_closure: function Trace$parseFirefox_closure() {
    },
    Trace$parseFirefox_closure0: function Trace$parseFirefox_closure0() {
    },
    Trace$parseFriendly_closure: function Trace$parseFriendly_closure() {
    },
    Trace$parseFriendly_closure0: function Trace$parseFriendly_closure0() {
    },
    Trace_foldFrames_closure: function Trace_foldFrames_closure(t0) {
      this.oldPredicate = t0;
    },
    Trace_foldFrames_closure0: function Trace_foldFrames_closure0(t0) {
      this._box_0 = t0;
    },
    Trace_toString_closure0: function Trace_toString_closure0() {
    },
    Trace_toString_closure: function Trace_toString_closure(t0) {
      this.longest = t0;
    }
  },
  R = {NgFor: function NgFor() {
    }, _RecordViewTuple: function _RecordViewTuple() {
    }, DatePipe: function DatePipe() {
    }, DefaultIterableDiffer: function DefaultIterableDiffer() {
    }, CollectionChangeRecord: function CollectionChangeRecord() {
    }, _DuplicateItemRecordList: function _DuplicateItemRecordList() {
    }, _DuplicateMap: function _DuplicateMap() {
    }, ViewContainerRef: function ViewContainerRef() {
    }, EmptyInjector: function EmptyInjector(t0) {
      this.parent = t0;
    },
    DomSanitizationServiceImpl_DomSanitizationServiceImpl: function() {
      return C.C_DomSanitizationServiceImpl;
    },
    DomSanitizationServiceImpl: function DomSanitizationServiceImpl() {
    },
    SafeValueImpl: function SafeValueImpl() {
    },
    SafeHtmlImpl: function SafeHtmlImpl() {
    },
    SafeStyleImpl: function SafeStyleImpl() {
    },
    SafeUrlImpl: function SafeUrlImpl() {
    },
    SafeResourceUrlImpl: function SafeResourceUrlImpl() {
    },
    _NoInline: function _NoInline() {
    },
    _TryInline: function _TryInline() {
    }
  },
  K = {NgIf: function NgIf() {
    }, InvalidPipeArgumentException: function InvalidPipeArgumentException() {
    },
    TransitionalAppHost__createRootInjector: function() {
      var t1,
        registry = D.TestabilityRegistry$();
      registry.setTestabilityGetter$1(K.BrowserGetTestability$());
      t1 = P.Object;
      return A.MapInjector$(P.LinkedHashMap_LinkedHashMap$_literal([C.Type_TestabilityRegistry_IMm, registry], t1, t1));
    },
    TransitionalAppHost$_: function() {
      return new K.TransitionalAppHost(K.TransitionalAppHost__createRootInjector());
    },
    TransitionalAppHost: function TransitionalAppHost(t0) {
      this._hostInjector = t0;
    },
    BrowserGetTestability$: function() {
      return new K.BrowserGetTestability();
    },
    BrowserGetTestability: function BrowserGetTestability() {
    },
    BrowserGetTestability_addToWindow_closure: function BrowserGetTestability_addToWindow_closure() {
    },
    BrowserGetTestability_addToWindow_closure0: function BrowserGetTestability_addToWindow_closure0() {
    },
    BrowserGetTestability_addToWindow_closure1: function BrowserGetTestability_addToWindow_closure1(t0) {
      this.getAllAngularTestabilities = t0;
    },
    BrowserGetTestability_addToWindow__closure: function BrowserGetTestability_addToWindow__closure(t0, t1) {
      this._box_0 = t0;
      this.callback = t1;
    },
    BrowserGetTestability__createRegistry_closure: function BrowserGetTestability__createRegistry_closure(t0) {
      this.registry = t0;
    },
    BrowserGetTestability__createRegistry_closure0: function BrowserGetTestability__createRegistry_closure0(t0) {
      this.registry = t0;
    },
    BrowserGetTestability__createRegistry__closure: function BrowserGetTestability__createRegistry__closure() {
    },
    star$: function(position, size) {
      V.Vector2$(null, null);
      return new K.star(position, size);
    },
    Background$: function() {
      var t1 = new K.Background(H.setRuntimeTypeInfo([], [K.star]));
      t1.Background$0();
      return t1;
    },
    star: function star(t0, t1) {
      this.position = t0;
      this.size = t1;
      this.bloom = 5;
    },
    Background: function Background(t0) {
      this.stars = t0;
    },
    Background_Render_closure: function Background_Render_closure(t0) {
      this.ctx = t0;
    },
    PathMap: function PathMap() {
    }
  },
  X = {NgStyle: function NgStyle() {
    }, UninitializedLocaleData: function UninitializedLocaleData() {
    }, MessageLookup: function MessageLookup() {
    }, LocaleDataException: function LocaleDataException() {
    }, LocaleDataReader: function LocaleDataReader() {
    },
    ParsedPath_ParsedPath$parse: function(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path),
        isRootRelative = style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = [P.String];
      parts = H.setRuntimeTypeInfo([], t1);
      separators = H.setRuntimeTypeInfo([], t1);
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(path)) && H.boolConversionCheck(style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)))) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (t1 = path.length, i = start; i < t1; ++i)
        if (H.boolConversionCheck(style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i)))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return X.ParsedPath$_(style, root, isRootRelative, parts, separators);
    },
    ParsedPath$_: function(style, root, isRootRelative, parts, separators) {
      return new X.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    ParsedPath_normalize_closure: function ParsedPath_normalize_closure(t0) {
      this.$this = t0;
    },
    PathException$: function(message) {
      return new X.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    LazyChain$: function(_thunk) {
      return new X.LazyChain(_thunk);
    },
    LazyChain: function LazyChain(t0) {
      this._lazy_chain$_thunk = t0;
      this._lazy_chain$_inner = null;
    },
    LazyChain_toTrace_closure: function LazyChain_toTrace_closure(t0) {
      this.$this = t0;
    },
    _assertionsEnabled: function() {
      return false;
    },
    isDevMode: function() {
      return X._assertionsEnabled();
    },
    unsafeCast: function(any, $T) {
      return H.assertSubtypeOfRuntimeType(any, $T);
    }
  },
  V = {SwitchView: function SwitchView() {
    }, NgSwitch: function NgSwitch() {
    }, NgSwitchWhen: function NgSwitchWhen() {
    }, NgSwitchDefault: function NgSwitchDefault() {
    }, ViewContainer: function ViewContainer() {
    }, SafeHtml: function SafeHtml() {
    }, SafeStyle: function SafeStyle() {
    }, SafeUrl: function SafeUrl() {
    }, SafeResourceUrl: function SafeResourceUrl() {
    }, DomSanitizationService: function DomSanitizationService() {
    },
    Vector2_zero: function() {
      return V.Vector2$(0, 0);
    },
    Vector2_one: function() {
      return V.Vector2$(1, 1);
    },
    Vector2_right: function() {
      return V.Vector2$(1, 0);
    },
    Vector2_up: function() {
      return V.Vector2$(0, 1);
    },
    Vector2_InRect: function(width, height) {
      var t2,
        t1 = $.$get$_rand().nextDouble$0();
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof width !== "number")
        return H.iae(width);
      t2 = $.$get$_rand().nextDouble$0();
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof height !== "number")
        return H.iae(height);
      return V.Vector2$(t1 * width, t2 * height);
    },
    Vector2$: function(x, y) {
      var t1 = new V.Vector2();
      t1.Vector2$2(x, y);
      return t1;
    },
    Vector2$fromPoint: function(p) {
      var t1 = new V.Vector2();
      t1.Vector2$fromPoint$1(p);
      return t1;
    },
    Vector2: function Vector2() {
      this.y = this.x = null;
    },
    Vector3: function Vector3() {
    },
    Vector4: function Vector4() {
    },
    ViewAppComponent0$: function(parentView, parentIndex) {
      var t1 = new V.ViewAppComponent0(E._ComponentViewData__ComponentViewData(parentView, parentIndex, 3));
      t1.ViewAppComponent0$2(parentView, parentIndex);
      return t1;
    },
    ViewAppComponent0__debugComponentUrl: function() {
      return H.boolConversionCheck(X.isDevMode()) ? "asset:angular_app/lib/app_component.dart" : null;
    },
    AppComponentNgFactory: function() {
      return C.C_ComponentFactory;
    },
    _ViewAppComponentHost0$: function(injector) {
      return new V._ViewAppComponentHost0(injector, G._HostViewData$());
    },
    viewFactory_AppComponentHost0: function(injector) {
      return V._ViewAppComponentHost0$(H.interceptedTypeCheck(injector, "$isInjector"));
    },
    ViewAppComponent0: function ViewAppComponent0(t0) {
      var _ = this;
      _.rootElement = _.componentStyles = _._el_0 = null;
      _._data = t0;
    },
    _ViewAppComponentHost0: function _ViewAppComponentHost0(t0, t1) {
      var _ = this;
      _.componentView = _.component = null;
      _._host_view$_injector = t0;
      _._host_view$_data = t1;
    }
  },
  L = {NgTemplateOutlet: function NgTemplateOutlet() {
    }, JsonPipe: function JsonPipe() {
    }, SlowComponentLoader: function SlowComponentLoader() {
    }, ViewRef: function ViewRef() {
    }, EmbeddedViewRef: function EmbeddedViewRef() {
    }, Visibility: function Visibility() {
    },
    EventManager$: function(zone) {
      return new L.EventManager();
    },
    EventManager: function EventManager() {
    },
    _KeyEventsHandler: function _KeyEventsHandler() {
    },
    _ParsedEvent: function _ParsedEvent() {
    },
    CombinedMapView: function CombinedMapView() {
    },
    _DeduplicatingIterableView: function _DeduplicatingIterableView() {
    },
    _DeduplicatingIterator: function _DeduplicatingIterator() {
    },
    NonGrowableListView: function NonGrowableListView() {
    },
    NonGrowableListMixin: function NonGrowableListMixin() {
    },
    UnmodifiableSetView: function UnmodifiableSetView() {
    },
    UnmodifiableSetMixin: function UnmodifiableSetMixin() {
    },
    UnmodifiableMapMixin: function UnmodifiableMapMixin() {
    },
    _NonGrowableListView_DelegatingList_NonGrowableListMixin: function _NonGrowableListView_DelegatingList_NonGrowableListMixin() {
    },
    _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: function _UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin() {
    },
    LogRecord: function LogRecord() {
    },
    WindowsStyle$: function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]", false), P.RegExp_RegExp("[^/\\\\]$", false), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", false), P.RegExp_RegExp("^[/\\\\](?![/\\\\])", false));
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    }
  },
  B = {_ObservableStrategy: function _ObservableStrategy() {
    }, _PromiseStrategy: function _PromiseStrategy() {
    }, AsyncPipe: function AsyncPipe() {
    }, UpperCasePipe: function UpperCasePipe() {
    }, Inject: function Inject() {
    }, Injectable: function Injectable() {
    }, Optional: function Optional() {
    }, Self: function Self() {
    }, SkipSelf: function SkipSelf() {
    }, Host: function Host() {
    }, DynamicView: function DynamicView() {
    }, DynamicViewData: function DynamicViewData() {
    }, ReflectiveInjector: function ReflectiveInjector() {
    }, _RuntimeInjector: function _RuntimeInjector() {
    }, _FlatProviders: function _FlatProviders() {
    }, ChangeDetectionPerfRecord: function ChangeDetectionPerfRecord() {
    }, AngularTools: function AngularTools() {
    }, AngularProfiler: function AngularProfiler() {
    }, CombinedListView: function CombinedListView() {
    }, Pair: function Pair() {
    }, DateSymbols: function DateSymbols() {
    }, NumberSymbols: function NumberSymbols() {
    }, CompactNumberSymbols: function CompactNumberSymbols() {
    }, InternalStyle: function InternalStyle() {
    }, PathSet: function PathSet() {
    },
    isAlphabetic: function(char) {
      var t1;
      if (typeof char !== "number")
        return char.$ge();
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter: function(path, index) {
      var t2,
        t1 = path.length;
      if (typeof index !== "number")
        return index.$add();
      t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!H.boolConversionCheck(B.isAlphabetic(J.getInterceptor$s(path).codeUnitAt$1(path, index))))
        return false;
      if (!H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(path, index + 1), 58)))
        return false;
      if (t1 === t2)
        return true;
      return J.$eq$(C.JSString_methods.codeUnitAt$1(path, t2), 47);
    }
  },
  D = {_NumberPipe: function _NumberPipe() {
    }, DecimalPipe: function DecimalPipe() {
    }, PercentPipe: function PercentPipe() {
    }, CurrencyPipe: function CurrencyPipe() {
    }, _NumberFormatStyle: function _NumberFormatStyle() {
    },
    ComponentRef$: function(_hostView, _nativeElement, _component, $C) {
      return new D.ComponentRef(_hostView, _nativeElement, [$C]);
    },
    ComponentRef: function ComponentRef(t0, t1, t2) {
      this._hostView = t0;
      this._nativeElement = t1;
      this.$ti = t2;
    },
    ComponentFactory: function ComponentFactory(t0) {
      this.$ti = t0;
    },
    TemplateRef: function TemplateRef() {
    },
    ViewFragment_ViewFragment: function(nodesOrViewContainers) {
      return D.ViewFragment$_(nodesOrViewContainers);
    },
    ViewFragment$_: function(_nodesOrViewContainers) {
      return new D.ViewFragment();
    },
    ViewFragment: function ViewFragment() {
    },
    Testability$: function(_ngZone) {
      var t1 = new D.Testability(_ngZone, H.setRuntimeTypeInfo([], [P.Function]));
      t1.Testability$1(_ngZone);
      return t1;
    },
    TestabilityRegistry$: function() {
      return new D.TestabilityRegistry(H.JsLinkedHashMap_JsLinkedHashMap$es6(null, D.Testability), D._NoopGetTestability$());
    },
    _NoopGetTestability$: function() {
      return new D._NoopGetTestability();
    },
    Testability: function Testability(t0, t1) {
      var _ = this;
      _._testability$_ngZone = t0;
      _._isZoneStable = true;
      _._didWork = false;
      _._callbacks = t1;
    },
    Testability__watchAngularEvents_closure: function Testability__watchAngularEvents_closure(t0) {
      this.$this = t0;
    },
    Testability__watchAngularEvents_closure0: function Testability__watchAngularEvents_closure0(t0) {
      this.$this = t0;
    },
    Testability__watchAngularEvents__closure: function Testability__watchAngularEvents__closure(t0) {
      this.$this = t0;
    },
    Testability__watchAngularEvents___closure: function Testability__watchAngularEvents___closure(t0) {
      this.$this = t0;
    },
    Testability__runCallbacksIfReady_closure: function Testability__runCallbacksIfReady_closure(t0) {
      this.$this = t0;
    },
    TestabilityRegistry: function TestabilityRegistry(t0, t1) {
      this._applications = t0;
      this._testabilityGetter = t1;
    },
    GetTestability: function GetTestability() {
    },
    _NoopGetTestability: function _NoopGetTestability() {
    },
    current: function() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = P.Uri_base();
      } catch (exception) {
        if (!!J.getInterceptor$(H.unwrapException(exception)).$isException) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (H.boolConversionCheck(J.$eq$(uri, $._currentUriBase)))
        return $._current;
      $._currentUriBase = uri;
      if (H.boolConversionCheck(J.$eq$($.$get$Style_platform(), $.$get$Style_url())))
        return $._current = J.toString$0$(uri.resolve$1("."));
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        return $._current = lastIndex === 0 ? path : J.substring$2$s(path, 0, lastIndex);
      }
    },
    absolute: function(part1) {
      return J.absolute$7$z($.$get$context(), part1, null, null, null, null, null, null);
    },
    fromUri: function(uri) {
      return $.$get$context().fromUri$1(uri);
    },
    toUri: function(path) {
      return $.$get$context().toUri$1(path);
    },
    prettyUri: function(uri) {
      return $.$get$context().prettyUri$1(uri);
    }
  },
  M = {ReplacePipe: function ReplacePipe() {
    },
    ChangeDetectionHost_checkForCrashes: function() {
      var t1 = $.ChangeDetectionHost__current;
      return (t1 == null ? null : t1._lastGuardedView) != null;
    },
    ChangeDetectionHost_handleCrash: function(view, error, trace) {
      var current = $.ChangeDetectionHost__current;
      current._lastGuardedView = view;
      current._lastCaughtException = error;
      current._lastCaughtTrace = trace;
    },
    ChangeDetectionHost: function ChangeDetectionHost() {
    },
    ChangeDetectionHost_run_closure: function ChangeDetectionHost_run_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.callback = t2;
      _.completer = t3;
      _.R = t4;
    },
    ChangeDetectionHost_run__closure: function ChangeDetectionHost_run__closure(t0, t1) {
      this.completer = t0;
      this.R = t1;
    },
    ChangeDetectionHost_run__closure0: function ChangeDetectionHost_run__closure0(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    ComponentLoader$: function() {
      return new M.ComponentLoader();
    },
    ComponentLoader: function ComponentLoader() {
    },
    Typed: function Typed() {
    },
    throwsNotFound: function(injector, token) {
      throw H.wrapException(A.noProviderError(token));
    },
    Injector: function Injector() {
    },
    GenerateInjector: function GenerateInjector() {
    },
    Particle$: function(lifetime, position, velocity) {
      var t1, _null = null;
      V.Vector2$(_null, _null);
      V.Vector2$(_null, _null);
      t1 = new M.Particle(position, velocity, lifetime);
      t1.Particle$4$lifetime$position$size$velocity(lifetime, position, 5, velocity);
      return t1;
    },
    Particles$: function() {
      return new M.Particles(P.Random_Random(), H.setRuntimeTypeInfo([], [M.Particle]));
    },
    Particle: function Particle(t0, t1, t2) {
      var _ = this;
      _._startLifetime = null;
      _.position = t0;
      _.velocity = t1;
      _.lifetime = t2;
    },
    Particles: function Particles(t0, t1) {
      this.rand = t0;
      this.active = t1;
    },
    Particles_Update_closure: function Particles_Update_closure(t0) {
      this.tbd = t0;
    },
    Particles_Update_closure0: function Particles_Update_closure0(t0) {
      this.$this = t0;
    },
    Particles_Render_closure: function Particles_Render_closure(t0) {
      this.ctx = t0;
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    UnionSet: function UnionSet() {
    },
    _UnionSet_SetBase_UnmodifiableSetMixin: function _UnionSet_SetBase_UnmodifiableSetMixin() {
    },
    _DelegatingIterableBase: function _DelegatingIterableBase() {
    },
    DelegatingIterable: function DelegatingIterable() {
    },
    DelegatingList: function DelegatingList() {
    },
    DelegatingSet: function DelegatingSet() {
    },
    DelegatingQueue: function DelegatingQueue() {
    },
    DelegatingMap: function DelegatingMap() {
    },
    MapKeySet: function MapKeySet() {
    },
    MapValueSet: function MapValueSet() {
    },
    _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin: function _MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin() {
    },
    createInternal: function() {
      return M.Context$_internal();
    },
    Context_Context: function(style) {
      var current = style == null ? D.current() : ".";
      if (style == null)
        style = $.$get$Style_platform();
      return M.Context$_(style, current);
    },
    Context$_internal: function() {
      return new M.Context(H.interceptedTypeCast($.$get$Style_platform(), "$isInternalStyle"), null);
    },
    Context$_: function(style, _current) {
      return new M.Context(style, _current);
    },
    _parseUri: function(uri) {
      if (typeof uri === "string")
        return P.Uri_parse(uri);
      if (!!J.getInterceptor$(uri).$isUri)
        return uri;
      throw H.wrapException(P.ArgumentError$value(uri, "uri", "Value must be a String or a Uri"));
    },
    _validateArgList: function(method, args) {
      var t2, numArgs, numArgs0, message,
        t1 = J.getInterceptor$asx(args),
        i = 1;
      while (true) {
        t2 = t1.get$length(args);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          if (t1.$index(args, i) == null || t1.$index(args, i - 1) != null)
            break c$0;
          numArgs = t1.get$length(args);
          while (true) {
            if (typeof numArgs !== "number")
              return numArgs.$ge();
            if (!(numArgs >= 1))
              break;
            numArgs0 = numArgs - 1;
            if (t1.$index(args, numArgs0) != null)
              break;
            numArgs = numArgs0;
          }
          message = P.StringBuffer$("");
          message.write$1(0, H.S(method) + "(");
          message.write$1(0, J.join$1$ax(J.map$1$1$ax(t1.take$1(args, numArgs), new M._validateArgList_closure(), P.String), ", "));
          message.write$1(0, "): part " + (i - 1) + " was null, but part " + i + " was not.");
          throw H.wrapException(P.ArgumentError$(message.toString$0(0)));
        }
        ++i;
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_join_closure: function Context_join_closure() {
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    _PathDirection: function _PathDirection() {
    },
    _PathRelation: function _PathRelation() {
    }
  },
  T = {SlicePipe: function SlicePipe() {
    },
    BrowserExceptionHandler$: function() {
      return new T.BrowserExceptionHandler();
    },
    BrowserExceptionHandler: function BrowserExceptionHandler() {
    },
    Intl: function Intl() {
    },
    BidiFormatter: function BidiFormatter() {
    },
    TextDirection: function TextDirection() {
    },
    Bidi: function Bidi() {
    },
    _CompactStyleBase: function _CompactStyleBase() {
    },
    _CompactStyleWithNegative: function _CompactStyleWithNegative() {
    },
    _CompactStyle: function _CompactStyle() {
    },
    _CompactFormatType: function _CompactFormatType() {
    },
    _CompactNumberFormat: function _CompactNumberFormat() {
    },
    DateFormat: function DateFormat() {
    },
    _DateFormatField: function _DateFormatField() {
    },
    _DateFormatLiteralField: function _DateFormatLiteralField() {
    },
    _DateFormatQuotedField: function _DateFormatQuotedField() {
    },
    _LoosePatternField: function _LoosePatternField() {
    },
    _DateFormatPatternField: function _DateFormatPatternField() {
    },
    _DateBuilder: function _DateBuilder() {
    },
    _Stream: function _Stream() {
    },
    NumberFormat: function NumberFormat() {
    },
    _NumberParser: function _NumberParser() {
    },
    _NumberFormatParser: function _NumberFormatParser() {
    },
    _StringIterable: function _StringIterable() {
    },
    _StringIterator: function _StringIterator() {
    },
    MicroMoney: function MicroMoney() {
    },
    _MicroMoney: function _MicroMoney() {
    },
    LazyTrace$: function(_thunk) {
      return new T.LazyTrace(_thunk);
    },
    LazyTrace: function LazyTrace(t0) {
      this._thunk = t0;
      this._inner = null;
    },
    LazyTrace_foldFrames_closure: function LazyTrace_foldFrames_closure(t0, t1, t2) {
      this.$this = t0;
      this.predicate = t1;
      this.terse = t2;
    },
    updateClassBinding: function(element, className, isAdd) {
      var t1 = J.getInterceptor$x(element);
      if (H.boolConversionCheck(isAdd))
        J.add$1$ax(t1.get$classes(element), className);
      else
        J.remove$1$ax(t1.get$classes(element), className);
    },
    setAttribute: function(element, attribute, value) {
      J.setAttribute$2$x(element, attribute, value);
    },
    appendElement: function(doc, $parent, tagName) {
      return X.unsafeCast(J.append$1$x($parent, J.createElement$1$x(doc, tagName)), W.Element);
    }
  },
  A = {_DevModeEquality: function _DevModeEquality() {
    }, SimpleChange: function SimpleChange() {
    }, ChangeDetectorState: function ChangeDetectorState() {
    }, ChangeDetectionStrategy: function ChangeDetectionStrategy() {
    }, ChangeDetectionCheckedState: function ChangeDetectionCheckedState() {
    }, RenderView: function RenderView() {
    }, RenderViewData: function RenderViewData() {
    }, View: function View() {
    }, ViewData: function ViewData() {
    }, ViewEncapsulation: function ViewEncapsulation() {
    },
    debugInjectorEnter: function(token) {
      var t1;
      if (H.boolConversionCheck(X.isDevMode())) {
        t1 = $._tokenStack;
        if (t1 == null)
          $._tokenStack = H.setRuntimeTypeInfo([token], [P.Object]);
        else
          J.add$1$ax(t1, token);
      }
    },
    debugInjectorLeave: function(token) {
      if (H.boolConversionCheck(X.isDevMode()))
        J.removeLast$0$ax($._tokenStack);
    },
    noProviderError: function(token) {
      var error;
      if (H.boolConversionCheck(X.isDevMode())) {
        error = A.NoProviderError$_(token, $._tokenStack);
        $._tokenStack = null;
        return error;
      }
      return P.ArgumentError$(A._noProviderError(token));
    },
    _noProviderError: function(token) {
      return "No provider found for " + H.S(token);
    },
    NoProviderError__withAdjacentDeduped: function(input, token) {
      var output, lastElement, t1, element;
      if (input == null)
        return C.List_empty;
      output = H.setRuntimeTypeInfo([], [P.Object]);
      lastElement = P.Object$();
      for (t1 = J.get$iterator$ax(input); H.boolConversionCheck(t1.moveNext$0());) {
        element = J.get$current$z(t1);
        if (lastElement == null ? element != null : lastElement !== element) {
          C.JSArray_methods.add$1(output, element);
          lastElement = element;
        }
      }
      if (H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(output))) {
        if (0 >= output.length)
          return H.ioore(output, -1);
        output.pop();
      }
      return output;
    },
    NoProviderError$_: function(token, stack) {
      return new A.NoProviderError(token, A.NoProviderError__withAdjacentDeduped(stack, token), null);
    },
    InjectionError: function InjectionError() {
    },
    NoProviderError: function NoProviderError(t0, t1, t2) {
      this.token = t0;
      this.path = t1;
      this.message = t2;
    },
    MapInjector$: function(_providers) {
      return new A.MapInjector(_providers, C.EmptyInjector_null);
    },
    MapInjector: function MapInjector(t0, t1) {
      this._map$_providers = t0;
      this.parent = t1;
    },
    Mouse$_: function() {
      var t1 = new A.Mouse();
      t1.GameObject$0();
      return t1;
    },
    Mouse_Create: function() {
      if ($.Mouse__Instance == null)
        $.Mouse__Instance = A.Mouse$_();
      J.get$onMouseMove$x(W.window()).listen$1(A.Input_Mouse__UpdateMousePosition$closure());
      J.get$onMouseUp$x(W.window()).listen$1(new A.Mouse_Create_closure());
      J.get$onMouseDown$x(W.window()).listen$1(new A.Mouse_Create_closure0());
      G.Game_OnLateUpdate(A.Input_Mouse__Clear$closure());
      return $.Mouse__Instance;
    },
    Mouse__Clear: function() {
      V.Vector2_zero();
      var t1 = P.bool;
      $.Mouse__pressed = P.List_List$filled(5, false, t1);
      $.Mouse__released = P.List_List$filled(5, false, t1);
    },
    Mouse__UpdateMouseButtons: function(state, evt) {
      var button = evt.button;
      if (H.boolConversionCheck(J.$index$asx($.$get$Mouse__buttons(), button)) && !H.boolConversionCheck(state))
        J.$indexSet$ax($.$get$Mouse__released(), button, true);
      if (!H.boolConversionCheck(J.$index$asx($.$get$Mouse__buttons(), button)) && H.boolConversionCheck(state))
        J.$indexSet$ax($.$get$Mouse__pressed(), button, true);
      J.$indexSet$ax($.$get$Mouse__buttons(), button, state);
    },
    Mouse__UpdateMousePosition: function(evt) {
      var t1;
      H.interceptedTypeCheck(evt, "$isMouseEvent");
      t1 = J.getInterceptor$x(evt);
      V.Vector2$fromPoint(t1.get$page(evt));
      V.Vector2$fromPoint(t1.get$movement(evt));
    },
    Keyboard$: function() {
      var t1 = P.bool;
      t1 = new A.Keyboard(P.List_List$filled(256, false, t1), P.List_List$filled(256, false, t1), P.List_List$filled(256, false, t1));
      t1.GameObject$0();
      return t1;
    },
    Keyboard_CreateKeyboard: function() {
      var t1 = $.Keyboard_Instance;
      if (t1 != null)
        return t1;
      $.Keyboard_Instance = A.Keyboard$();
      J.get$onKeyUp$x(W.window()).listen$1(new A.Keyboard_CreateKeyboard_closure());
      J.get$onKeyDown$x(W.window()).listen$1(new A.Keyboard_CreateKeyboard_closure0());
      J.get$onKeyPress$x(W.window()).listen$1(new A.Keyboard_CreateKeyboard_closure1());
      return $.Keyboard_Instance;
    },
    Input$_: function() {
      var t1 = new A.Input();
      t1.Input$_$0();
      return t1;
    },
    Input__UpdateData: function() {
      var t1,
        input = V.Vector2$(null, null);
      if (H.boolConversionCheck(A.Input_GetKey(C.KeyCode_53))) {
        t1 = input.y;
        if (typeof t1 !== "number")
          return t1.$add();
        input.y = t1 + -1;
      }
      if (H.boolConversionCheck(A.Input_GetKey(C.KeyCode_49))) {
        t1 = input.y;
        if (typeof t1 !== "number")
          return t1.$add();
        input.y = t1 + 1;
      }
      if (H.boolConversionCheck(A.Input_GetKey(C.KeyCode_31))) {
        t1 = input.x;
        if (typeof t1 !== "number")
          return t1.$add();
        input.x = t1 + -1;
      }
      if (H.boolConversionCheck(A.Input_GetKey(C.KeyCode_34))) {
        t1 = input.x;
        if (typeof t1 !== "number")
          return t1.$add();
        input.x = t1 + 1;
      }
    },
    Input_GetKey: function(key) {
      return J.$index$asx($.$get$Input__instance().keyboard._Input$_data, A.KeyExtention_get_Code(key));
    },
    Input_Initialize: function() {
      return $.$get$Input__instance();
    },
    KeyExtention_get_Code: function(_this) {
      return J.$index$asx($.KeyExtention_codes, _this.index);
    },
    CursorType: function CursorType() {
    },
    _Cursor: function _Cursor() {
    },
    Mouse: function Mouse() {
      var _ = this;
      _._QuitSubscription = _._GUISubscription = _._LateRenderSubscription = _._RenderSubscription = _._EarlyRenderSubscription = _._LateUpdateSubscription = _._UpdateSubscription = _._FixedUpdateSubscription = _._EarlyUpdateSubscription = _._StartSubscription = _._AwakeSubscription = null;
    },
    Mouse_Create_closure: function Mouse_Create_closure() {
    },
    Mouse_Create_closure0: function Mouse_Create_closure0() {
    },
    Keyboard: function Keyboard(t0, t1, t2) {
      var _ = this;
      _._Input$_data = t0;
      _.pressed = t1;
      _.released = t2;
      _._QuitSubscription = _._GUISubscription = _._LateRenderSubscription = _._RenderSubscription = _._EarlyRenderSubscription = _._LateUpdateSubscription = _._UpdateSubscription = _._FixedUpdateSubscription = _._EarlyUpdateSubscription = _._StartSubscription = _._AwakeSubscription = null;
    },
    Keyboard_CreateKeyboard_closure: function Keyboard_CreateKeyboard_closure() {
    },
    Keyboard_CreateKeyboard_closure0: function Keyboard_CreateKeyboard_closure0() {
    },
    Keyboard_CreateKeyboard_closure1: function Keyboard_CreateKeyboard_closure1() {
    },
    Input: function Input() {
      this.keyboard = null;
    },
    MouseButton: function MouseButton() {
    },
    KeyCode0: function KeyCode0(t0, t1) {
      this.index = t0;
      this._Input$_name = t1;
    },
    IterableZip: function IterableZip() {
    },
    _IteratorZip: function _IteratorZip() {
    },
    Frame_Frame$parseVM: function(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseVM_closure(frame));
    },
    Frame_Frame$parseV8: function(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseV8_closure(frame));
    },
    Frame_Frame$parseFirefox: function(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFirefox_closure(frame));
    },
    Frame_Frame$parseFriendly: function(frame) {
      return A.Frame__catchFormatException(frame, new A.Frame_Frame$parseFriendly_closure(frame));
    },
    Frame__uriOrPathToUri: function(uriOrPath) {
      if (H.boolConversionCheck(J.getInterceptor$asx(uriOrPath).contains$1(uriOrPath, $.$get$Frame__uriRegExp())))
        return P.Uri_parse(uriOrPath);
      else if (H.boolConversionCheck(C.JSString_methods.contains$1(uriOrPath, $.$get$Frame__windowsRegExp())))
        return P._Uri__Uri$file(uriOrPath, true);
      else if (H.boolConversionCheck(C.JSString_methods.startsWith$1(uriOrPath, "/")))
        return P._Uri__Uri$file(uriOrPath, false);
      if (H.boolConversionCheck(C.JSString_methods.contains$1(uriOrPath, "\\")))
        return $.$get$windows().toUri$1(uriOrPath);
      return P.Uri_parse(uriOrPath);
    },
    Frame__catchFormatException: function(text, body) {
      var t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.FormatException)
          return N.UnparsedFrame$(text);
        else
          throw exception;
      }
    },
    Frame$: function(uri, line, column, member) {
      return new A.Frame(uri, line, column, member);
    },
    Frame: function Frame(t0, t1, t2, t3) {
      var _ = this;
      _.uri = t0;
      _.line = t1;
      _.column = t2;
      _.member = t3;
    },
    Frame_Frame$parseVM_closure: function Frame_Frame$parseVM_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure: function Frame_Frame$parseV8_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseV8_closure_parseLocation: function Frame_Frame$parseV8_closure_parseLocation(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFirefox_closure: function Frame_Frame$parseFirefox_closure(t0) {
      this.frame = t0;
    },
    Frame_Frame$parseFriendly_closure: function Frame_Frame$parseFriendly_closure(t0) {
      this.frame = t0;
    }
  },
  S = {ChangeDetectorRef: function ChangeDetectorRef() {
    }, OpaqueToken: function OpaqueToken(t0) {
      this.$ti = t0;
    }, MultiToken: function MultiToken() {
    }, CombinedIterableView: function CombinedIterableView() {
    }, _CombinedIterator: function _CombinedIterator() {
    }},
  N = {ComponentState: function ComponentState() {
    }, DefaultKeyValueDiffer: function DefaultKeyValueDiffer() {
    }, KeyValueChangeRecord: function KeyValueChangeRecord() {
    }, AfterChanges: function AfterChanges() {
    }, OnInit: function OnInit() {
    }, OnDestroy: function OnDestroy() {
    }, DoCheck: function DoCheck() {
    }, AfterContentInit: function AfterContentInit() {
    }, AfterContentChecked: function AfterContentChecked() {
    }, AfterViewInit: function AfterViewInit() {
    }, AfterViewChecked: function AfterViewChecked() {
    },
    GameObject_destroy: function(obj) {
      var t1 = obj._AwakeSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._StartSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._EarlyUpdateSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._FixedUpdateSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._UpdateSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._LateUpdateSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._EarlyRenderSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._RenderSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._LateRenderSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._GUISubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
      t1 = obj._QuitSubscription;
      if (t1 != null)
        J.cancel$0$z(t1);
    },
    GameObject: function GameObject() {
    },
    GameObject__Wrap_closure: function GameObject__Wrap_closure(t0, t1) {
      this.$this = t0;
      this.func = t1;
    },
    Time_DeltaTime: function() {
      return $.Time__deltaTime;
    },
    Time_Update: function(currentTime) {
      var t1, diff;
      if (currentTime == null)
        return;
      t1 = $.Time__lastTime;
      if (typeof t1 !== "number")
        return H.iae(t1);
      diff = (currentTime - t1) / 1000;
      t1 = $.Time__totalTime;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Time__totalTime = t1 + diff;
      $.Time__deltaTime = diff;
      t1 = $.Time__scaledTotal;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Time__scaledTotal = t1 + diff;
      $.Time__lastTime = currentTime;
    },
    Time: function Time() {
    },
    EqualityMap: function EqualityMap() {
    },
    UnparsedFrame$: function(member) {
      return new N.UnparsedFrame(P._Uri__Uri(null, "unparsed", null, null), member);
    },
    UnparsedFrame: function UnparsedFrame(t0, t1) {
      this.uri = t0;
      this.member = t1;
    }
  },
  E = {PipeTransform: function PipeTransform() {
    },
    _ComponentViewData__ComponentViewData: function(parentView, parentIndex, changeDetectionMode) {
      return E._ComponentViewData$_(parentView, parentIndex, changeDetectionMode);
    },
    _ComponentViewData$_: function(parentView, parentIndex, _changeDetectionMode) {
      return new E._ComponentViewData(parentView, parentIndex, _changeDetectionMode);
    },
    ComponentView: function ComponentView() {
    },
    _ComponentViewData: function _ComponentViewData(t0, t1, t2) {
      var _ = this;
      _.parentView = t0;
      _.parentIndex = t1;
      _._changeDetectionMode = t2;
      _._changeDetectorState = 0;
      _._shouldSkipChangeDetection = false;
    },
    EmbeddedView: function EmbeddedView() {
    },
    _EmbeddedViewData: function _EmbeddedViewData() {
    },
    TemplateSecurityContext: function TemplateSecurityContext() {
    },
    SanitizationService: function SanitizationService() {
    },
    SafeValue: function SafeValue() {
    },
    HierarchicalInjector: function HierarchicalInjector() {
    },
    EqualitySet: function EqualitySet() {
    },
    PluralCase: function PluralCase() {
    },
    PosixStyle$: function() {
      return new E.PosixStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("[^/]$", false), P.RegExp_RegExp("^/", false));
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    }
  },
  Q = {
    AppViewUtils$: function(appId, sanitizer, eventManager) {
      return new Q.AppViewUtils(appId, sanitizer);
    },
    AppViewUtils: function AppViewUtils(t0, t1) {
      this.appId = t0;
      this.sanitizer = t1;
    },
    RuntimeInjectorBuilder: function RuntimeInjectorBuilder() {
    },
    Provider: function Provider() {
    },
    ClassProvider: function ClassProvider() {
    },
    ExistingProvider: function ExistingProvider() {
    },
    FactoryProvider: function FactoryProvider() {
    },
    ValueProvider: function ValueProvider() {
    },
    Star$: function() {
      return new Q.Star(V.Vector2$(null, null), V.Vector2$(0, 0.1));
    },
    Star: function Star(t0, t1) {
      this.position = t0;
      this.velocity = t1;
      this.size = 20;
    },
    AppComponent$: function() {
      return new Q.AppComponent();
    },
    AppComponent: function AppComponent() {
      this.guiCanvas = this.canvas = null;
    },
    AppComponent_ngOnInit_closure: function AppComponent_ngOnInit_closure(t0) {
      this.$this = t0;
    },
    QueueList: function QueueList() {
    },
    _CastQueueList: function _CastQueueList() {
    },
    _QueueList_Object_ListMixin: function _QueueList_Object_ListMixin() {
    },
    JS: function JS() {
    },
    _Anonymous: function _Anonymous() {
    },
    Immutable: function Immutable() {
    },
    Required: function Required() {
    },
    _AlwaysThrows: function _AlwaysThrows() {
    },
    _Checked: function _Checked() {
    },
    _Experimental: function _Experimental() {
    },
    _Factory: function _Factory() {
    },
    _IsTest: function _IsTest() {
    },
    _IsTestGroup: function _IsTestGroup() {
    },
    _Literal: function _Literal() {
    },
    _MustCallSuper: function _MustCallSuper() {
    },
    _NonVirtual: function _NonVirtual() {
    },
    _OptionalTypeArgs: function _OptionalTypeArgs() {
    },
    _Protected: function _Protected() {
    },
    _Sealed: function _Sealed() {
    },
    _Virtual: function _Virtual() {
    },
    _VisibleForOverriding: function _VisibleForOverriding() {
    },
    _VisibleForTesting: function _VisibleForTesting() {
    },
    VMTrace: function VMTrace() {
    }
  },
  Z = {ElementRef: function ElementRef() {
    }},
  O = {
    ComponentStyles$_: function(_styles, _componentUrl, _componentId, contentPrefix, hostPrefix) {
      var t1 = new O.ComponentStyles(_componentUrl, _styles, _componentId, contentPrefix, hostPrefix);
      t1.ComponentStyles$_$5(_styles, _componentUrl, _componentId, contentPrefix, hostPrefix);
      return t1;
    },
    ComponentStyles_ComponentStyles$scoped: function(styles, componentUrl) {
      var componentId,
        t1 = H.S($.appViewUtils.appId) + "-",
        t2 = $.ComponentStyles__nextUniqueId;
      if (typeof t2 !== "number")
        return t2.$add();
      $.ComponentStyles__nextUniqueId = t2 + 1;
      componentId = t1 + H.S(t2);
      return O.ComponentStyles$_(styles, componentUrl, componentId, "_ngcontent-" + componentId, "_nghost-" + componentId);
    },
    _flattenStyles: function(styles, target, componentId) {
      var t1, l, t2, t3, i, styleOrList;
      if (styles == null || H.boolConversionCheck(J.get$isEmpty$asx(styles)))
        return target;
      t1 = J.getInterceptor$asx(styles);
      l = t1.get$length(styles);
      if (typeof l !== "number")
        return H.iae(l);
      t2 = P.String;
      t3 = J.getInterceptor$ax(target);
      i = 0;
      for (; i < l; ++i) {
        styleOrList = t1.$index(styles, i);
        if (!!J.getInterceptor$(styleOrList).$isList)
          O._flattenStyles(styleOrList, target, componentId);
        else
          t3.add$1(target, J.replaceAll$2$s(X.unsafeCast(styleOrList, t2), $.$get$_idPlaceholder(), componentId));
      }
      return target;
    },
    ComponentStyles: function ComponentStyles(t0, t1, t2, t3, t4) {
      var _ = this;
      _._componentUrl = t0;
      _._styles = t1;
      _._componentId = t2;
      _.contentPrefix = t3;
      _.hostPrefix = t4;
    },
    _UnscopedComponentStyles: function _UnscopedComponentStyles() {
    },
    Directive: function Directive() {
    },
    Component: function Component() {
    },
    Pipe: function Pipe() {
    },
    Attribute: function Attribute() {
    },
    _Query: function _Query() {
    },
    ContentChildren: function ContentChildren() {
    },
    ContentChild: function ContentChild() {
    },
    _ViewQuery: function _ViewQuery() {
    },
    ViewChildren: function ViewChildren() {
    },
    ViewChild: function ViewChild() {
    },
    Input0: function Input0() {
    },
    Output: function Output() {
    },
    HostBinding: function HostBinding() {
    },
    HostListener: function HostListener() {
    },
    EmptyUnmodifiableSet: function EmptyUnmodifiableSet() {
    },
    Style__getPlatformStyle: function() {
      if (!H.boolConversionCheck(J.$eq$(P.Uri_base().get$scheme(), "file")))
        return $.$get$Style_url();
      if (!H.boolConversionCheck(J.endsWith$1$s(J.get$path$z(P.Uri_base()), "/")))
        return $.$get$Style_url();
      if (H.boolConversionCheck(J.$eq$(P._Uri__Uri(null, "a/b", null, null).toFilePath$0(), "a\\b")))
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    StackZoneSpecification$: function(_onError, errorZone) {
      return new O.StackZoneSpecification(P.Expando$("stack chains", O._Node), _onError, errorZone);
    },
    _Node$: function(trace, previous) {
      return new O._Node(Y.Trace_Trace$from(trace), previous);
    },
    StackZoneSpecification: function StackZoneSpecification(t0, t1, t2) {
      var _ = this;
      _._chains = t0;
      _._stack_zone_specification$_onError = t1;
      _._currentNode = null;
      _._errorZone = t2;
    },
    StackZoneSpecification_chainFor_closure: function StackZoneSpecification_chainFor_closure(t0) {
      this._box_0 = t0;
    },
    StackZoneSpecification_chainFor_closure0: function StackZoneSpecification_chainFor_closure0(t0, t1) {
      this.$this = t0;
      this.original = t1;
    },
    StackZoneSpecification__registerCallback_closure: function StackZoneSpecification__registerCallback_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.R = t3;
    },
    StackZoneSpecification__registerUnaryCallback_closure: function StackZoneSpecification__registerUnaryCallback_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.T = t3;
      _.R = t4;
    },
    StackZoneSpecification__registerUnaryCallback__closure: function StackZoneSpecification__registerUnaryCallback__closure(t0, t1, t2) {
      this.f = t0;
      this.arg = t1;
      this.R = t2;
    },
    StackZoneSpecification__registerBinaryCallback_closure: function StackZoneSpecification__registerBinaryCallback_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.f = t1;
      _.node = t2;
      _.T1 = t3;
      _.T2 = t4;
      _.R = t5;
    },
    StackZoneSpecification__registerBinaryCallback__closure: function StackZoneSpecification__registerBinaryCallback__closure(t0, t1, t2, t3) {
      var _ = this;
      _.f = t0;
      _.arg1 = t1;
      _.arg2 = t2;
      _.R = t3;
    },
    StackZoneSpecification__currentTrace_closure: function StackZoneSpecification__currentTrace_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.stackTrace = t2;
    },
    _Node: function _Node(t0, t1) {
      this.trace = t0;
      this.previous = t1;
    }
  },
  U = {
    debugAsyncStackTraces: function() {
      return false;
    },
    ExceptionHandler__longStackTrace: function(stackTrace) {
      var t1 = J.getInterceptor$(stackTrace);
      return !!t1.$isIterable ? t1.join$1(stackTrace, "\n\n-----async gap-----\n") : t1.toString$0(stackTrace);
    },
    ExceptionHandler_exceptionToString: function(exception, stackTrace, reason) {
      var buffer = P.StringBuffer$("");
      buffer.writeln$1("EXCEPTION: " + H.S(exception));
      if (stackTrace != null) {
        buffer.writeln$1("STACKTRACE: ");
        buffer.writeln$1(U.ExceptionHandler__longStackTrace(stackTrace));
      }
      if (reason != null)
        buffer.writeln$1("REASON: " + reason);
      return buffer.toString$0(0);
    },
    ExceptionHandler: function ExceptionHandler() {
    },
    debugThrowIfChanged: function() {
      return H.boolConversionCheck(X.isDevMode()) && H.boolConversionCheck($._debugThrowIfChanged);
    },
    debugEnterThrowOnChanged: function() {
      $._debugThrowIfChanged = true;
    },
    debugExitThrowOnChanged: function() {
      $._debugThrowIfChanged = false;
    },
    UnstableExpressionError: function UnstableExpressionError() {
    },
    _DevModeEquality0: function _DevModeEquality0() {
    },
    JsTestability: function JsTestability() {
    },
    JsTestabilityRegistry: function JsTestabilityRegistry() {
    },
    Colors: function Colors() {
    },
    Equality: function Equality() {
    },
    EqualityBy: function EqualityBy() {
    },
    DefaultEquality: function DefaultEquality() {
    },
    IdentityEquality: function IdentityEquality() {
    },
    IterableEquality: function IterableEquality() {
    },
    ListEquality: function ListEquality() {
    },
    _UnorderedEquality: function _UnorderedEquality() {
    },
    UnorderedIterableEquality: function UnorderedIterableEquality() {
    },
    SetEquality: function SetEquality() {
    },
    _MapEntry: function _MapEntry() {
    },
    MapEquality: function MapEquality() {
    },
    MultiEquality: function MultiEquality() {
    },
    DeepCollectionEquality: function DeepCollectionEquality() {
    },
    CaseInsensitiveEquality: function CaseInsensitiveEquality() {
    },
    Chain_capture: function(callback, onError, $T) {
      var spec = O.StackZoneSpecification$(onError, true);
      return P.runZoned(new U.Chain_capture_closure(callback, $T), null, spec.toSpec$0(), P.LinkedHashMap__makeLiteral([$.$get$_specKey(), spec, $.$get$StackZoneSpecification_disableKey(), false]), $T);
    },
    Chain_Chain$parse: function(chain) {
      var _s26_ = "<asynchronous suspension>\n",
        _s51_ = "===== asynchronous gap ===========================\n";
      if (H.boolConversionCheck(J.getInterceptor$asx(chain).get$isEmpty(chain)))
        return U.Chain$(H.setRuntimeTypeInfo([], [Y.Trace]));
      if (H.boolConversionCheck(C.JSString_methods.contains$1(chain, _s26_)))
        return U.Chain$(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(chain.split(_s26_), [P.String]), new U.Chain_Chain$parse_closure(), Y.Trace));
      if (!H.boolConversionCheck(C.JSString_methods.contains$1(chain, _s51_)))
        return U.Chain$(H.setRuntimeTypeInfo([Y.Trace_Trace$parse(chain)], [Y.Trace]));
      return U.Chain$(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(chain.split(_s51_), [P.String]), new U.Chain_Chain$parse_closure0(), Y.Trace));
    },
    Chain$: function(traces) {
      return new U.Chain(P.List_List$unmodifiable(traces, Y.Trace));
    },
    Chain: function Chain(t0) {
      this.traces = t0;
    },
    Chain_capture_closure0: function Chain_capture_closure0() {
    },
    Chain_capture_closure: function Chain_capture_closure(t0, t1) {
      this.callback = t0;
      this.T = t1;
    },
    Chain_Chain$current_closure: function Chain_Chain$current_closure() {
    },
    Chain_Chain$forTrace_closure: function Chain_Chain$forTrace_closure() {
    },
    Chain_Chain$parse_closure: function Chain_Chain$parse_closure() {
    },
    Chain_Chain$parse_closure0: function Chain_Chain$parse_closure0() {
    },
    Chain_terse_closure: function Chain_terse_closure() {
    },
    Chain_foldFrames_closure: function Chain_foldFrames_closure(t0, t1) {
      this.predicate = t0;
      this.terse = t1;
    },
    Chain_foldFrames_closure0: function Chain_foldFrames_closure0(t0) {
      this.terse = t0;
    },
    Chain_toTrace_closure: function Chain_toTrace_closure() {
    },
    Chain_toString_closure0: function Chain_toString_closure0() {
    },
    Chain_toString__closure0: function Chain_toString__closure0() {
    },
    Chain_toString_closure: function Chain_toString_closure(t0) {
      this.longest = t0;
    },
    Chain_toString__closure: function Chain_toString__closure(t0) {
      this.longest = t0;
    }
  },
  F = {Messages: function Messages() {
    }, Logger: function Logger() {
    },
    UrlStyle$: function() {
      return new F.UrlStyle(P.RegExp_RegExp("/", false), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", false), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", false), P.RegExp_RegExp("^/", false));
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    main: function() {
      Y.Scene$();
    },
    main0: function() {
      G.runApp(V.AppComponentNgFactory(), Q.AppComponent);
    }
  };
  var holders = [C, H, J, P, W, G, Y, R, K, X, V, L, B, D, M, T, A, S, N, E, Q, Z, O, U, F];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  H._CryptoUtils.prototype = {};
  H._HashBase.prototype = {};
  H._MD5.prototype = {};
  H._SHA1.prototype = {};
  H.HttpServer.prototype = {$isStream: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H.HttpConnectionsInfo.prototype = {};
  H.HttpHeaders.prototype = {};
  H.HeaderValue.prototype = {};
  H.HttpSession.prototype = {$isMap: 1,
    $asMap: function() {
    }
  };
  H.ContentType.prototype = {$isHeaderValue: 1};
  H.Cookie.prototype = {};
  H.HttpRequest.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Uint8List];
    }
  };
  H.HttpResponse.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClient.prototype = {};
  H.HttpClientRequest.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H.HttpClientResponse.prototype = {$isStream: 1,
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H.HttpClientResponseCompressionState.prototype = {};
  H.HttpClientCredentials.prototype = {};
  H.HttpClientBasicCredentials.prototype = {};
  H.HttpClientDigestCredentials.prototype = {};
  H.HttpConnectionInfo.prototype = {};
  H.RedirectInfo.prototype = {};
  H.DetachedSocket.prototype = {};
  H.HttpException.prototype = {$isException: 1, $isIOException: 1};
  H.RedirectException.prototype = {$isHttpException: 1, $isException: 1, $isIOException: 1};
  H.HttpDate.prototype = {};
  H._HttpHeaders.prototype = {$isHttpHeaders: 1};
  H._HeaderValue.prototype = {$isHeaderValue: 1};
  H._ContentType.prototype = {$isContentType: 1};
  H._Cookie.prototype = {$isCookie: 1};
  H._ServiceObject.prototype = {};
  H._CopyingBytesBuilder.prototype = {$isBytesBuilder: 1};
  H._HttpIncoming.prototype = {
    $asStream: function() {
      return [P.Uint8List];
    }
  };
  H._HttpInboundMessageListInt.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpInboundMessage.prototype = {
    $asStream: function() {
      return [P.Uint8List];
    }
  };
  H._HttpRequest.prototype = {$isHttpRequest: 1};
  H._HttpClientResponse.prototype = {$isHttpClientResponse: 1};
  H._ToUint8List.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.Uint8List];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.Uint8List];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.Uint8List];
    }
  };
  H._Uint8ListConversionSink.prototype = {$isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._StreamSinkImpl.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  H._IOSinkImpl.prototype = {
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  H._HttpOutboundMessage.prototype = {};
  H._HttpResponse.prototype = {$isHttpResponse: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientRequest.prototype = {$isHttpClientRequest: 1,
    $as_StreamSinkImpl: function() {
      return [[P.List, P.int]];
    },
    $as_HttpOutboundMessage: function() {
      return [H.HttpClientResponse];
    },
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpGZipSink.prototype = {};
  H._HttpOutgoing.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  H._HttpClientConnection.prototype = {};
  H._ConnectionInfo.prototype = {};
  H._ConnectionTarget.prototype = {};
  H._HttpClient.prototype = {$isHttpClient: 1};
  H._HttpConnection.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H._HttpServer.prototype = {$isHttpServer: 1, $is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H._ProxyConfiguration.prototype = {};
  H._Proxy.prototype = {};
  H._HttpConnectionInfo.prototype = {$isHttpConnectionInfo: 1};
  H._DetachedSocket.prototype = {
    $asStream: function() {
      return [P.Uint8List];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  H._AuthenticationScheme.prototype = {};
  H._Credentials.prototype = {};
  H._SiteCredentials.prototype = {};
  H._ProxyCredentials.prototype = {};
  H._HttpClientCredentials.prototype = {$isHttpClientCredentials: 1};
  H._HttpClientBasicCredentials.prototype = {$isHttpClientBasicCredentials: 1};
  H._HttpClientDigestCredentials.prototype = {$isHttpClientDigestCredentials: 1};
  H._RedirectInfo.prototype = {$isRedirectInfo: 1};
  H._Const.prototype = {};
  H._CharCode.prototype = {};
  H._State.prototype = {};
  H._HttpVersion.prototype = {};
  H._MessageType.prototype = {};
  H._HttpDetachedStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function() {
      return [P.Uint8List];
    }
  };
  H._HttpDetachedIncoming.prototype = {
    $asStream: function() {
      return [P.Uint8List];
    }
  };
  H._HttpParser.prototype = {
    $asStream: function() {
      return [H._HttpIncoming];
    }
  };
  H._HttpSession.prototype = {$isHttpSession: 1, $isMap: 1,
    $asMap: function() {
    }
  };
  H._HttpSessionManager.prototype = {};
  H.HttpOverrides.prototype = {};
  H._HttpOverridesScope.prototype = {};
  H.WebSocketStatus.prototype = {};
  H.CompressionOptions.prototype = {};
  H.WebSocketTransformer.prototype = {$isStreamTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest, H.WebSocket];
    }
  };
  H.WebSocket.prototype = {$isStream: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.WebSocketException.prototype = {$isException: 1, $isIOException: 1};
  H._WebSocketMessageType.prototype = {};
  H._WebSocketOpcode.prototype = {};
  H._EncodedString.prototype = {};
  H._CompressionMaxWindowBits.prototype = {};
  H._WebSocketProtocolTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], null];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], null];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  H._WebSocketPing.prototype = {};
  H._WebSocketPong.prototype = {};
  H._WebSocketTransformerImpl.prototype = {$isWebSocketTransformer: 1,
    $asStreamTransformer: function() {
      return [H.HttpRequest, H.WebSocket];
    },
    $asStreamTransformerBase: function() {
      return [H.HttpRequest, H.WebSocket];
    }
  };
  H._WebSocketPerMessageDeflate.prototype = {};
  H._WebSocketOutgoingTransformer.prototype = {$isEventSink: 1,
    $asEventSink: function() {
    },
    $asStreamTransformer: function() {
      return [null, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [null, [P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H._WebSocketConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
    }
  };
  H._WebSocketImpl.prototype = {$is_ServiceObject: 1, $isWebSocket: 1,
    $asStream: function() {
    },
    $isEventSink: 1,
    $asEventSink: function() {
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
    },
    $isSink: 1,
    $asSink: function() {
    }
  };
  H.__HttpConnection_LinkedListEntry__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asLinkedListEntry: function() {
      return [H._HttpConnection];
    }
  };
  H.__HttpServer_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
      return [H.HttpRequest];
    }
  };
  H.__WebSocketImpl_Stream__ServiceObject.prototype = {$is_ServiceObject: 1,
    $asStream: function() {
    }
  };
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToHumanReadableString(receiver);
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JSIndexable.prototype = {};
  J.JSMutableIndexable.prototype = {};
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isJsTestability: 1,
    $isJsTestabilityRegistry: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J._Growable.prototype = {};
  J.JSArray.prototype = {
    checkMutable$1: function(receiver, reason) {
      H.stringTypeCheck(reason);
      if (!H.boolConversionCheck(J.JSArray_isMutable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      H.stringTypeCheck(reason);
      if (!H.boolConversionCheck(J.JSArray_isGrowable(receiver)))
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "add");
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      this.checkGrowable$1(receiver, "removeAt");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkGrowable$1(receiver, "insert");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "insertAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.set$length(receiver, t1 + insertionLength);
      if (typeof index !== "number")
        return index.$add();
      end = index + insertionLength;
      _this.setRange$4(receiver, end, receiver.length, receiver, index);
      _this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0: function(receiver) {
      this.checkGrowable$1(receiver, "removeLast");
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (H.boolConversionCheck(J.$eq$(receiver[i], element))) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.ExpandIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), t1, $T);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      this.checkGrowable$1(receiver, "addAll");
      for (t1 = J.get$iterator$ax(collection); H.boolConversionCheck(t1.moveNext$0());)
        receiver.push(J.get$current$z(t1));
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    join$1: function(receiver, separator) {
      var list, i;
      H.stringTypeCheck(separator);
      list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(n), H.getTypeArgumentByIndex(receiver, 0));
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, H.intTypeCheck(n), null, H.getTypeArgumentByIndex(receiver, 0));
    },
    skipWhile$1: function(receiver, test) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return H.SkipWhileIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.checkNull(start);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return J.JSArray_JSArray$markGrowable(receiver.slice(start, end), H.getTypeArgumentByIndex(receiver, 0));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, t2, otherStart, otherList, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      this.checkMutable$1(receiver, "setRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(t2.skip$1(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      var t1, removeLength, insertLength, insertEnd, delta, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(replacement, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      _this.checkGrowable$1(receiver, "replaceRange");
      P.RangeError_checkValidRange(start, end, receiver.length);
      t1 = J.getInterceptor$(replacement);
      if (!t1.$isEfficientLengthIterable)
        replacement = t1.toList$0(replacement);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(replacement);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      t1 = receiver.length;
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        delta = removeLength - insertLength;
        newLength = t1 - delta;
        _this.setRange$3(receiver, start, insertEnd, replacement);
        if (delta !== 0) {
          _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
          _this.set$length(receiver, newLength);
        }
      } else {
        newLength = t1 + (insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, replacement);
      }
    },
    get$reversed: function(receiver) {
      return H.ReversedListIterable$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (H.boolConversionCheck(J.$eq$(receiver[i], other)))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    toString$0: function(receiver) {
      return P.ListBase_listToString(receiver);
    },
    toList$1$growable: function(receiver, growable) {
      return H.boolConversionCheck(H.boolTypeCheck(growable)) ? this._toListGrowable$0(receiver) : this._toListFixed$0(receiver);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    _toListGrowable$0: function(receiver) {
      return J.JSArray_JSArray$markGrowable(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    _toListFixed$0: function(receiver) {
      return J.JSArray_JSArray$markFixed(receiver.slice(0), H.getTypeArgumentByIndex(receiver, 0));
    },
    get$iterator: function(receiver) {
      return J.ArrayIterator$(receiver, H.getTypeArgumentByIndex(receiver, 0));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      H.intTypeCheck(newLength);
      this.checkGrowable$1(receiver, "set length");
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var t2, t3, totalLength,
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      t2 = receiver.length;
      t3 = J.get$length$asx(other);
      if (typeof t3 !== "number")
        return H.iae(t3);
      totalLength = t2 + t3;
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this._current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!H.boolConversionCheck(J.$eq$(_this.__interceptors$_length, $length)))
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t3 = _this._index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.$index(t1, t3));
      t1 = _this._index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._index = H.intTypeCheck(t1 + 1);
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    remainder$1: function(receiver, b) {
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      return receiver % b;
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      var result;
      H.intTypeCheck(radix);
      H.checkInt(radix);
      if (typeof radix !== "number")
        return radix.$lt();
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (!H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(result, result.length - 1), 41)))
        return result;
      return J.JSNumber__handleIEtoString(result);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $mod: function(receiver, other) {
      var result;
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _isInt32$1: function(receiver, value) {
      return (value | 0) === value;
    },
    $tdiv: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (H.boolConversionCheck(this._isInt32$1(receiver, receiver)))
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      H.numTypeCheck(other);
      return H.boolConversionCheck(this._isInt32$1(receiver, receiver)) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient;
      H.numTypeCheck(other);
      quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    $shr: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrOtherPositive$1(receiver, other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      H.numTypeCheck(other);
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        if (typeof other !== "number")
          return other.$gt();
        if (other > 31)
          t1 = 31;
        else
          t1 = other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      H.numTypeCheck(other);
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver < other;
    },
    $ge: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    $negate: function(receiver) {
      return -receiver;
    },
    get$isOdd: function(receiver) {
      return (receiver & 1) === 1;
    },
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $not: function(receiver) {
      return ~receiver >>> 0;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return this._codeUnitAt$1(receiver, index);
    },
    _codeUnitAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number")
        return index.$ge();
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return H.iae(start);
      if (0 > start || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (t2 = J.getInterceptor$s(string), i = 0; i < t1; ++i)
        if (!H.boolConversionCheck(J.$eq$(t2.codeUnitAt$1(string, start + i), this._codeUnitAt$1(receiver, i))))
          return;
      return H.StringMatch$(start, string, receiver);
    },
    $add: function(receiver, other) {
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.stringTypeCheck(other);
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      t1 = this.substring$1(receiver, t1 - otherLength);
      return other == null ? t1 == null : other === t1;
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringTypeCheck(H.stringReplaceAllUnchecked(receiver, H.stringSuperNativeTypeCheck(from, "$isPattern"), H.checkString(H.stringTypeCheck(to))));
    },
    replaceFirst$2: function(receiver, from, to) {
      H.stringSuperNativeTypeCheck(from, "$isPattern");
      H.stringTypeCheck(to);
      H.checkString(to);
      P.RangeError_checkValueInInterval(0, 0, receiver.length, "startIndex");
      return H.stringTypeCheck(H.stringReplaceFirstUnchecked(receiver, from, to, 0));
    },
    split$1: function(receiver, pattern) {
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.checkNull(pattern);
      if (typeof pattern === "string")
        return H.stringSplitUnchecked(receiver, pattern);
      else if (pattern instanceof H.JSSyntaxRegExp && H.boolConversionCheck(J.$eq$(H.regExpCaptureCount(pattern), 0)))
        return H.stringSplitUnchecked(receiver, H.regExpGetNative(pattern));
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.stringTypeCheck(replacement);
      H.checkString(replacement);
      H.checkInt(start);
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      H.checkInt(end);
      return H.stringReplaceRangeUnchecked(receiver, start, end, replacement);
    },
    _defaultSplit$1: function(receiver, pattern) {
      var result, t1, start, $length, t2, matchStart, matchEnd;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      result = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = J.get$iterator$ax(J.allMatches$1$s(pattern, receiver)), start = 0, $length = 1; H.boolConversionCheck(t1.moveNext$0());) {
        t2 = J.get$current$z(t1);
        matchStart = t2.get$start(t2);
        matchEnd = t2.get$end(t2);
        if (typeof matchEnd !== "number")
          return matchEnd.$sub();
        if (typeof matchStart !== "number")
          return H.iae(matchStart);
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        C.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        C.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(index);
      H.checkInt(index);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      H.checkInt(startIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      H.intTypeCheck(times);
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = J.$add$ansx(s, result);
        times = times >>> 1;
        if (times === 0)
          break;
        s = H.stringTypeCheck(J.$add$ansx(s, s));
      }
      return result;
    },
    padRight$1: function(receiver, width) {
      var delta;
      H.intTypeCheck(width);
      if (typeof width !== "number")
        return width.$sub();
      delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$add(receiver, this.$mul(" ", delta));
    },
    get$codeUnits: function(receiver) {
      return H.CodeUnits$(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, match, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(H.argumentErrorValue(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string")
        return H.intTypeCheck(H.stringIndexOfStringUnchecked(receiver, pattern, start));
      t1 = J.getInterceptor$(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = H.firstMatchAfter(pattern, receiver, start);
        return match == null ? -1 : match.get$start(match);
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      H.stringSuperNativeTypeCheck(pattern, "$isPattern");
      H.intTypeCheck(start);
      H.checkNull(pattern);
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        return H.intTypeCheck(H.stringLastIndexOfUnchecked(receiver, pattern, start + t1 > t2 ? t2 - t1 : start));
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      H.stringSuperNativeTypeCheck(other, "$isPattern");
      H.intTypeCheck(startIndex);
      H.checkNull(other);
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0 || startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.boolTypeCheck(H.stringContainsUnchecked(receiver, other, startIndex));
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.CastStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamSubscription.prototype = {$isStreamSubscription: 1,
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  H.CastStreamTransformer.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H.CastConverter.prototype = {
    $asStreamTransformer: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asStreamTransformerBase: function(SS, ST, TS, TT) {
      return [TS, TT];
    },
    $asConverter: function(SS, ST, TS, TT) {
      return [TS, TT];
    }
  };
  H._CastIterableBase.prototype = {
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterator.prototype = {$isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {};
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.CastList.prototype = {};
  H.CastSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isSet: 1,
    $asSet: function($S, $T) {
      return [$T];
    }
  };
  H.CastMap.prototype = {
    $asMapBase: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMapMixin: function(SK, SV, $K, $V) {
      return [$K, $V];
    },
    $asMap: function(SK, SV, $K, $V) {
      return [$K, $V];
    }
  };
  H.CastQueue.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isQueue: 1,
    $asQueue: function($S, $T) {
      return [$T];
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._string);
    },
    $index: function(_, i) {
      return J.codeUnitAt$1$s(this._string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  H.ExternalName.prototype = {};
  H.Since.prototype = {};
  H.HttpStatus.prototype = {};
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      return H.ListIterator$(this, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (H.boolConversionCheck(J.$eq$(this.get$length(this), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      var t1, _this = this;
      if (H.boolConversionCheck(J.$eq$(_this.get$length(_this), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this.get$length(_this);
      if (typeof t1 !== "number")
        return t1.$sub();
      return _this.elementAt$1(0, t1 - 1);
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (H.boolConversionCheck(J.$eq$(_this.elementAt$1(0, i), element)))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var $length, first, t1, buffer, i, _this = this;
      H.stringTypeCheck(separator);
      $length = _this.get$length(_this);
      if (!H.boolConversionCheck(J.get$isEmpty$asx(separator))) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        t1 = _this.get$length(_this);
        if ($length == null ? t1 != null : $length !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer.write$1(0, separator);
          buffer.write$1(0, _this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          buffer.write$1(0, _this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return buffer.toString$0(0);
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return H.MappedListIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, H.intTypeCheck(count), null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    skipWhile$1: function(_, test) {
      return this.super$Iterable$skipWhile(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (H.boolConversionCheck(H.boolTypeCheck(growable))) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t2,
        t1 = this._start;
      P.RangeError_checkNotNegative(t1, "start");
      t2 = this._endOrLength;
      if (t2 != null) {
        P.RangeError_checkNotNegative(t2, "end");
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
      }
    },
    get$_endIndex: function() {
      var t2,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2, t3,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var t1, realIndex, _this = this;
      H.intTypeCheck(index);
      t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1: function(_, count) {
      var t1, newStart, t2, _this = this;
      H.intTypeCheck(count);
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this._start;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof count !== "number")
        return H.iae(count);
      newStart = t1 + count;
      t1 = _this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = newStart >= t1;
      } else
        t2 = false;
      if (t2)
        return H.EmptyIterable$(H.getTypeArgumentByIndex(_this, 0));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, t3, $length, result, t4, i, _this = this;
      H.boolTypeCheck(growable);
      start = _this._start;
      t1 = _this.__internal$_iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = _this._endOrLength;
      if (end0 != null) {
        if (typeof end0 !== "number")
          return end0.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = _this.$ti;
      if (H.boolConversionCheck(growable)) {
        result = H.setRuntimeTypeInfo([], t3);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t4 = new Array($length);
        t4.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t4, t3);
      }
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (!H.boolConversionCheck(J.$eq$(_this.__internal$_length, $length)))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (typeof t3 !== "number")
        return t3.$ge();
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      t1 = _this.__internal$_index;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.__internal$_index = H.intTypeCheck(t1 + 1);
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return H.MappedIterator$(J.get$iterator$ax(_this.__internal$_iterable), _this._f, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first: function(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last: function(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, H.intTypeCheck(index)));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (H.boolConversionCheck(t1.moveNext$0())) {
        _this.set$__internal$_current(_this._f.call$1(J.get$current$z(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function(_) {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, H.intTypeCheck(index)));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return H.WhereIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, H.getTypeArgumentByIndex(this, 0));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable$_(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2, t3;
      for (t1 = this._iterator, t2 = J.getInterceptor$z(t1), t3 = this._f; H.boolConversionCheck(t1.moveNext$0());)
        if (H.boolConversionCheck(t3.call$1(t2.get$current(t1))))
          return true;
      return false;
    },
    get$current: function(_) {
      return J.get$current$z(this._iterator);
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return H.ExpandIterator$(J.get$iterator$ax(_this.__internal$_iterable), _this._f, H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = J.getInterceptor$z(t1), t3 = _this._f; !H.boolConversionCheck(_this._currentExpansion.moveNext$0());) {
        _this.set$__internal$_current(null);
        if (H.boolConversionCheck(t1.moveNext$0())) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t3.call$1(t2.get$current(t1))));
        } else
          return false;
      }
      _this.set$__internal$_current(J.get$current$z(_this._currentExpansion));
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = H.assertSubtype(_currentExpansion, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.TakeIterable.prototype = {};
  H.EfficientLengthTakeIterable.prototype = {$isEfficientLengthIterable: 1};
  H.TakeIterator.prototype = {};
  H.TakeWhileIterable.prototype = {};
  H.TakeWhileIterator.prototype = {};
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      var t1 = this._skipCount,
        t2 = H._checkCount(H.intTypeCheck(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return H.SkipIterable$_(this.__internal$_iterable, t1 + t2, H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      return H.SkipIterator$(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length,
        t1 = J.get$length$asx(this.__internal$_iterable),
        t2 = this._skipCount;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      $length = t1 - t2;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      var t1 = this._skipCount,
        t2 = H._checkCount(H.intTypeCheck(count));
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return H.EfficientLengthSkipIterable$_(this.__internal$_iterable, t1 + t2, H.getTypeArgumentByIndex(this, 0));
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    SkipIterator$2: function(_iterator, _skipCount, $E) {
    },
    moveNext$0: function() {
      var t2,
        t1 = this._iterator,
        i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function(_) {
      return J.get$current$z(this._iterator);
    }
  };
  H.SkipWhileIterable.prototype = {
    get$iterator: function(_) {
      return H.SkipWhileIterator$(J.get$iterator$ax(this.__internal$_iterable), this._f, H.getTypeArgumentByIndex(this, 0));
    }
  };
  H.SkipWhileIterator.prototype = {
    moveNext$0: function() {
      var t1, t2, t3, _this = this;
      if (!H.boolConversionCheck(_this._hasSkipped)) {
        _this._hasSkipped = true;
        for (t1 = _this._iterator, t2 = J.getInterceptor$z(t1), t3 = _this._f; H.boolConversionCheck(t1.moveNext$0());)
          if (!H.boolConversionCheck(t3.call$1(t2.get$current(t1))))
            return true;
      }
      return _this._iterator.moveNext$0();
    },
    get$current: function(_) {
      return J.get$current$z(this._iterator);
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(H.intTypeCheck(index), 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    join$1: function(_, separator) {
      H.stringTypeCheck(separator);
      return "";
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return this;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return H.EmptyIterable$($T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      return initialValue;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(H.intTypeCheck(count), "count");
      return this;
    },
    skipWhile$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this, 0)]});
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t2,
        t1 = this.$ti;
      if (H.boolConversionCheck(H.boolTypeCheck(growable)))
        t1 = H.setRuntimeTypeInfo([], t1);
      else {
        t2 = new Array(0);
        t2.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t2, t1);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function(_) {
      return;
    },
    $isIterator: 1
  };
  H.FollowedByIterable.prototype = {};
  H.EfficientLengthFollowedByIterable.prototype = {$isEfficientLengthIterable: 1};
  H.FollowedByIterator.prototype = {$isIterator: 1};
  H.WhereTypeIterable.prototype = {};
  H.WhereTypeIterator.prototype = {$isIterator: 1};
  H.IterableElementError.prototype = {};
  H.LinkedList.prototype = {};
  H.LinkedListEntry0.prototype = {};
  H._LinkedListIterator.prototype = {$isIterator: 1};
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insert$2: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    insertAll$2: function(receiver, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    replaceRange$3: function(receiver, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      H.intTypeCheck(newLength);
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    setAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insert$2: function(_, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    insertAll$2: function(_, at, iterable) {
      H.intTypeCheck(at);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1: function(_, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeAt$1: function(_, index) {
      H.intTypeCheck(index);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    removeLast$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      H.intTypeCheck(skipCount);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(_, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.FixedLengthListBase.prototype = {$isFixedLengthListMixin: 1};
  H.UnmodifiableListBase.prototype = {$isUnmodifiableListMixin: 1};
  H._ListIndicesIterable.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListIterable: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    }
  };
  H.ListMapView.prototype = {
    $asMapBase: function($E) {
      return [P.int, $E];
    },
    $asMapMixin: function($E) {
      return [P.int, $E];
    },
    $asUnmodifiableMapBase: function($E) {
      return [P.int, $E];
    },
    $as_UnmodifiableMapMixin: function($E) {
      return [P.int, $E];
    },
    $asMap: function($E) {
      return [P.int, $E];
    }
  };
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      H.intTypeCheck(index);
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.UnmodifiableListError.prototype = {};
  H.NonGrowableListError.prototype = {};
  H.Sort.prototype = {};
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var t1,
        hash = this._hashCode;
      if (hash != null)
        return hash;
      t1 = J.get$hashCode$(this.__internal$_name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & 664597 * t1;
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && H.boolConversionCheck(J.$eq$(this.__internal$_name, other.__internal$_name));
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $isListMixin: 1,
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H.JsGetName.prototype = {};
  H.JsBuiltin.prototype = {};
  H.RtiUniverseFieldNames.prototype = {};
  H.Native.prototype = {};
  H._Patch.prototype = {};
  H.ConstantMapView.prototype = {$isConstantMap: 1};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    get$_keysArray: function() {
      return this.__js_helper$_keys;
    },
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return H.jsHasOwnProperty(this._jsObject, key);
    },
    $index: function(_, key) {
      if (!H.boolConversionCheck(this.containsKey$1(0, key)))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return H.jsPropertyAccess(this._jsObject, H.stringTypeCheck(key));
    },
    forEach$1: function(_, f) {
      var keys, t2, i, t3, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this.get$_keysArray();
      t2 = J.getInterceptor$asx(keys);
      i = 0;
      while (true) {
        t3 = t2.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        key = t2.$index(keys, i);
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
        ++i;
      }
    },
    get$keys: function(_) {
      return H._ConstantMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$_keysArray(), new H.ConstantStringMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    get$_length: function(receiver) {
      return this._length;
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      return H.assertSubtypeOfRuntimeType(t1._fetch$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0))), H.getTypeArgumentByIndex(t1, 1));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.ConstantProtoMap.prototype = {};
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      return J.get$iterator$ax(this._map.get$_keysArray());
    },
    get$length: function(_) {
      return J.get$length$asx(this._map.get$_keysArray());
    }
  };
  H.GeneralConstantMap.prototype = {};
  H.Instantiation.prototype = {
    Instantiation$1: function(_genericClosure) {
      if (false)
        H.instantiatedGenericFunctionType(0, 0);
    },
    toString$0: function(_) {
      var types = "<" + H.S(J.join$1$ax(this.get$_types(), ", ")) + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    get$_types: function() {
      return [H.createRuntimeType(H.getTypeArgumentByIndex(this, 0))];
    },
    call$2: function(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti[0]);
    },
    call$4: function(a0, a1, a2, a3) {
      return this._genericClosure.call$1$4(a0, a1, a2, a3, this.$ti[0]);
    },
    $signature: function() {
      return H.instantiatedGenericFunctionType(H.extractFunctionTypeObjectFromInternal(this._genericClosure), this.$ti);
    }
  };
  H.Instantiation2.prototype = {};
  H.Instantiation3.prototype = {};
  H.Instantiation4.prototype = {};
  H.Instantiation5.prototype = {};
  H.Instantiation6.prototype = {};
  H.Instantiation7.prototype = {};
  H.Instantiation8.prototype = {};
  H.Instantiation9.prototype = {};
  H.Instantiation10.prototype = {};
  H.Instantiation11.prototype = {};
  H.Instantiation12.prototype = {};
  H.Instantiation13.prototype = {};
  H.Instantiation14.prototype = {};
  H.Instantiation15.prototype = {};
  H.Instantiation16.prototype = {};
  H.Instantiation17.prototype = {};
  H.Instantiation18.prototype = {};
  H.Instantiation19.prototype = {};
  H.Instantiation20.prototype = {};
  H.InternalMap.prototype = {};
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this.__js_helper$_memberName;
      if (!!J.getInterceptor$(t1).$isSymbol0)
        return t1;
      return this.__js_helper$_memberName = H.Symbol$unvalidated(H.stringTypeCheck(t1));
    },
    get$isGetter: function() {
      return J.$eq$(this._kind, 1);
    },
    get$isAccessor: function() {
      return !H.boolConversionCheck(J.$eq$(this._kind, 0));
    },
    get$positionalArguments: function() {
      var t1, t2, t3, t4, t5, argumentCount, list, index, _this = this;
      if (H.boolConversionCheck(_this.get$isGetter()))
        return C.List_empty1;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      t4 = J.get$length$asx(_this._namedArgumentNames);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._typeArgumentCount;
      if (typeof t5 !== "number")
        return H.iae(t5);
      argumentCount = t3 - t4 - t5;
      if (argumentCount === 0)
        return C.List_empty1;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, t2, namedArgumentCount, t3, t4, t5, t6, namedArgumentsStartIndex, map, i, _this = this;
      if (H.boolConversionCheck(_this.get$isAccessor()))
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.get$length(t3);
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof namedArgumentCount !== "number")
        return H.iae(namedArgumentCount);
      t6 = _this._typeArgumentCount;
      if (typeof t6 !== "number")
        return H.iae(t6);
      namedArgumentsStartIndex = t5 - namedArgumentCount - t6;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t5 = P.Symbol0;
      map = H.JsLinkedHashMap_JsLinkedHashMap$es6(t5, null);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, H.Symbol$unvalidated(H.stringTypeCheck(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return H.ConstantMapView$(map, t5, null);
    },
    $isInvocation: 1
  };
  H.Primitives.prototype = {};
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1, t2;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = H.S(t1.names) + "$" + H.S($name);
      J.add$1$ax(this.namedArgumentList, $name);
      J.add$1$ax(this.$arguments, argument);
      t2 = t1.argumentCount;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.argumentCount = t2 + 1;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 27
  };
  H.JsCache.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (!H.boolConversionCheck(J.$eq$(t1, -1)))
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
    },
    $isNoSuchMethodError: 1
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + H.S(t1) + "' (" + H.S(_this._message) + ")";
      return _s38_ + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(_this._message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return H.boolConversionCheck(J.get$isEmpty$asx(t1)) ? "Error" : "Error: " + H.S(t1);
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 8
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.S(H.unminifyOrTag($name == null ? "unknown" : $name)) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.Closure_fromTearOff_closure.prototype = {$signature: 1};
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this._target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      if (typeof t1 !== "number")
        return H.iae(t1);
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(receiver));
    }
  };
  H.Creates.prototype = {};
  H.Returns.prototype = {};
  H.JSName.prototype = {};
  H.JavaScriptIndexingBehavior.prototype = {};
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isAssertionError: 1,
    $isTypeError: 1
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isCastError: 1
  };
  H.FallThroughErrorImplementation.prototype = {};
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H.DeferredNotLoadedError.prototype = {$isNoSuchMethodError: 1};
  H.UnimplementedNoSuchMethodError.prototype = {$isNoSuchMethodError: 1};
  H.MainError.prototype = {$isNoSuchMethodError: 1};
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return C.JSString_methods.$add("Assertion failed: ", P.Error_safeToString(this.message));
    }
  };
  H._UnreachableError.prototype = {};
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.stringTypeCheck(H.runtimeTypeToString(this._rti)) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = H.intTypeCheck(J.get$hashCode$(this.get$_typeName())) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && H.boolConversionCheck(J.$eq$(this.get$_typeName(), other.get$_typeName()));
    },
    $isType: 1
  };
  H.TypeVariable.prototype = {};
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this._length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._length, 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    get$keys: function(_) {
      return H.LinkedHashMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums, _this = this;
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var t1,
        rest = this._rest;
      if (rest == null)
        return false;
      t1 = this.internalFindBucketIndex$2(this._getBucket$2(rest, key), key);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index,
        rest = this._rest;
      if (rest == null)
        return;
      bucket = this._getBucket$2(rest, key);
      index = this.internalFindBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (H.boolConversionCheck(H.JsLinkedHashMap__isStringKey(key))) {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (H.boolConversionCheck(H.JsLinkedHashMap__isNumericKey(key))) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, t1, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        t1 = _this._modifications;
        if (modifications == null ? t1 != null : modifications !== t1)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _modified$0: function() {
      var t1 = this._modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this._modifications = t1 + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var t1, _this = this,
        cell = H.LinkedHashMapCell$(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      t1 = _this._length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._length = H.intTypeCheck(t1 + 1);
      _this._modified$0();
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _getBucket$2: function(table, key) {
      return this._getTableBucket$2(table, this.internalComputeHashCode$1(key));
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(J.$eq$(bucket[i].hashMapCellKey, key)))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isInternalMap: 1,
    $isLinkedHashMap: 1,
    get$_length: function(receiver) {
      return this._length;
    },
    get$_first: function() {
      return this._first;
    },
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return J.$index$asx(t1, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.Es6LinkedHashMap.prototype = {};
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H.intTypeCheck(J.get$_length$x(this._map));
    },
    get$isEmpty: function(_) {
      return J.$eq$(J.get$_length$x(this._map), 0);
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return H.LinkedHashMapKeyIterator$(t1, H.intTypeCheck(t1.get$_modifications()), H.getTypeArgumentByIndex(this, 0));
    },
    contains$1: function(_, element) {
      return H.boolTypeCheck(J.containsKey$1$x(this._map, element));
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    LinkedHashMapKeyIterator$2: function(_map, _modifications, $E) {
      this._cell = H.interceptedTypeCheck(this._map.get$_first(), "$isLinkedHashMapCell");
    },
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (!H.boolConversionCheck(J.$eq$(_this._modifications, t1.get$_modifications())))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = H.interceptedTypeCheck(_this._cell._next, "$isLinkedHashMapCell");
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_modifications: function() {
      return this._modifications;
    }
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 8
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, H.stringTypeCheck(tag));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 69
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 67
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + H.S(this.pattern) + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), _this.get$_isUnicode(), _this.get$_isDotAll(), true);
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(H.S(_this.pattern) + "|()", _this.get$_isMultiLine(), _this.get$_isCaseSensitive(), _this.get$_isUnicode(), _this.get$_isDotAll(), true);
    },
    get$_isMultiLine: function() {
      return this._nativeRegExp.multiline;
    },
    get$_isCaseSensitive: function() {
      return !this._nativeRegExp.ignoreCase;
    },
    get$_isUnicode: function() {
      return this._nativeRegExp.unicode;
    },
    get$_isDotAll: function() {
      return this._nativeRegExp.dotAll;
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(H.checkString(H.stringTypeCheck(string)));
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(string) {
      return this._nativeRegExp.test(H.checkString(H.stringTypeCheck(string)));
    },
    allMatches$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      H.checkString(string);
      H.checkInt(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return H._AllMatchesIterable$(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match;
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      H.stringTypeCheck(string);
      H.intTypeCheck(start);
      if (typeof start !== "number")
        return start.$lt();
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    get$isUnicode: function() {
      return this.get$_isUnicode();
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    _MatchImplementation$2: function(pattern, _match) {
    },
    get$start: function(_) {
      return this._match.index;
    },
    get$end: function(_) {
      var t1 = this.get$start(this),
        t2 = this._match[0].length;
      if (typeof t1 !== "number")
        return t1.$add();
      return H.intTypeCheck(t1 + t2);
    },
    group$1: function(index) {
      return J.$index$asx(this._match, H.intTypeCheck(index));
    },
    $index: function(_, index) {
      return this.group$1(H.intTypeCheck(index));
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._AllMatchesIterator$(this._re, this.__js_helper$_string, this.__js_helper$_start);
    },
    $asIterableBase: function() {
      return [P.RegExpMatch];
    },
    $asIterable: function() {
      return [P.RegExpMatch];
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t2, match, nextIndex, _this = this,
        t1 = _this.__js_helper$_string;
      if (t1 == null)
        return false;
      t2 = _this._nextIndex;
      t1 = J.get$length$asx(t1);
      if (typeof t2 !== "number")
        return t2.$le();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (t2 <= t1) {
        t1 = _this._regExp;
        match = t1._execGlobal$2(_this.__js_helper$_string, _this._nextIndex);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (H.boolConversionCheck(J.$eq$(match.get$start(match), nextIndex))) {
            if (H.boolConversionCheck(t1.get$isUnicode())) {
              t1 = _this._nextIndex;
              if (typeof t1 !== "number")
                return t1.$add();
              t2 = J.get$length$asx(_this.__js_helper$_string);
              if (typeof t2 !== "number")
                return H.iae(t2);
              if (t1 + 1 < t2)
                if (H.boolConversionCheck(H._AllMatchesIterator__isLeadSurrogate(J.codeUnitAt$1$s(_this.__js_helper$_string, _this._nextIndex)))) {
                  t1 = _this.__js_helper$_string;
                  t2 = _this._nextIndex;
                  if (typeof t2 !== "number")
                    return t2.$add();
                  t2 = H.boolConversionCheck(H._AllMatchesIterator__isTrailSurrogate(J.codeUnitAt$1$s(t1, t2 + 1)));
                  t1 = t2;
                } else
                  t1 = false;
              else
                t1 = false;
            } else
              t1 = false;
            if (t1) {
              if (typeof nextIndex !== "number")
                return nextIndex.$add();
              ++nextIndex;
            }
            if (typeof nextIndex !== "number")
              return nextIndex.$add();
            ++nextIndex;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.RegExpMatch];
    }
  };
  H.StringMatch.prototype = {
    get$end: function(_) {
      var t1 = this.start,
        t2 = J.get$length$asx(this.pattern);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    $isMatch: 1,
    get$start: function(receiver) {
      return this.start;
    }
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator: function(_) {
      return H._StringAllMatchesIterator$(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first: function(_) {
      var t1 = this._input,
        t2 = this._pattern,
        index = H.intTypeCheck(H.stringIndexOfStringUnchecked(t1, t2, this.__js_helper$_index));
      if (typeof index !== "number")
        return index.$ge();
      if (index >= 0)
        return H.StringMatch$(index, t1, t2);
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $asIterable: function() {
      return [P.Match];
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0: function() {
      var t5, t6, t7, index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = J.getInterceptor$asx(t2),
        t4 = t3.get$length(t2);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._input;
      t6 = J.getInterceptor$asx(t5);
      t7 = t6.get$length(t5);
      if (typeof t7 !== "number")
        return H.iae(t7);
      if (t1 + t4 > t7) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = H.stringIndexOfStringUnchecked(t5, t2, _this.__js_helper$_index);
      t1 = J.getInterceptor$n(index);
      if (H.boolConversionCheck(H.boolTypeCheck(t1.$lt(index, 0)))) {
        t1 = t6.get$length(t5);
        if (typeof t1 !== "number")
          return t1.$add();
        _this.__js_helper$_index = H.intTypeCheck(t1 + 1);
        _this.__js_helper$_current = null;
        return false;
      }
      end = H.intTypeCheck(t1.$add(index, t3.get$length(t2)));
      _this.__js_helper$_current = H.StringMatch$(H.intTypeCheck(index), t5, t2);
      t1 = _this.__js_helper$_index;
      if (end == null ? t1 == null : end === t1) {
        if (typeof end !== "number")
          return end.$add();
        ++end;
      }
      _this.__js_helper$_index = end;
      return true;
    },
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.Match];
    }
  };
  H._LazyMangledNamesMap.prototype = {};
  H._LazyMangledInstanceNamesMap.prototype = {};
  H._LazyReflectiveNamesMap.prototype = {};
  H.SupportedBrowser.prototype = {};
  H.Experimental.prototype = {};
  H.DomName.prototype = {};
  H.DocsEditable.prototype = {};
  H.Unstable.prototype = {};
  H.NativeByteBuffer.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeFloat32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1
  };
  H.NativeInt32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1
  };
  H.NativeFloat64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (typeof position !== "number" || Math.floor(position) !== position)
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      var t1;
      H.intTypeCheck(position);
      H.intTypeCheck($length);
      H.stringTypeCheck($name);
      if (!(position >>> 0 !== position)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = position > $length;
      } else
        t1 = true;
      if (t1)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    },
    $isNativeByteData: 1,
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var targetLength, count, sourceLength;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.interceptedTypeCheck(source, "$isNativeTypedArray");
      H.intTypeCheck(skipCount);
      targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof start !== "number")
        return start.$gt();
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (typeof skipCount !== "number")
        return skipCount.$lt();
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [P.double], "$asIterable");
      H.intTypeCheck(skipCount);
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      H.intTypeCheck(skipCount);
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeFloat32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeFloat32List: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeFloat64List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeFloat64List: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt16List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeInt16List: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeInt32List: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeInt8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeInt8List: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint16List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint16List: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint32List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint32List: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint8ClampedList__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint8ClampedList: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      H.intTypeCheck(start);
      return H.NativeUint8List__create1(receiver.subarray(start, H._checkValidRange(start, H.intTypeCheck(end), receiver.length)));
    },
    $isNativeUint8List: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1
  };
  H.NativeFloat32x4.prototype = {$isFloat32x4: 1};
  H.NativeInt32x4.prototype = {$isInt32x4: 1};
  H.NativeFloat64x2.prototype = {$isFloat64x2: 1};
  H._NativeFloat32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Float64x2];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    }
  };
  H._NativeInt32x4List_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.Int32x4];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isFixedLengthListMixin: 1,
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.Recipe.prototype = {};
  H.Rti.prototype = {};
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {$isType: 1};
  H._Error.prototype = {};
  H._CastError.prototype = {$isCastError: 1};
  H._TypeError.prototype = {$isAssertionError: 1, $isTypeError: 1};
  H._Universe.prototype = {};
  H._Parser.prototype = {};
  H.TypeRule.prototype = {};
  H._Utils.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 9
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 53
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (H.boolConversionCheck(P._hasTimer()))
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2: function(milliseconds, callback) {
      if (H.boolConversionCheck(P._hasTimer()))
        self.setInterval(H.convertDartClosureToJS(new P._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.$this._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0: function() {
      var tick, t3, t4, duration, _this = this,
        t1 = _this.$this,
        t2 = t1._tick;
      if (typeof t2 !== "number")
        return t2.$add();
      tick = t2 + 1;
      t2 = _this.milliseconds;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t3 = Date.now();
        t4 = _this.start;
        if (typeof t4 !== "number")
          return H.iae(t4);
        duration = H.intTypeCheck(t3 - t4);
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._AsyncAwaitCompleter.prototype = {$isCompleter: 1};
  P._AsyncStarStreamController.prototype = {};
  P._IterationMarker.prototype = {};
  P._SyncStarIterator.prototype = {$isIterator: 1};
  P._SyncStarIterable.prototype = {};
  P._BroadcastStream.prototype = {};
  P._BroadcastSubscription.prototype = {
    _BroadcastSubscription$5: function(controller, onData, onError, onDone, cancelOnError, $T) {
      var _this = this;
      _this.set$_previous(_this);
      _this.set$_async$_next(_this);
    },
    _expectsEvent$1: function(eventId) {
      var t1;
      H.intTypeCheck(eventId);
      t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = (t1 ^ 1) >>> 0;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = (t1 | 4) >>> 0;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    set$_async$_next: function(_next) {
      this._async$_next = H.assertSubtype(_next, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    set$_previous: function(_previous) {
      this._previous = H.assertSubtype(_previous, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    }
  };
  P._BroadcastStreamController.prototype = {
    get$stream: function(_) {
      return P._BroadcastStream$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$isClosed: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_hasOneListener: function() {
      var t1 = this._firstSubscription,
        t2 = this._lastSubscription;
      return t1 == null ? t2 == null : t1 === t2;
    },
    get$_isFiring: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$_mayAddEvent: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 4;
    },
    get$_isEmpty: function() {
      return this._firstSubscription == null;
    },
    _addListener$1: function(subscription) {
      var t1, oldLast, _this = this;
      H.assertSubtype(subscription, "$is_BroadcastSubscription", _this.$ti, "$as_BroadcastSubscription");
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      subscription._eventState = t1 & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      H.assertSubtype(subscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
      previous = subscription._previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_previous(previous);
      subscription.set$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var subscription, t2, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      H.boolTypeCheck(cancelOnError);
      if (H.boolConversionCheck(_this.get$isClosed()))
        return P._DoneStreamSubscription$(onDone == null ? P.async___nullDoneHandler$closure() : onDone, t1);
      subscription = P._BroadcastSubscription$(_this, onData, onError, onDone, cancelOnError, t1);
      _this._addListener$1(H.assertSubtype(subscription, "$is_BroadcastSubscription", _this.$ti, "$as_BroadcastSubscription"));
      t1 = _this._firstSubscription;
      t2 = _this._lastSubscription;
      if (t1 == null ? t2 == null : t1 === t2)
        P._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1: function(sub) {
      var _this = this,
        t1 = _this.$ti;
      sub = H.assertSubtype(H.assertSubtype(sub, "$isStreamSubscription", t1, "$asStreamSubscription"), "$is_BroadcastSubscription", t1, "$as_BroadcastSubscription");
      t1 = sub._async$_next;
      if (t1 == null ? sub == null : t1 === sub)
        return;
      if (H.boolConversionCheck(sub.get$_isFiring()))
        sub._setRemoveAfterFiring$0();
      else {
        _this._removeListener$1(sub);
        if (!H.boolConversionCheck(_this.get$_isFiring()) && H.boolConversionCheck(_this.get$_isEmpty()))
          _this._callOnCancel$0();
      }
      return;
    },
    _recordPause$1: function(subscription) {
      H.assertSubtype(subscription, "$isStreamSubscription", this.$ti, "$asStreamSubscription");
    },
    _recordResume$1: function(subscription) {
      H.assertSubtype(subscription, "$isStreamSubscription", this.$ti, "$asStreamSubscription");
    },
    _addEventError$0: function() {
      if (H.boolConversionCheck(this.get$isClosed()))
        return P.StateError$("Cannot add new events after calling close");
      return P.StateError$("Cannot add new events while doing an addStream");
    },
    add$1: function(_, data) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      if (!H.boolConversionCheck(_this.get$_mayAddEvent()))
        throw H.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    _forEachListener$1: function(action) {
      var t1, id, subscription, next, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [[P._BufferingStreamSubscription, H.getTypeArgumentByIndex(_this, 0)]]});
      if (H.boolConversionCheck(_this.get$_isFiring()))
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      if (H.boolConversionCheck(_this.get$_isEmpty()))
        return;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      id = t1 & 1;
      _this._state = (t1 ^ 3) >>> 0;
      subscription = _this._firstSubscription;
      for (; subscription != null;)
        if (H.boolConversionCheck(subscription._expectsEvent$1(id))) {
          t1 = subscription._eventState;
          if (typeof t1 !== "number")
            return t1.$or();
          subscription._eventState = (t1 | 2) >>> 0;
          action.call$1(subscription);
          subscription._toggleEventId$0();
          next = subscription._async$_next;
          if (H.boolConversionCheck(subscription.get$_removeAfterFiring()))
            _this._removeListener$1(subscription);
          t1 = subscription._eventState;
          if (typeof t1 !== "number")
            return t1.$and();
          subscription._eventState = (t1 & 4294967293) >>> 0;
          subscription = next;
        } else
          subscription = subscription._async$_next;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967293) >>> 0;
      if (H.boolConversionCheck(_this.get$_isEmpty()))
        _this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if (H.boolConversionCheck(this.get$isClosed()) && H.boolConversionCheck(null.get$_mayComplete()))
        null._asyncComplete$1(null);
      P._runGuarded(this.onCancel);
    },
    set$_firstSubscription: function(_firstSubscription) {
      this._firstSubscription = H.assertSubtype(_firstSubscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    set$_lastSubscription: function(_lastSubscription) {
      this._lastSubscription = H.assertSubtype(_lastSubscription, "$is_BroadcastSubscription", this.$ti, "$as_BroadcastSubscription");
    },
    $isEventSink: 1,
    $isStreamConsumer: 1,
    $isStreamSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_StreamControllerBase: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1,
    $isSink: 1
  };
  P._SyncBroadcastStreamController.prototype = {
    get$_mayAddEvent: function() {
      return H.boolConversionCheck(P._BroadcastStreamController.prototype.get$_mayAddEvent.call(this)) && !H.boolConversionCheck(this.get$_isFiring());
    },
    _addEventError$0: function() {
      if (H.boolConversionCheck(this.get$_isFiring()))
        return P.StateError$("Cannot fire new event. Controller is already firing an event");
      return this.super$_BroadcastStreamController$_addEventError();
    },
    _sendData$1: function(data) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(_this, 0));
      if (H.boolConversionCheck(_this.get$_isEmpty()))
        return;
      if (H.boolConversionCheck(_this.get$_hasOneListener())) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$or();
        _this._state = (t1 | 2) >>> 0;
        _this._firstSubscription._add$1(0, data);
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$and();
        _this._state = (t1 & 4294967293) >>> 0;
        if (H.boolConversionCheck(_this.get$_isEmpty()))
          _this._callOnCancel$0();
        return;
      }
      _this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(_this, data));
    },
    $isSynchronousStreamController: 1
  };
  P._SyncBroadcastStreamController__sendData_closure.prototype = {
    call$1: function(subscription) {
      H.assertSubtype(subscription, "$is_BufferingStreamSubscription", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_BufferingStreamSubscription")._add$1(0, this.data);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [[P._BufferingStreamSubscription, H.getTypeArgumentByIndex(this.$this, 0)]]};
    }
  };
  P._AsyncBroadcastStreamController.prototype = {
    _sendData$1: function(data) {
      var subscription,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(P._DelayedData$(data, t1));
    }
  };
  P._AsBroadcastStreamController.prototype = {};
  P.DeferredLibrary.prototype = {};
  P.DeferredLoadException.prototype = {$isException: 1};
  P.FutureOr.prototype = {};
  P.Future.prototype = {};
  P.TimeoutException.prototype = {$isException: 1};
  P.Completer.prototype = {};
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var replacement;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      error = P._nonNullError(error);
      if (!H.boolConversionCheck(this.future.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      replacement = P.Zone_current().errorCallback$2(error, stackTrace);
      if (replacement != null) {
        error = P._nonNullError(replacement.error);
        stackTrace = replacement.stackTrace;
      }
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (!H.boolConversionCheck(t1.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (!H.boolConversionCheck(t1.get$_mayComplete()))
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    }
  };
  P._FutureListener.prototype = {
    get$_zone: function() {
      return this.result._zone;
    },
    get$handlesValue: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) !== 0;
    },
    get$handlesError: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$hasErrorTest: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 6;
    },
    get$handlesComplete: function() {
      var t1 = this.state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 15) === 8;
    },
    get$_onValue: function() {
      return H.functionTypeCheck(this.callback, {func: 1, ret: {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)}, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]});
    },
    get$_whenCompleteAction: function() {
      return H.functionTypeCheck(this.callback, {func: 1});
    },
    get$hasErrorCallback: function() {
      return this.get$_onError() != null;
    },
    handleValue$1: function(sourceResult) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(sourceResult, t1);
      return _this.get$_zone().runUnary$2$2(_this.get$_onValue(), sourceResult, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 1)}, t1);
    },
    matchesErrorTest$1: function(asyncError) {
      H.interceptedTypeCheck(asyncError, "$isAsyncError");
      if (!H.boolConversionCheck(this.get$hasErrorTest()))
        return true;
      return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback, t1, t2, _this = this;
      H.interceptedTypeCheck(asyncError, "$isAsyncError");
      errorCallback = _this.errorCallback;
      t1 = P.Object;
      t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 1)};
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(_this.get$_zone().runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(_this.get$_zone().runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    },
    handleWhenComplete$0: function() {
      return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), null);
    }
  };
  P._Future.prototype = {
    _Future$zoneValue$2: function(value, _zone, $T) {
      this._setValue$1(value);
    },
    _Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    get$_mayComplete: function() {
      return J.$eq$(this._state, 0);
    },
    get$_mayAddListener: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$le();
      return t1 <= 1;
    },
    get$_isChained: function() {
      return J.$eq$(this._state, 2);
    },
    get$_isComplete: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 4;
    },
    get$_hasError: function() {
      return J.$eq$(this._state, 8);
    },
    _setChained$1: function(source) {
      H.interceptedTypeCheck(source, "$is_Future");
      this._state = 2;
      this._resultOrListeners = source;
    },
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      currentZone = P.Zone_current();
      if (currentZone !== C.C__RootZone) {
        f = currentZone.registerUnaryCallback$2$1(f, {futureOr: 1, type: $R}, t1);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = P._Future$($R);
      this._addListener$1(P._FutureListener$then(result, f, onError, t1, $R));
      return result;
    },
    then$2$onError: function(f, onError) {
      return this.then$1$2$onError(f, onError, null);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _setPendingComplete$0: function() {
      this._state = 1;
    },
    _clearPendingComplete$0: function() {
      this._state = 0;
    },
    get$_error: function() {
      return H.interceptedTypeCheck(this._resultOrListeners, "$isAsyncError");
    },
    get$_chainSource: function() {
      return H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
    },
    _setValue$1: function(value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      H.interceptedTypeCheck(error, "$isAsyncError");
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(P.AsyncError$(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    _cloneResult$1: function(source) {
      H.interceptedTypeCheck(source, "$is_Future");
      this._state = H.intTypeCheck(source._state);
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1: function(listener) {
      var source, _this = this;
      H.interceptedTypeCheck(listener, "$is_FutureListener");
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        _this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(_this, listener));
      }
    },
    _prependListeners$1: function(listeners) {
      var existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      H.interceptedTypeCheck(listeners, "$is_FutureListener");
      if (listeners == null)
        return;
      if (H.boolConversionCheck(_this.get$_mayAddListener())) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (H.boolConversionCheck(_this.get$_isChained())) {
          source = _this.get$_chainSource();
          if (!H.boolConversionCheck(source.get$_isComplete())) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        _this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, _this));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      H.interceptedTypeCheck(listeners, "$is_FutureListener");
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        _this._setValue$1(H.assertSubtypeOfRuntimeType(value, t1));
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      listeners = _this._removeListeners$0();
      _this._setValue$1(value);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._setPendingComplete$0();
      _this._zone.scheduleMicrotask$1(new P._Future__asyncComplete_closure(_this, value));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (H.boolConversionCheck(value.get$_hasError())) {
          _this._setPendingComplete$0();
          _this._zone.scheduleMicrotask$1(new P._Future__chainFuture_closure(_this, value));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this._setPendingComplete$0();
      this._zone.scheduleMicrotask$1(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._clearPendingComplete$0();
      t1._complete$1(value);
    },
    $signature: 9
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 99
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._completeWithValue$1(H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, t2, originalSource, _this = this, completeResult = null;
      try {
        completeResult = _this.listener.handleWhenComplete$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (H.boolConversionCheck(_this.hasError)) {
          t1 = _this._box_1.source.get$_error().error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = _this._box_1.source.get$_error();
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && H.boolConversionCheck(completeResult.get$_isComplete())) {
          if (H.boolConversionCheck(completeResult.get$_hasError())) {
            t1 = _this._box_0;
            t1.listenerValueOrError = completeResult.get$_error();
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 82
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, exception, t1, _this = this;
      try {
        _this._box_0.listenerValueOrError = _this.listener.handleValue$1(_this.sourceResult);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = _this._box_1.source.get$_error();
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && H.boolConversionCheck(t1.get$hasErrorCallback())) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_1;
        t2 = t1.source.get$_error().error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1.source.get$_error();
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P._AsyncRun.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t1 = {},
        future = P._Future$(P.int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      t1 = this._box_0;
      t2 = t1.count;
      if (typeof t2 !== "number")
        return t2.$add();
      t1.count = t2 + 1;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P.StreamSubscription.prototype = {};
  P.EventSink.prototype = {$isSink: 1};
  P.StreamView.prototype = {};
  P.StreamConsumer.prototype = {};
  P.StreamSink.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isSink: 1};
  P.StreamTransformer.prototype = {};
  P.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  P.StreamIterator.prototype = {};
  P._ControllerEventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P.StreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P.SynchronousStreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSink: 1};
  P._StreamControllerLifecycle.prototype = {};
  P._StreamControllerBase.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._StreamController.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._SyncStreamControllerDispatch.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $isSynchronousStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_StreamController: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._AsyncStreamControllerDispatch.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isStreamController: 1, $is_StreamControllerLifecycle: 1, $is_StreamControllerBase: 1, $is_StreamController: 1, $is_EventSink: 1, $is_EventDispatch: 1, $isSink: 1};
  P._AsyncStreamController.prototype = {$is_AsyncStreamControllerDispatch: 1};
  P._SyncStreamController.prototype = {$isSynchronousStreamController: 1, $is_SyncStreamControllerDispatch: 1};
  P._ControllerStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), H.boolTypeCheck(cancelOnError));
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._controller);
      if (typeof t1 !== "number")
        return t1.$xor();
      return (t1 ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof P._ControllerStream) {
        t1 = other._controller;
        t2 = this._controller;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      this._controller._recordPause$1(this);
    },
    _onResume$0: function() {
      this._controller._recordResume$1(this);
    }
  };
  P._StreamSinkWrapper.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P._AddStreamState.prototype = {};
  P._StreamControllerAddStreamState.prototype = {};
  P._EventSink.prototype = {};
  P._EventDispatch.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      this.onData$1(onData);
      this.onError$1(0, onError);
      this.onDone$1(onDone);
    },
    onData$1: function(handleData) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(handleData, {func: 1, ret: -1, args: [t1]});
      if (handleData == null)
        handleData = P.async___nullDataHandler$closure();
      this.set$_onData(this._zone.registerUnaryCallback$2$1(handleData, null, t1));
    },
    onError$1: function(_, handleError) {
      H.interceptedTypeCheck(handleError, "$isFunction");
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        H.interceptedTypeCheck(this._zone.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace), "$isFunction");
      else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]}))
        H.interceptedTypeCheck(this._zone.registerUnaryCallback$2$1(handleError, null, P.Object), "$isFunction");
      else
        throw H.wrapException(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
    },
    onDone$1: function(handleDone) {
      H.functionTypeCheck(handleDone, {func: 1, ret: -1});
      if (handleDone == null)
        handleDone = P.async___nullDoneHandler$closure();
      this.set$_onDone(this._zone.registerCallback$1$1(handleDone, -1));
    },
    cancel$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967279) >>> 0;
      if (!H.boolConversionCheck(_this.get$_isCanceled()))
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    get$_isInputPaused: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    get$_isCanceled: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 8) !== 0;
    },
    get$_inCallback: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 32) !== 0;
    },
    get$_hasPending: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 64) !== 0;
    },
    get$_isPaused: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 128;
    },
    get$_canFire: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < 32;
    },
    get$_mayResumeInput: function() {
      if (!H.boolConversionCheck(this.get$_isPaused())) {
        var t1 = this._pending;
        t1 = t1 == null || H.boolConversionCheck(J.get$isEmpty$asx(t1));
      } else
        t1 = false;
      return t1;
    },
    _cancel$0: function() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 8) >>> 0;
      if (H.boolConversionCheck(_this.get$_hasPending()))
        _this._pending.cancelSchedule$0();
      if (!H.boolConversionCheck(_this.get$_inCallback()))
        _this.set$_pending(null);
      _this._cancelFuture = H.interceptedTypeCheck(_this._onCancel$0(), "$isFuture");
    },
    _add$1: function(_, data) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      if (H.boolConversionCheck(_this.get$_isCanceled()))
        return;
      if (H.boolConversionCheck(_this.get$_canFire()))
        _this._sendData$1(data);
      else
        _this._addPending$1(P._DelayedData$(data, t1));
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1, _this = this;
      H.interceptedTypeCheck($event, "$is_DelayedEvent");
      pending = H.assertSubtype(_this._pending, "$is_StreamImplEvents", _this.$ti, "$as_StreamImplEvents");
      if (pending == null) {
        pending = P._StreamImplEvents$(H.getTypeArgumentByIndex(_this, 0));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      if (!H.boolConversionCheck(_this.get$_hasPending())) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$or();
        _this._state = (t1 | 64) >>> 0;
        if (!H.boolConversionCheck(_this.get$_isPaused()))
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var wasInputPaused, t2, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      wasInputPaused = _this.get$_isInputPaused();
      t2 = _this._state;
      if (typeof t2 !== "number")
        return t2.$or();
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967263) >>> 0;
      _this._checkState$1(wasInputPaused);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      H.boolTypeCheck(wasInputPaused);
      if (H.boolConversionCheck(_this.get$_hasPending()) && H.boolConversionCheck(J.get$isEmpty$asx(_this._pending))) {
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$and();
        _this._state = (t1 & 4294967231) >>> 0;
        if (H.boolConversionCheck(_this.get$_isInputPaused()) && H.boolConversionCheck(_this.get$_mayResumeInput())) {
          t1 = _this._state;
          if (typeof t1 !== "number")
            return t1.$and();
          _this._state = (t1 & 4294967291) >>> 0;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if (H.boolConversionCheck(_this.get$_isCanceled())) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = _this.get$_isInputPaused();
        if (wasInputPaused == isInputPaused)
          break;
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$xor();
        _this._state = (t1 ^ 32) >>> 0;
        if (H.boolConversionCheck(isInputPaused))
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = _this._state;
        if (typeof t1 !== "number")
          return t1.$and();
        _this._state = (t1 & 4294967263) >>> 0;
      }
      if (H.boolConversionCheck(_this.get$_hasPending()) && !H.boolConversionCheck(_this.get$_isPaused()))
        _this._pending.schedule$1(_this);
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    set$_onDone: function(_onDone) {
      H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", this.$ti, "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), H.interceptedTypeCheck(onError, "$isFunction"), H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === H.boolTypeCheck(cancelOnError));
      this._onListen$1(subscription);
      return subscription;
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _onListen$1: function(subscription) {
      H.interceptedTypeCheck(subscription, "$isStreamSubscription");
    }
  };
  P._GeneratedStreamImpl.prototype = {};
  P._IterablePendingEvents.prototype = {};
  P._DelayedEvent.prototype = {};
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    $as_DelayedEvent: function() {
    }
  };
  P._DelayedDone.prototype = {$is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {
    get$isScheduled: function() {
      return J.$eq$(this._state, 1);
    },
    get$_eventScheduled: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 1;
    },
    schedule$1: function(dispatch) {
      var _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      if (H.boolConversionCheck(_this.get$isScheduled()))
        return;
      if (H.boolConversionCheck(_this.get$_eventScheduled())) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    cancelSchedule$0: function() {
      if (H.boolConversionCheck(this.get$isScheduled()))
        this._state = 3;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1, _this = this;
      H.interceptedTypeCheck($event, "$is_DelayedEvent");
      t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else
        _this.lastPendingEvent = t1.next = $event;
    },
    handleNext$1: function(dispatch) {
      var $event, t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      $event = _this.firstPendingEvent;
      t1 = H.interceptedTypeCheck($event.next, "$is_DelayedEvent");
      _this.firstPendingEvent = t1;
      if (t1 == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  };
  P._DoneStreamSubscription.prototype = {
    _DoneStreamSubscription$1: function(_onDone, $T) {
      this._schedule$0();
    },
    get$_isScheduled: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    get$isPaused: function() {
      var t1 = this._state;
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 4;
    },
    _schedule$0: function() {
      var t1, _this = this;
      if (H.boolConversionCheck(_this.get$_isScheduled()))
        return;
      _this._zone.scheduleMicrotask$1(_this.get$_sendDone());
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 2) >>> 0;
    },
    cancel$0: function(_) {
      return $.$get$Future__nullFuture();
    },
    _sendDone$0: function() {
      var _this = this,
        t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$and();
      _this._state = (t1 & 4294967293) >>> 0;
      if (H.boolConversionCheck(_this.get$isPaused()))
        return;
      t1 = _this._state;
      if (typeof t1 !== "number")
        return t1.$or();
      _this._state = (t1 | 1) >>> 0;
      t1 = _this._onDone;
      if (t1 != null)
        _this._zone.runGuarded$1(t1);
    },
    $isStreamSubscription: 1
  };
  P._AsBroadcastStream.prototype = {};
  P._BroadcastSubscriptionWrapper.prototype = {$isStreamSubscription: 1};
  P._StreamIterator.prototype = {$isStreamIterator: 1};
  P._EmptyStream.prototype = {};
  P._ForwardingStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._WhereStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._MapStream.prototype = {};
  P._ExpandStream.prototype = {};
  P._HandleErrorStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._TakeStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._StateStreamSubscription.prototype = {$asStreamSubscription: null, $as_EventSink: null, $as_EventDispatch: null, $as_BufferingStreamSubscription: null,
    $as_ForwardingStreamSubscription: function($T) {
      return [$T, $T];
    }
  };
  P._TakeWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._SkipWhileStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._DistinctStream.prototype = {$asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P._EventSinkWrapper.prototype = {$isEventSink: 1, $isSink: 1};
  P._SinkTransformerStreamSubscription.prototype = {
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._StreamSinkTransformer.prototype = {};
  P._BoundSinkStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._HandlerEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P._StreamHandlerTransformer.prototype = {};
  P._StreamBindTransformer.prototype = {};
  P._StreamSubscriptionTransformer.prototype = {};
  P._BoundSubscriptionStream.prototype = {
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._ZoneFunction.prototype = {};
  P.ZoneSpecification.prototype = {};
  P._ZoneSpecification.prototype = {$isZoneSpecification: 1};
  P.ZoneDelegate.prototype = {};
  P.Zone.prototype = {};
  P._ZoneDelegate.prototype = {
    handleUncaughtError$3: function(zone, error, stackTrace) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._delegationTarget.get$_handleUncaughtError();
      implZone = implementation.zone;
      return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
    },
    run$1$2: function(zone, f, $R) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      implementation = this._delegationTarget.get$_async$_run();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(implZone, P._parentDelegate(implZone), zone, f, $R);
    },
    run$2: function(zone, f) {
      return this.run$1$2(zone, f, null);
    },
    runUnary$2$3: function(zone, f, arg, $R, $T) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      implementation = this._delegationTarget.get$_async$_runUnary();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}, 1]}).call$2$5(implZone, P._parentDelegate(implZone), zone, f, arg, $R, $T);
    },
    runUnary$3: function(zone, f, arg) {
      return this.runUnary$2$3(zone, f, arg, null, null);
    },
    runBinary$3$4: function(zone, f, arg1, arg2, $R, T1, T2) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      implementation = this._delegationTarget.get$_async$_runBinary();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}, 1, 2]}).call$3$6(implZone, P._parentDelegate(implZone), zone, f, arg1, arg2, $R, T1, T2);
    },
    runBinary$4: function(zone, f, arg1, arg2) {
      return this.runBinary$3$4(zone, f, arg1, arg2, null, null, null);
    },
    registerCallback$1$2: function(zone, f, $R) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      implementation = this._delegationTarget.get$_registerCallback();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: {func: 1, ret: 0}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(implZone, P._parentDelegate(implZone), zone, f, $R);
    },
    registerCallback$2: function(zone, f) {
      return this.registerCallback$1$2(zone, f, null);
    },
    registerUnaryCallback$2$2: function(zone, f, $R, $T) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      implementation = this._delegationTarget.get$_registerUnaryCallback();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: {func: 1, ret: 0, args: [1]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}]}).call$2$4(implZone, P._parentDelegate(implZone), zone, f, $R, $T);
    },
    registerUnaryCallback$2: function(zone, f) {
      return this.registerUnaryCallback$2$2(zone, f, null, null);
    },
    registerBinaryCallback$3$2: function(zone, f, $R, T1, T2) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      implementation = this._delegationTarget.get$_registerBinaryCallback();
      implZone = implementation.zone;
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}]}).call$3$4(implZone, P._parentDelegate(implZone), zone, f, $R, T1, T2);
    },
    registerBinaryCallback$2: function(zone, f) {
      return this.registerBinaryCallback$3$2(zone, f, null, null, null);
    },
    errorCallback$3: function(zone, error, stackTrace) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._delegationTarget.get$_errorCallback();
      implZone = implementation.zone;
      if (implZone === C.C__RootZone)
        return;
      return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, error, stackTrace);
    },
    scheduleMicrotask$2: function(zone, f) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1});
      implementation = this._delegationTarget.get$_scheduleMicrotask();
      implZone = implementation.zone;
      implementation.$function.call$4(implZone, P._parentDelegate(implZone), zone, f);
    },
    createTimer$3: function(zone, duration, f) {
      var implementation, implZone;
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(f, {func: 1, ret: -1});
      implementation = this._delegationTarget.get$_async$_createTimer();
      implZone = implementation.zone;
      return implementation.$function.call$5(implZone, P._parentDelegate(implZone), zone, duration, f);
    },
    $isZoneDelegate: 1
  };
  P._Zone.prototype = {
    inSameErrorZone$1: function(otherZone) {
      var t1, t2;
      H.interceptedTypeCheck(otherZone, "$isZone");
      if (this !== otherZone) {
        t1 = this.get$errorZone();
        t2 = otherZone.get$errorZone();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $isZone: 1
  };
  P._CustomZone.prototype = {
    get$_delegate: function() {
      var t1 = this._delegateCache;
      if (t1 != null)
        return t1;
      return this._delegateCache = P._ZoneDelegate$(this);
    },
    _CustomZone$3: function($parent, specification, _map) {
      var _this = this,
        t1 = specification.run;
      _this.set$_async$_run(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_async$_run());
      t1 = specification.runUnary;
      _this.set$_async$_runUnary(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_async$_runUnary());
      t1 = specification.runBinary;
      _this.set$_async$_runBinary(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_async$_runBinary());
      t1 = specification.registerCallback;
      _this.set$_registerCallback(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_registerCallback());
      t1 = specification.registerUnaryCallback;
      _this.set$_registerUnaryCallback(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_registerUnaryCallback());
      t1 = specification.registerBinaryCallback;
      _this.set$_registerBinaryCallback(t1 != null ? P._ZoneFunction$(_this, t1, P.Function) : _this.parent.get$_registerBinaryCallback());
      t1 = specification.errorCallback;
      _this.set$_errorCallback(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}) : _this.parent.get$_errorCallback());
      t1 = specification.scheduleMicrotask;
      _this.set$_scheduleMicrotask(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}) : _this.parent.get$_scheduleMicrotask());
      t1 = specification.createTimer;
      _this.set$_async$_createTimer(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}) : _this.parent.get$_async$_createTimer());
      t1 = specification.createPeriodicTimer;
      _this.set$_createPeriodicTimer(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}) : _this.parent.get$_createPeriodicTimer());
      t1 = specification.print;
      _this.set$_print(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}) : _this.parent.get$_print());
      t1 = specification.fork;
      _this.set$_fork(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}) : _this.parent.get$_fork());
      t1 = specification.handleUncaughtError;
      _this.set$_handleUncaughtError(t1 != null ? P._ZoneFunction$(_this, t1, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}) : _this.parent.get$_handleUncaughtError());
    },
    get$errorZone: function() {
      return this._handleUncaughtError.zone;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        this.run$1$1(f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        this.runUnary$2$2(f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      return this.runUnaryGuarded$1$2(f, arg, null);
    },
    bindCallback$1$1: function(f, $R) {
      return new P._CustomZone_bindCallback_closure(this, this.registerCallback$1$1(H.functionTypeCheck(f, {func: 1, ret: $R}), $R), $R);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$1$1(f, null);
    },
    bindUnaryCallback$2$1: function(f, $R, $T) {
      return new P._CustomZone_bindUnaryCallback_closure(this, this.registerUnaryCallback$2$1(H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]}), $R, $T), $T, $R);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$1(f, null, null);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._CustomZone_bindCallbackGuarded_closure(this, this.registerCallback$1$1(H.functionTypeCheck(f, {func: 1, ret: -1}), -1));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._CustomZone_bindUnaryCallbackGuarded_closure(this, this.registerUnaryCallback$2$1(H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), -1, $T), $T);
    },
    bindUnaryCallbackGuarded$1: function(f) {
      return this.bindUnaryCallbackGuarded$1$1(f, null);
    },
    $index: function(_, key) {
      var t3, value,
        t1 = this._async$_map,
        t2 = J.getInterceptor$asx(t1),
        result = t2.$index(t1, key);
      if (result != null || H.boolConversionCheck(t2.containsKey$1(t1, key)))
        return result;
      t3 = this.parent;
      if (t3 != null) {
        value = J.$index$asx(t3, key);
        if (value != null)
          t2.$indexSet(t1, key, value);
        return value;
      }
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var implementation, t1, parentDelegate;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._handleUncaughtError;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, error, stackTrace);
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      var implementation, t1, parentDelegate;
      H.interceptedTypeCheck(specification, "$isZoneSpecification");
      H.interceptedTypeCheck(zoneValues, "$isMap");
      implementation = this._fork;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, specification, zoneValues);
    },
    run$1$1: function(f, $R) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      implementation = this._async$_run;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(t1, parentDelegate, this, f, $R);
    },
    run$1: function(f) {
      return this.run$1$1(f, null);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      implementation = this._async$_runUnary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}, 1]}).call$2$5(t1, parentDelegate, this, f, arg, $R, $T);
    },
    runUnary$2: function(f, arg) {
      return this.runUnary$2$2(f, arg, null, null);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      implementation = this._async$_runBinary;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}, 1, 2]}).call$3$6(t1, parentDelegate, this, f, arg1, arg2, $R, T1, T2);
    },
    runBinary$3: function(f, arg1, arg2) {
      return this.runBinary$3$3(f, arg1, arg2, null, null, null);
    },
    registerCallback$1$1: function(callback, $R) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R});
      implementation = this._registerCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object], ret: {func: 1, ret: 0}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}).call$1$4(t1, parentDelegate, this, callback, $R);
    },
    registerCallback$1: function(callback) {
      return this.registerCallback$1$1(callback, null);
    },
    registerUnaryCallback$2$1: function(callback, $R, $T) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R, args: [$T]});
      implementation = this._registerUnaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object], ret: {func: 1, ret: 0, args: [1]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}]}).call$2$4(t1, parentDelegate, this, callback, $R, $T);
    },
    registerUnaryCallback$1: function(callback) {
      return this.registerUnaryCallback$2$1(callback, null, null);
    },
    registerBinaryCallback$3$1: function(callback, $R, T1, T2) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(callback, {func: 1, ret: $R, args: [T1, T2]});
      implementation = this._registerBinaryCallback;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return H.functionTypeCheck(implementation.$function, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}]}).call$3$4(t1, parentDelegate, this, callback, $R, T1, T2);
    },
    registerBinaryCallback$1: function(callback) {
      return this.registerBinaryCallback$3$1(callback, null, null, null);
    },
    errorCallback$2: function(error, stackTrace) {
      var implementation, implementationZone, parentDelegate;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      implementation = this._errorCallback;
      implementationZone = implementation.zone;
      if (implementationZone === C.C__RootZone)
        return;
      parentDelegate = P._parentDelegate(implementationZone);
      return implementation.$function.call$5(implementationZone, parentDelegate, this, error, stackTrace);
    },
    scheduleMicrotask$1: function(f) {
      var implementation, t1, parentDelegate;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      implementation = this._scheduleMicrotask;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, f);
    },
    createTimer$2: function(duration, f) {
      var implementation, t1, parentDelegate;
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(f, {func: 1, ret: -1});
      implementation = this._async$_createTimer;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$5(t1, parentDelegate, this, duration, f);
    },
    print$1: function(_, line) {
      var implementation, t1, parentDelegate;
      H.stringTypeCheck(line);
      implementation = this._print;
      t1 = implementation.zone;
      parentDelegate = P._parentDelegate(t1);
      return implementation.$function.call$4(t1, parentDelegate, this, line);
    },
    set$_async$_run: function(_run) {
      this._async$_run = H.assertSubtype(_run, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_async$_runUnary: function(_runUnary) {
      this._async$_runUnary = H.assertSubtype(_runUnary, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_async$_runBinary: function(_runBinary) {
      this._async$_runBinary = H.assertSubtype(_runBinary, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerCallback: function(_registerCallback) {
      this._registerCallback = H.assertSubtype(_registerCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerUnaryCallback: function(_registerUnaryCallback) {
      this._registerUnaryCallback = H.assertSubtype(_registerUnaryCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_registerBinaryCallback: function(_registerBinaryCallback) {
      this._registerBinaryCallback = H.assertSubtype(_registerBinaryCallback, "$is_ZoneFunction", [P.Function], "$as_ZoneFunction");
    },
    set$_errorCallback: function(_errorCallback) {
      this._errorCallback = H.assertSubtype(_errorCallback, "$is_ZoneFunction", [{func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}], "$as_ZoneFunction");
    },
    set$_scheduleMicrotask: function(_scheduleMicrotask) {
      this._scheduleMicrotask = H.assertSubtype(_scheduleMicrotask, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}], "$as_ZoneFunction");
    },
    set$_async$_createTimer: function(_createTimer) {
      this._async$_createTimer = H.assertSubtype(_createTimer, "$is_ZoneFunction", [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}], "$as_ZoneFunction");
    },
    set$_createPeriodicTimer: function(_createPeriodicTimer) {
      this._createPeriodicTimer = H.assertSubtype(_createPeriodicTimer, "$is_ZoneFunction", [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}], "$as_ZoneFunction");
    },
    set$_print: function(_print) {
      this._print = H.assertSubtype(_print, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}], "$as_ZoneFunction");
    },
    set$_fork: function(_fork) {
      this._fork = H.assertSubtype(_fork, "$is_ZoneFunction", [{func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}], "$as_ZoneFunction");
    },
    set$_handleUncaughtError: function(_handleUncaughtError) {
      this._handleUncaughtError = H.assertSubtype(_handleUncaughtError, "$is_ZoneFunction", [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}], "$as_ZoneFunction");
    },
    get$_async$_run: function() {
      return this._async$_run;
    },
    get$_async$_runUnary: function() {
      return this._async$_runUnary;
    },
    get$_async$_runBinary: function() {
      return this._async$_runBinary;
    },
    get$_registerCallback: function() {
      return this._registerCallback;
    },
    get$_registerUnaryCallback: function() {
      return this._registerUnaryCallback;
    },
    get$_registerBinaryCallback: function() {
      return this._registerBinaryCallback;
    },
    get$_errorCallback: function() {
      return this._errorCallback;
    },
    get$_scheduleMicrotask: function() {
      return this._scheduleMicrotask;
    },
    get$_async$_createTimer: function() {
      return this._async$_createTimer;
    },
    get$_createPeriodicTimer: function() {
      return this._createPeriodicTimer;
    },
    get$_print: function() {
      return this._print;
    },
    get$_fork: function() {
      return this._fork;
    },
    get$_handleUncaughtError: function() {
      return this._handleUncaughtError;
    },
    get$parent: function(receiver) {
      return this.parent;
    },
    get$_async$_map: function() {
      return this._async$_map;
    }
  };
  P._CustomZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.registered, this.R);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._CustomZone_bindUnaryCallback_closure.prototype = {
    call$1: function(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.registered, H.assertSubtypeOfRuntimeType(arg, t1), _this.R, t1);
    },
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T]};
    }
  };
  P._CustomZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.registered);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._CustomZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.registered, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = P.NullThrownError$() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      P._rethrow(t1, t2);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._RootZone.prototype = {
    get$_async$_run: function() {
      return C._ZoneFunction__RootZone__rootRun;
    },
    get$_async$_runUnary: function() {
      return C._ZoneFunction__RootZone__rootRunUnary;
    },
    get$_async$_runBinary: function() {
      return C._ZoneFunction__RootZone__rootRunBinary;
    },
    get$_registerCallback: function() {
      return C._ZoneFunction__RootZone__rootRegisterCallback;
    },
    get$_registerUnaryCallback: function() {
      return C._ZoneFunction_Eeh;
    },
    get$_registerBinaryCallback: function() {
      return C._ZoneFunction_7G2;
    },
    get$_errorCallback: function() {
      return C._ZoneFunction__RootZone__rootErrorCallback;
    },
    get$_scheduleMicrotask: function() {
      return C._ZoneFunction__RootZone__rootScheduleMicrotask;
    },
    get$_async$_createTimer: function() {
      return C._ZoneFunction__RootZone__rootCreateTimer;
    },
    get$_createPeriodicTimer: function() {
      return C._ZoneFunction_3bB;
    },
    get$_print: function() {
      return C._ZoneFunction__RootZone__rootPrint;
    },
    get$_fork: function() {
      return C._ZoneFunction__RootZone__rootFork;
    },
    get$_handleUncaughtError: function() {
      return C._ZoneFunction_NMc;
    },
    get$parent: function(_) {
      return;
    },
    get$_async$_map: function() {
      return $.$get$_RootZone__rootMap();
    },
    get$_delegate: function() {
      var t1 = $._RootZone__rootDelegate;
      if (t1 != null)
        return t1;
      return $._RootZone__rootDelegate = P._ZoneDelegate$(this);
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      return this.runUnaryGuarded$1$2(f, arg, null);
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$1$1(f, null);
    },
    bindUnaryCallback$2$1: function(f, $R, $T) {
      return new P._RootZone_bindUnaryCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]}), $T, $R);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$1(f, null, null);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    bindUnaryCallbackGuarded$1: function(f) {
      return this.bindUnaryCallbackGuarded$1$1(f, null);
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      P._rootHandleUncaughtError(null, null, this, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    },
    fork$2$specification$zoneValues: function(specification, zoneValues) {
      return P._rootFork(null, null, this, H.interceptedTypeCheck(specification, "$isZoneSpecification"), H.interceptedTypeCheck(zoneValues, "$isMap"));
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    run$1: function(f) {
      return this.run$1$1(f, null);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runUnary$2: function(f, arg) {
      return this.runUnary$2$2(f, arg, null, null);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    runBinary$3: function(f, arg1, arg2) {
      return this.runBinary$3$3(f, arg1, arg2, null, null, null);
    },
    registerCallback$1$1: function(f, $R) {
      return H.functionTypeCheck(f, {func: 1, ret: $R});
    },
    registerCallback$1: function(f) {
      return this.registerCallback$1$1(f, null);
    },
    registerUnaryCallback$2$1: function(f, $R, $T) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
    },
    registerUnaryCallback$1: function(f) {
      return this.registerUnaryCallback$2$1(f, null, null);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    },
    registerBinaryCallback$1: function(f) {
      return this.registerBinaryCallback$3$1(f, null, null, null);
    },
    errorCallback$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      return;
    },
    scheduleMicrotask$1: function(f) {
      P._rootScheduleMicrotask(null, null, this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    createTimer$2: function(duration, f) {
      return P.Timer__createTimer(H.interceptedTypeCheck(duration, "$isDuration"), H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    print$1: function(_, line) {
      H.printToConsole(H.stringTypeCheck(line));
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindUnaryCallback_closure.prototype = {
    call$1: function(arg) {
      var _this = this,
        t1 = _this.T;
      return _this.$this.runUnary$2$2(_this.f, H.assertSubtypeOfRuntimeType(arg, t1), _this.R, t1);
    },
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T]};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P.runZoned_closure.prototype = {
    call$5: function($self, $parent, zone, error, stackTrace) {
      var e, s, t1, t2, t3, exception;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      try {
        t1 = this._box_0;
        t2 = -1;
        t3 = P.Object;
        if (t1.binaryOnError != null)
          J.get$parent$x($self).runBinary$3$3(t1.binaryOnError, error, stackTrace, t2, t3, P.StackTrace);
        else
          J.get$parent$x($self).runUnary$2$2(t1.unaryOnError, error, t2, t3);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = e;
        if (t1 == null ? error == null : t1 === error)
          $parent.handleUncaughtError$3(zone, error, stackTrace);
        else
          $parent.handleUncaughtError$3(zone, e, s);
      }
    },
    "call*": "call$5",
    $requiredArgCount: 5,
    $signature: 86
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    get$keys: function(_) {
      return P._HashMapKeyIterable$(this, H.getTypeArgumentByIndex(this, 0));
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new P._HashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (H.boolConversionCheck(P._HashMap__isStringKey(key))) {
        strings = this._collection$_strings;
        return strings == null ? false : P._HashMap__hasTableEntry(strings, key);
      } else if (H.boolConversionCheck(P._HashMap__isNumericKey(key))) {
        nums = this._collection$_nums;
        return nums == null ? false : P._HashMap__hasTableEntry(nums, key);
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var t1,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      t1 = this._findBucketIndex$2(this._collection$_getBucket$2(rest, key), key);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (H.boolConversionCheck(P._HashMap__isStringKey(key))) {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (H.boolConversionCheck(P._HashMap__isNumericKey(key))) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return;
      bucket = this._collection$_getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      if (typeof index !== "number")
        return index.$lt();
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (H.boolConversionCheck(P._HashMap__isStringKey(key))) {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (H.boolConversionCheck(P._HashMap__isNumericKey(key))) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, t1, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this._collection$_length = H.intTypeCheck(t1 + 1);
        _this._keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          t1 = _this._collection$_length;
          if (typeof t1 !== "number")
            return t1.$add();
          _this._collection$_length = H.intTypeCheck(t1 + 1);
          _this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(_this, 1)]});
      keys = _this._computeKeys$0();
      $length = J.get$length$asx(keys);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        key = keys[i];
        action.call$2(H.assertSubtypeOfRuntimeType(key, t1), _this.$index(0, key));
        if (keys !== _this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._keys;
      if (t1 != null)
        return t1;
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return H.iae(t1);
      result = new Array(t1);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (!H.boolConversionCheck(P._HashMap__hasTableEntry(table, key))) {
        t1 = _this._collection$_length;
        if (typeof t1 !== "number")
          return t1.$add();
        _this._collection$_length = H.intTypeCheck(t1 + 1);
        _this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _collection$_getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (H.boolConversionCheck(J.$eq$(bucket[i], key)))
          return i;
      return -1;
    },
    $isHashMap: 1,
    get$_collection$_length: function(receiver) {
      return this._collection$_length;
    },
    get$_keys: function() {
      return this._keys;
    }
  };
  P._HashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return J.$index$asx(t1, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  P._IdentityHashMap.prototype = {};
  P._CustomHashMap.prototype = {};
  P._CustomHashMap_closure.prototype = {$signature: 31};
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return H.intTypeCheck(J.get$_collection$_length$x(this._collection$_map));
    },
    get$isEmpty: function(_) {
      return J.$eq$(J.get$_collection$_length$x(this._collection$_map), 0);
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return P._HashMapKeyIterator$(t1, H.listTypeCheck(t1._computeKeys$0()), H.getTypeArgumentByIndex(this, 0));
    },
    contains$1: function(_, element) {
      return H.boolTypeCheck(J.containsKey$1$x(this._collection$_map, element));
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1.get$_keys())
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = keys.length;
        if (typeof offset !== "number")
          return offset.$ge();
        if (offset >= t1) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(keys[offset]);
          _this._offset = offset + 1;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_keys: function() {
      return this._keys;
    }
  };
  P._LinkedIdentityHashMap.prototype = {};
  P._Es6LinkedIdentityHashMap.prototype = {};
  P._Es6MapIterable.prototype = {};
  P._Es6MapIterator.prototype = {$isIterator: 1};
  P._LinkedCustomHashMap.prototype = {};
  P._HashSet.prototype = {$isHashSet: 1};
  P._IdentityHashSet.prototype = {};
  P._CustomHashSet.prototype = {};
  P._HashSetIterator.prototype = {$isIterator: 1};
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      return P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return J.$eq$(this._collection$_length, 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (H.boolConversionCheck(P._LinkedHashSet__isStringElement(object))) {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(strings, object), "$is_LinkedHashSetCell") != null;
      } else if (H.boolConversionCheck(P._LinkedHashSet__isNumericElement(object))) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(nums, object), "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var t1,
        rest = this._collection$_rest;
      if (rest == null)
        return false;
      t1 = this._findBucketIndex$2(this._collection$_getBucket$2(rest, object), object);
      if (typeof t1 !== "number")
        return t1.$ge();
      return t1 >= 0;
    },
    get$first: function(_) {
      var t1 = this._collection$_first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(this, 0));
    },
    get$last: function(_) {
      var t1 = this._collection$_last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(this, 0));
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (H.boolConversionCheck(P._LinkedHashSet__isStringElement(element))) {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (H.boolConversionCheck(P._LinkedHashSet__isNumericElement(element))) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._collection$_add$1(0, element);
    },
    _collection$_add$1: function(_, element) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        P._LinkedHashSet__setTableEntry(rest, hash, [_this._collection$_newLinkedCell$1(element)]);
      else {
        index = _this._findBucketIndex$2(bucket, element);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(P._LinkedHashSet__getTableEntry(table, element), "$is_LinkedHashSetCell") != null)
        return false;
      P._LinkedHashSet__setTableEntry(table, element, this._collection$_newLinkedCell$1(element));
      return true;
    },
    _collection$_modified$0: function() {
      var t1 = this._collection$_modifications;
      if (typeof t1 !== "number")
        return t1.$add();
      this._collection$_modifications = 1073741823 & t1 + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, t1, _this = this,
        cell = P._LinkedHashSetCell$(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      t1 = _this._collection$_length;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._collection$_length = H.intTypeCheck(t1 + 1);
      _this._collection$_modified$0();
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _collection$_getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (H.boolConversionCheck(J.$eq$(bucket[i]._collection$_element, element)))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1,
    get$_collection$_length: function(receiver) {
      return this._collection$_length;
    },
    get$_collection$_first: function() {
      return this._collection$_first;
    },
    get$_collection$_modifications: function() {
      return this._collection$_modifications;
    }
  };
  P._LinkedIdentityHashSet.prototype = {};
  P._LinkedCustomHashSet.prototype = {};
  P._LinkedCustomHashSet_closure.prototype = {$signature: 31};
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    _LinkedHashSetIterator$2: function(_set, _modifications, $E) {
      this._collection$_cell = H.interceptedTypeCheck(this._set.get$_collection$_first(), "$is_LinkedHashSetCell");
    },
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (!H.boolConversionCheck(J.$eq$(_this._collection$_modifications, t1.get$_collection$_modifications())))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = H.interceptedTypeCheck(_this._collection$_cell._collection$_next, "$is_LinkedHashSetCell");
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1,
    get$_collection$_modifications: function() {
      return this._collection$_modifications;
    }
  };
  P.UnmodifiableListView.prototype = {};
  P.HashMap.prototype = {$isMap: 1};
  P.HashMap_HashMap$from_closure.prototype = {
    call$2: function(k, v) {
      J.$indexSet$ax(this.result, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P.HashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.IterableMixin.prototype = {$isIterable: 1};
  P.IterableBase.prototype = {};
  P.HasNextIterator.prototype = {};
  P.LinkedHashMap.prototype = {$isMap: 1};
  P.LinkedHashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.LinkedList0.prototype = {};
  P._LinkedListIterator0.prototype = {$isIterator: 1};
  P.LinkedListEntry.prototype = {};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return H.ListIterator$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    get$first: function(receiver) {
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      var t1;
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      return this.$index(receiver, t1 - 1);
    },
    get$single: function(receiver) {
      var t1;
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (H.boolConversionCheck(J.$eq$(this.$index(receiver, i), element)))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1: function(receiver, separator) {
      var buffer;
      H.stringTypeCheck(separator);
      if (H.boolConversionCheck(J.$eq$(this.get$length(receiver), 0)))
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.WhereIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.MappedListIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.ExpandIterable$(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), t1, $T);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, H.intTypeCheck(count), null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    skipWhile$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return H.SkipWhileIterable$(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    take$1: function(receiver, count) {
      return H.SubListIterable$(receiver, 0, H.intTypeCheck(count), H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      if (H.boolConversionCheck(H.boolTypeCheck(growable))) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(receiver));
      } else {
        t2 = _this.get$length(receiver);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, element, i0, _this = this;
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      i = _this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); H.boolConversionCheck(t1.moveNext$0()); i = i0) {
        element = J.get$current$z(t1);
        if (typeof i !== "number")
          return i.$add();
        i0 = i + 1;
        _this.set$length(receiver, i0);
        _this.$indexSet(receiver, i, element);
      }
    },
    remove$1: function(receiver, element) {
      var t1, i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (H.boolConversionCheck(J.$eq$(this.$index(receiver, i), element))) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
        ++i;
      }
      return false;
    },
    _closeGap$2: function(receiver, start, end) {
      var $length, size, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      $length = _this.get$length(receiver);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      size = end - start;
      if (typeof $length !== "number")
        return H.iae($length);
      i = end;
      for (; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    removeLast$0: function(receiver) {
      var t1, result, _this = this;
      if (H.boolConversionCheck(J.$eq$(_this.get$length(receiver), 0)))
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      result = _this.$index(receiver, t1 - 1);
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      _this.set$length(receiver, t1 - 1);
      return result;
    },
    $add: function(receiver, other) {
      var result, t2, _this = this,
        t1 = [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      t1 = _this.get$length(receiver);
      t2 = J.get$length$asx(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.set$length(result, t1 + t2);
      C.JSArray_methods.setRange$3(result, 0, _this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, _this.get$length(receiver), result.length, other);
      return result;
    },
    sublist$2: function(receiver, start, end) {
      var listLength, $length, result, i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        this.$indexSet(receiver, i, fill);
        ++i;
      }
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var t1, $length, otherStart, otherList, t2, i, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      H.intTypeCheck(skipCount);
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.toList$1$growable$ax(J.skip$1$ax(iterable, skipCount), false);
        otherStart = 0;
      }
      if (typeof otherStart !== "number")
        return otherStart.$add();
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, newContents) {
      var t1, removeLength, insertLength, insertEnd, newLength, _this = this;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(newContents, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      t1 = J.getInterceptor$(newContents);
      if (!t1.$isEfficientLengthIterable)
        newContents = t1.toList$0(newContents);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      removeLength = end - start;
      insertLength = J.get$length$asx(newContents);
      if (typeof insertLength !== "number")
        return H.iae(insertLength);
      insertEnd = start + insertLength;
      if (removeLength >= insertLength) {
        _this.setRange$3(receiver, start, insertEnd, newContents);
        if (removeLength > insertLength)
          _this._closeGap$2(receiver, insertEnd, end);
      } else {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return t1.$add();
        newLength = t1 + (insertLength - removeLength);
        _this.set$length(receiver, newLength);
        _this.setRange$4(receiver, insertEnd, newLength, receiver, end);
        _this.setRange$3(receiver, start, insertEnd, newContents);
      }
    },
    insert$2: function(receiver, index, element) {
      var t1, _this = this;
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      P.ArgumentError_checkNotNull(index, "index");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = _this.get$length(receiver);
      if (index == null ? t1 == null : index === t1) {
        _this.add$1(receiver, element);
        return;
      }
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$length(receiver, t1 + 1);
      if (typeof index !== "number")
        return index.$add();
      _this.setRange$4(receiver, index + 1, _this.get$length(receiver), receiver, index);
      _this.$indexSet(receiver, index, element);
    },
    removeAt$1: function(receiver, index) {
      var result;
      H.intTypeCheck(index);
      result = this.$index(receiver, index);
      if (typeof index !== "number")
        return index.$add();
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, t2, _this = this;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      P.RangeError_checkValueInInterval(index, 0, _this.get$length(receiver), "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable || iterable === receiver)
        iterable = t1.toList$0(iterable);
      t1 = J.getInterceptor$asx(iterable);
      insertionLength = t1.get$length(iterable);
      t2 = _this.get$length(receiver);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      _this.set$length(receiver, t2 + insertionLength);
      if (!H.boolConversionCheck(J.$eq$(t1.get$length(iterable), insertionLength))) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return t1.$sub();
        _this.set$length(receiver, t1 - insertionLength);
        throw H.wrapException(P.ConcurrentModificationError$(iterable));
      }
      if (typeof index !== "number")
        return index.$add();
      _this.setRange$4(receiver, index + insertionLength, _this.get$length(receiver), receiver, index);
      _this.setAll$2(receiver, index, iterable);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, element, index0;
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)], "$asIterable");
      t1 = J.getInterceptor$(iterable);
      if (!!t1.$isList) {
        t1 = t1.get$length(iterable);
        if (typeof index !== "number")
          return index.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.setRange$3(receiver, index, index + t1, iterable);
      } else
        for (t1 = t1.get$iterator(iterable); H.boolConversionCheck(t1.moveNext$0()); index = index0) {
          element = J.get$current$z(t1);
          if (typeof index !== "number")
            return index.$add();
          index0 = index + 1;
          this.$indexSet(receiver, index, element);
        }
    },
    get$reversed: function(receiver) {
      return H.ReversedListIterable$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!H.boolConversionCheck(t1.first))
        J.write$1$z(this.result, ", ");
      t1.first = false;
      t1 = this.result;
      t2 = J.getInterceptor$z(t1);
      t2.write$1(t1, k);
      t2.write$1(t1, ": ");
      t2.write$1(t1, v);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys(receiver)); H.boolConversionCheck(t1.moveNext$0());) {
        key = J.get$current$z(t1);
        action.call$2(key, _this.$index(receiver, key));
      }
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    get$isNotEmpty: function(receiver) {
      return J.get$isNotEmpty$asx(this.get$keys(receiver));
    },
    get$values: function(receiver) {
      return P._MapBaseValueIterable$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P.UnmodifiableMapBase.prototype = {$is_UnmodifiableMapMixin: 1};
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$first: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$first$ax(t2.get$keys(t1)));
    },
    get$last: function(_) {
      var t1 = this._collection$_map,
        t2 = J.getInterceptor$x(t1);
      return t2.$index(t1, J.get$last$ax(t2.get$keys(t1)));
    },
    get$iterator: function(_) {
      return P._MapBaseValueIterator$(this._collection$_map, H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (H.boolConversionCheck(t1.moveNext$0())) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, J.get$current$z(t1)));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function(_) {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($K, $V) {
      return [$V];
    },
    get$_keys: function() {
      return this._keys;
    }
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    $isMap: 1
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      J.$indexSet$ax(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._collection$_map, key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._collection$_map);
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values: function(_) {
      return J.get$values$x(this._collection$_map);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {$is_UnmodifiableMapMixin: 1};
  P.Queue.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P._DoubleLink.prototype = {};
  P.DoubleLinkedQueueEntry.prototype = {
    $as_DoubleLink: function($E) {
      return [[P.DoubleLinkedQueueEntry, $E]];
    }
  };
  P._DoubleLinkedQueueEntry.prototype = {};
  P._DoubleLinkedQueueElement.prototype = {};
  P._DoubleLinkedQueueSentinel.prototype = {};
  P.DoubleLinkedQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  P._DoubleLinkedQueueIterator.prototype = {$isIterator: 1};
  P.ListQueue.prototype = {$isQueue: 1};
  P._ListQueueIterator.prototype = {$isIterator: 1};
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(J.$eq$(this.get$length(this), 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "SetMixin", 0);
      if (H.boolConversionCheck(H.boolTypeCheck(growable))) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      for (t1 = _this.get$iterator(_this), i = 0; H.boolConversionCheck(t1.moveNext$0()); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, J.get$current$z(t1));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "SetMixin", 0);
      return H.EfficientLengthMappedIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1: function(_, f) {
      var t1 = H.getRuntimeTypeArgument(this, "SetMixin", 0);
      return H.WhereIterable$(this, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(this, "SetMixin", 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; H.boolConversionCheck(t1.moveNext$0());)
        value = combine.call$2(value, J.get$current$z(t1));
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(0, iterator.get$current(iterator));
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        buffer.write$1(0, iterator.get$current(iterator));
        for (; H.boolConversionCheck(iterator.moveNext$0());) {
          buffer.write$1(0, separator);
          buffer.write$1(0, iterator.get$current(iterator));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(n), H.getRuntimeTypeArgument(this, "SetMixin", 0));
    },
    skipWhile$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "SetMixin", 0);
      return H.SkipWhileIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (H.boolConversionCheck(it.moveNext$0()));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; H.boolConversionCheck(t1.moveNext$0());) {
        element = J.get$current$z(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P.SetBase.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(J.$eq$(this.get$length(this), 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = _this.$ti;
      if (H.boolConversionCheck(H.boolTypeCheck(growable))) {
        result = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, t1);
      }
      for (t1 = _this.get$iterator(_this), i = 0; H.boolConversionCheck(t1.moveNext$0()); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, J.get$current$z(t1));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.EfficientLengthMappedIterable$(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    where$1: function(_, f) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.WhereIterable$(this, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; H.boolConversionCheck(t1.moveNext$0());)
        value = combine.call$2(value, J.get$current$z(t1));
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(0, iterator.get$current(iterator));
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        buffer.write$1(0, iterator.get$current(iterator));
        for (; H.boolConversionCheck(iterator.moveNext$0());) {
          buffer.write$1(0, separator);
          buffer.write$1(0, iterator.get$current(iterator));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(n), H.getTypeArgumentByIndex(this, 0));
    },
    skipWhile$1: function(_, test) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.SkipWhileIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (H.boolConversionCheck(it.moveNext$0()));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; H.boolConversionCheck(t1.moveNext$0());) {
        element = J.get$current$z(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableSet.prototype = {};
  P._SplayTreeNode.prototype = {};
  P._SplayTreeMapNode.prototype = {
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  };
  P._SplayTree.prototype = {};
  P._TypeTest.prototype = {};
  P.SplayTreeMap.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeIterator.prototype = {$isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    }
  };
  P._SplayTreeKeyIterable.prototype = {};
  P._SplayTreeValueIterable.prototype = {
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P._SplayTreeValueIterator.prototype = {};
  P._SplayTreeNodeIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, [P._SplayTreeNode, $K]];
    },
    $asIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  };
  P.SplayTreeSet.prototype = {$isEfficientLengthIterable: 1, $isIterableMixin: 1, $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._ListBase_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._SetBase_Object_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isSetMixin: 1, $isIterable: 1, $isSet: 1};
  P._SplayTreeMap__SplayTree_MapMixin.prototype = {$isMapMixin: 1,
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {$isIterableMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1
  };
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterableMixin: 1, $isSetMixin: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {$is_UnmodifiableMapMixin: 1};
  P._JsonMap.prototype = {
    $asMapBase: function() {
      return [P.String, null];
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMapKeyIterable.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P._JsonDecoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringSink];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.AsciiCodec.prototype = {
    get$name: function(_) {
      return "us-ascii";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(_, bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.AsciiDecoder_false_127.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.AsciiEncoder_127;
    },
    get$decoder: function() {
      return C.AsciiDecoder_false_127;
    }
  };
  P._UnicodeSubsetEncoder.prototype = {
    convert$1: function(string) {
      var end, $length, result, t1, t2, t3, i, codeUnit, t4;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      result = H.NativeUint8List_NativeUint8List($length);
      for (t1 = this._subsetMask, t2 = J.getInterceptor$i(t1), t3 = J.getInterceptor$s(string), i = 0; i < $length; ++i) {
        codeUnit = t3._codeUnitAt$1(string, i);
        t4 = t2.$not(t1);
        if (typeof codeUnit !== "number")
          return codeUnit.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((codeUnit & t4) >>> 0 !== 0)
          throw H.wrapException(P.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.AsciiEncoder.prototype = {};
  P._UnicodeSubsetEncoderSink.prototype = {};
  P._UnicodeSubsetDecoder.prototype = {
    convert$1: function(bytes) {
      var t1, byteCount, t2, t3, i, byte, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(bytes);
      byteCount = t1.get$length(bytes);
      P.RangeError_checkValidRange(0, null, byteCount);
      if (typeof byteCount !== "number")
        return H.iae(byteCount);
      t2 = this._subsetMask;
      t3 = J.getInterceptor$i(t2);
      i = 0;
      for (; i < byteCount; ++i) {
        byte = t1.$index(bytes, i);
        t4 = t3.$not(t2);
        if (typeof byte !== "number")
          return byte.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((byte & t4) >>> 0 !== 0) {
          if (!H.boolConversionCheck(this._allowInvalid))
            throw H.wrapException(P.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, byteCount);
        }
      }
      return P.String_String$fromCharCodes(bytes, 0, byteCount);
    },
    _convertInvalid$3: function(bytes, start, end) {
      var buffer, t1, t2, t3, i, value, t4;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      buffer = P.StringBuffer$("");
      t1 = this._subsetMask;
      t2 = J.getInterceptor$i(t1);
      t3 = J.getInterceptor$asx(bytes);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        value = t3.$index(bytes, i);
        t4 = t2.$not(t1);
        if (typeof value !== "number")
          return value.$and();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if ((value & t4) >>> 0 !== 0)
          value = 65533;
        buffer.writeCharCode$1(value);
        ++i;
      }
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.AsciiDecoder.prototype = {};
  P._ErrorHandlingAsciiDecoderSink.prototype = {};
  P._SimpleAsciiDecoderSink.prototype = {};
  P.Base64Codec.prototype = {
    get$encoder: function() {
      return C.C_Base64Encoder;
    },
    get$decoder: function() {
      return C.C_Base64Decoder;
    },
    normalize$3: function(_, source, start, end) {
      var inverseAlphabet, t1, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, char0, value, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      H.stringTypeCheck(source);
      H.intTypeCheck(start);
      end = P.RangeError_checkValidRange(start, H.intTypeCheck(end), source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      t1 = J.getInterceptor$asx(inverseAlphabet);
      t2 = J.getInterceptor$asx(source);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        c$0: {
          i0 = i + 1;
          char = t2.codeUnitAt$1(source, i);
          if (char === 37) {
            i1 = i0 + 2;
            if (i1 <= end) {
              char0 = H.parseHexByte(source, i0);
              if (char0 === 37)
                char0 = -1;
              i0 = i1;
            } else
              char0 = -1;
          } else
            char0 = char;
          if (typeof char0 !== "number")
            return H.iae(char0);
          if (0 <= char0 && char0 <= 127) {
            value = t1.$index(inverseAlphabet, char0);
            if (typeof value !== "number")
              return value.$ge();
            if (value >= 0) {
              char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
              if (char0 == char)
                break c$0;
              char = char0;
            } else {
              if (value === -1) {
                if (firstPadding < 0) {
                  t3 = buffer == null ? null : buffer.get$length(buffer);
                  if (t3 == null)
                    t3 = 0;
                  if (typeof sliceStart !== "number")
                    return H.iae(sliceStart);
                  if (typeof t3 !== "number")
                    return t3.$add();
                  firstPadding = t3 + (i - sliceStart);
                  firstPaddingSourceIndex = i;
                }
                ++paddingCount;
                if (char === 61)
                  break c$0;
              }
              char = char0;
            }
            if (value !== -2) {
              if (buffer == null)
                buffer = P.StringBuffer$("");
              buffer.write$1(0, C.JSString_methods.substring$2(source, sliceStart, i));
              buffer.writeCharCode$1(char);
              sliceStart = i0;
              break c$0;
            }
          }
          throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
        }
        i = i0;
      }
      if (buffer != null) {
        buffer.write$1(0, t2.substring$2(source, sliceStart, end));
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, buffer.get$length(buffer));
        else {
          t1 = buffer.get$length(buffer);
          if (typeof t1 !== "number")
            return t1.$sub();
          endLength = C.JSNumber_methods.$mod(t1 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            buffer.write$1(0, "=");
            ++endLength;
          }
        }
        return C.JSString_methods.replaceRange$3(source, start, end, buffer.toString$0(0));
      }
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = t2.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    convert$1: function(input) {
      var t1;
      H.assertSubtype(input, "$isList", [P.int], "$asList");
      t1 = J.getInterceptor$asx(input);
      if (H.boolConversionCheck(t1.get$isEmpty(input)))
        return "";
      return P.String_String$fromCharCodes(P._Base64Encoder$(false).encode$4(input, 0, t1.get$length(input), true), 0, null);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Base64Encoder.prototype = {
    createBuffer$1: function(_, bufferLength) {
      return H.NativeUint8List_NativeUint8List(H.intTypeCheck(bufferLength));
    },
    encode$4: function(bytes, start, end, isLast) {
      var count, byteCount, fullChunks, bufferLength, output, _this = this;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.boolTypeCheck(isLast);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      count = P._Base64Encoder__stateCount(_this._convert$_state);
      if (typeof count !== "number")
        return count.$add();
      byteCount = count + (end - start);
      fullChunks = C.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (H.boolConversionCheck(isLast) && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(0, bufferLength);
      _this._convert$_state = H.intTypeCheck(P._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state));
      if (bufferLength > 0)
        return output;
      return;
    }
  };
  P._BufferCachingBase64Encoder.prototype = {};
  P._Base64EncoderSink.prototype = {};
  P._AsciiBase64EncoderSink.prototype = {};
  P._Utf8Base64EncoderSink.prototype = {};
  P.Base64Decoder.prototype = {
    convert$1: function(input) {
      var end, decoder, buffer;
      H.stringTypeCheck(input);
      end = P.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return H.NativeUint8List_NativeUint8List(0);
      decoder = P._Base64Decoder$();
      buffer = decoder.decode$3(0, input, 0, end);
      decoder.close$2(0, input, end);
      return buffer;
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Base64Decoder.prototype = {
    decode$3: function(_, input, start, end) {
      var buffer, _this = this;
      H.stringTypeCheck(input);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (H.boolConversionCheck(P._Base64Decoder__hasSeenPadding(_this._convert$_state))) {
        _this._convert$_state = H.intTypeCheck(P._Base64Decoder__checkPadding(input, start, end, _this._convert$_state));
        return;
      }
      if (start == end)
        return H.NativeUint8List_NativeUint8List(0);
      buffer = P._Base64Decoder__allocateBuffer(input, start, end, _this._convert$_state);
      _this._convert$_state = H.intTypeCheck(P._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state));
      return buffer;
    },
    close$2: function(_, input, end) {
      var t1, t2;
      H.stringTypeCheck(input);
      H.intTypeCheck(end);
      t1 = this._convert$_state;
      t2 = P._Base64Decoder__encodePaddingState(0);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        throw H.wrapException(P.FormatException$("Missing padding character", input, end));
      t1 = this._convert$_state;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        throw H.wrapException(P.FormatException$("Invalid length, must be multiple of four", input, end));
      this._convert$_state = H.intTypeCheck(P._Base64Decoder__encodePaddingState(0));
    }
  };
  P._Base64DecoderSink.prototype = {};
  P.ByteConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    }
  };
  P.ByteConversionSinkBase.prototype = {};
  P._ByteAdapterSink.prototype = {};
  P._ByteCallbackSink.prototype = {};
  P.ChunkedConversionSink.prototype = {$isSink: 1};
  P._SimpleCallbackSink.prototype = {};
  P._ConverterStreamEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function($S, $T) {
      return [$S];
    },
    $isSink: 1,
    $asSink: function($S, $T) {
      return [$S];
    }
  };
  P.Codec.prototype = {
    encode$1: function(input) {
      H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Codec", 0));
      return this.get$encoder().convert$1(input);
    },
    decode$1: function(_, encoded) {
      H.assertSubtypeOfRuntimeType(encoded, H.getRuntimeTypeArgument(this, "Codec", 1));
      return this.get$decoder().convert$1(encoded);
    },
    fuse$1$1: function(other, $R) {
      var t1 = H.getRuntimeTypeArgument(this, "Codec", 1);
      return P._FusedCodec$(this, H.assertSubtype(other, "$isCodec", [t1, $R], "$asCodec"), H.getRuntimeTypeArgument(this, "Codec", 0), t1, $R);
    },
    fuse$1: function(other) {
      return this.fuse$1$1(other, null);
    }
  };
  P._FusedCodec.prototype = {
    get$encoder: function() {
      return this._convert$_first.get$encoder().fuse$1$1(this._second.get$encoder(), H.getTypeArgumentByIndex(this, 2));
    },
    get$decoder: function() {
      return this._second.get$decoder().fuse$1$1(this._convert$_first.get$decoder(), H.getTypeArgumentByIndex(this, 0));
    },
    $asCodec: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P._InvertedCodec.prototype = {};
  P.Converter.prototype = {
    fuse$1$1: function(other, TT) {
      var t1 = H.getRuntimeTypeArgument(this, "Converter", 1);
      return P._FusedConverter$(this, H.assertSubtype(other, "$isConverter", [t1, TT], "$asConverter"), H.getRuntimeTypeArgument(this, "Converter", 0), t1, TT);
    },
    fuse$1: function(other) {
      return this.fuse$1$1(other, null);
    }
  };
  P._FusedConverter.prototype = {
    convert$1: function(input) {
      return this._second.convert$1(this._convert$_first.convert$1(H.assertSubtypeOfRuntimeType(input, H.getTypeArgumentByIndex(this, 0))));
    },
    $asStreamTransformer: function($S, $M, $T) {
      return [$S, $T];
    },
    $asStreamTransformerBase: function($S, $M, $T) {
      return [$S, $T];
    },
    $asConverter: function($S, $M, $T) {
      return [$S, $T];
    }
  };
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.HtmlEscapeMode.prototype = {};
  P.HtmlEscape.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    },
    $asConverter: function() {
      return [P.String, P.String];
    }
  };
  P._HtmlEscapeSink.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {};
  P.JsonCyclicError.prototype = {};
  P.JsonCodec.prototype = {
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    $asStreamTransformer: function() {
      return [P.Object, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, P.String];
    },
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonUtf8Encoder.prototype = {
    $asStreamTransformer: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.Object, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.Object, [P.List, P.int]];
    }
  };
  P._JsonEncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P._JsonUtf8EncoderSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.Object];
    },
    $asSink: function() {
      return [P.Object];
    }
  };
  P.JsonDecoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.Object];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.Object];
    },
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {};
  P._JsonPrettyPrintMixin.prototype = {$is_JsonStringifier: 1};
  P._JsonStringStringifier.prototype = {};
  P._JsonStringStringifierPretty.prototype = {$is_JsonPrettyPrintMixin: 1};
  P._JsonUtf8Stringifier.prototype = {};
  P._JsonUtf8StringifierPretty.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.Latin1Codec.prototype = {
    get$name: function(_) {
      return "iso-8859-1";
    },
    encode$1: function(source) {
      H.stringTypeCheck(source);
      return this.get$encoder().convert$1(source);
    },
    decode$1: function(_, bytes) {
      var t1;
      H.assertSubtype(bytes, "$isList", [P.int], "$asList");
      t1 = C.Latin1Decoder_false_255.convert$1(bytes);
      return t1;
    },
    get$encoder: function() {
      return C.Latin1Encoder_255;
    },
    get$decoder: function() {
      return C.Latin1Decoder_false_255;
    }
  };
  P.Latin1Encoder.prototype = {};
  P.Latin1Decoder.prototype = {};
  P._Latin1DecoderSink.prototype = {};
  P._Latin1AllowInvalidDecoderSink.prototype = {};
  P.LineSplitter.prototype = {
    $asStreamTransformer: function() {
      return [P.String, P.String];
    },
    $asStreamTransformerBase: function() {
      return [P.String, P.String];
    }
  };
  P._LineSplitterSink.prototype = {};
  P._LineSplitterEventSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [P.String];
    }
  };
  P.StringConversionSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P.ClosableStringSink.prototype = {};
  P._ClosableStringSink.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P._StringConversionSinkAsStringSinkAdapter.prototype = {$isClosableStringSink: 1, $isStringSink: 1};
  P.StringConversionSinkBase.prototype = {};
  P.StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringSinkConversionSink.prototype = {};
  P._StringCallbackSink.prototype = {
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $as_StringSinkConversionSink: function() {
      return [P.StringBuffer];
    },
    $asSink: function() {
      return [P.String];
    }
  };
  P._StringAdapterSink.prototype = {};
  P._Utf8StringSinkAdapter.prototype = {};
  P._Utf8ConversionSink.prototype = {};
  P.Utf8Codec.prototype = {
    get$name: function(_) {
      return "utf-8";
    },
    decode$1: function(_, codeUnits) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      return P.Utf8Decoder$(false).convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    },
    get$decoder: function() {
      return P.Utf8Decoder$(false);
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var end, $length, encoder;
      H.stringTypeCheck(string);
      end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return H.NativeUint8List_NativeUint8List(0);
      encoder = P._Utf8Encoder$withBufferSize($length * 3);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(J.codeUnitAt$1$s(string, end - 1), 0);
      return J.sublist$2$ax(encoder._buffer, 0, encoder._bufferIndex);
    },
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, _this = this;
      H.intTypeCheck(leadingSurrogate);
      H.intTypeCheck(nextCodeUnit);
      t1 = _this._buffer;
      t2 = J.getInterceptor$ax(t1);
      if (H.boolConversionCheck(P._isTailSurrogate(nextCodeUnit))) {
        rune = P._combineSurrogatePair(leadingSurrogate, nextCodeUnit);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        if (typeof rune !== "number")
          return rune.$shr();
        t2.$indexSet(t1, t3, (240 | C.JSInt_methods._shrOtherPositive$1(rune, 18)) >>> 0);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 12) & 63);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(rune, 6) & 63);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        t2.$indexSet(t1, t3, 128 | rune & 63);
        return true;
      } else {
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        if (typeof leadingSurrogate !== "number")
          return leadingSurrogate.$shr();
        t2.$indexSet(t1, t3, (224 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 12)) >>> 0);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        t2.$indexSet(t1, t3, 128 | C.JSInt_methods._shrOtherPositive$1(leadingSurrogate, 6) & 63);
        t3 = _this._bufferIndex;
        if (typeof t3 !== "number")
          return t3.$add();
        _this._bufferIndex = H.intTypeCheck(t3 + 1);
        t2.$indexSet(t1, t3, 128 | leadingSurrogate & 63);
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, stringIndex0, _this = this;
      H.stringTypeCheck(str);
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (start != end) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = H.boolConversionCheck(P._isLeadSurrogate(J.codeUnitAt$1$s(str, end - 1)));
      } else
        t1 = false;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        --end;
      }
      t1 = _this._buffer;
      t2 = J.getInterceptor$asx(t1);
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      while (true) {
        if (typeof stringIndex !== "number")
          return stringIndex.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(stringIndex < end))
          break;
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (typeof codeUnit !== "number")
          return codeUnit.$le();
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          t5 = t2.get$length(t1);
          if (typeof t4 !== "number")
            return t4.$ge();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, codeUnit);
        } else if (H.boolConversionCheck(P._isLeadSurrogate(codeUnit))) {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 + 3 >= t5)
            break;
          stringIndex0 = stringIndex + 1;
          if (H.boolConversionCheck(_this._writeSurrogate$2(codeUnit, C.JSString_methods.codeUnitAt$1(str, stringIndex0))))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 + 1 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, (192 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6)) >>> 0);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        } else {
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          t5 = t2.get$length(t1);
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t4 + 2 >= t5)
            break;
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, (224 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 12)) >>> 0);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, 128 | C.JSInt_methods._shrOtherPositive$1(codeUnit, 6) & 63);
          t4 = _this._bufferIndex;
          if (typeof t4 !== "number")
            return t4.$add();
          _this._bufferIndex = H.intTypeCheck(t4 + 1);
          t2.$indexSet(t1, t4, 128 | codeUnit & 63);
        }
        ++stringIndex;
      }
      return stringIndex;
    }
  };
  P._Utf8EncoderSink.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P.Utf8Decoder.prototype = {
    fuse$1$1: function(next, $T) {
      return this.super$Converter$fuse(H.assertSubtype(next, "$isConverter", [P.String, $T], "$asConverter"), $T);
    },
    fuse$1: function(next) {
      return this.fuse$1$1(next, null);
    },
    convert$1: function(codeUnits) {
      var t1, result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, J.get$length$asx(codeUnits));
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (typeof oneBytes !== "number")
        return oneBytes.$gt();
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = P.StringBuffer$(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = P.StringBuffer$("");
      decoder = P._Utf8Decoder$(buffer, t1);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      decoder.flush$2(0, codeUnits, end);
      return buffer.toString$0(0);
    },
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    get$hasPartialInput: function() {
      var t1 = this._expectedUnits;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    flush$2: function(_, source, offset) {
      var _this = this;
      H.assertSubtype(source, "$isList", [P.int], "$asList");
      H.intTypeCheck(offset);
      if (H.boolConversionCheck(_this.get$hasPartialInput())) {
        if (!H.boolConversionCheck(_this._allowMalformed))
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence", source, offset));
        _this._stringSink.writeCharCode$1(65533);
        _this._extraUnits = _this._expectedUnits = _this._value = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, t4, i, unit, t5, oneBytes, i0, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x",
        _65533 = 65533;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      H.intTypeCheck(startIndex);
      H.intTypeCheck(endIndex);
      value = _this._value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._value = 0;
      $label0$0:
        for (t1 = _this._stringSink, t2 = _this._allowMalformed, t3 = J.getInterceptor$asx(codeUnits), t4 = J.getInterceptor$z(t1), i = startIndex; true; i = i0) {
          $label1$1: {
            if (typeof expectedUnits !== "number")
              return expectedUnits.$gt();
            if (expectedUnits > 0) {
              do {
                if (i == endIndex)
                  break $label0$0;
                unit = t3.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  if (!H.boolConversionCheck(t2))
                    throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i));
                  _this._isFirstCharacter = false;
                  t1.writeCharCode$1(_65533);
                  expectedUnits = 0;
                  break $label1$1;
                } else {
                  if (typeof value !== "number")
                    return value.$shl();
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  if (typeof i !== "number")
                    return i.$add();
                  ++i;
                }
              } while (expectedUnits > 0);
              if (typeof extraUnits !== "number")
                return extraUnits.$sub();
              t5 = extraUnits - 1;
              if (t5 < 0 || t5 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t5);
              t5 = C.List_127_2047_65535_1114111[t5];
              if (typeof t5 !== "number")
                return H.iae(t5);
              if (value <= t5) {
                if (!H.boolConversionCheck(t2))
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (!H.boolConversionCheck(t2))
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + H.S(C.JSInt_methods.toRadixString$1(value, 16)), codeUnits, i - extraUnits - 1));
                value = _65533;
              }
              if (!H.boolConversionCheck(_this._isFirstCharacter) || value !== 65279)
                t1.writeCharCode$1(value);
              _this._isFirstCharacter = false;
            }
          }
          while (true) {
            if (typeof i !== "number")
              return i.$lt();
            if (typeof endIndex !== "number")
              return H.iae(endIndex);
            if (!(i < endIndex))
              break;
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (typeof oneBytes !== "number")
              return oneBytes.$gt();
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t4.write$1(t1, P.String_String$fromCharCodes(codeUnits, i, i0));
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t3.$index(codeUnits, i);
            if (typeof unit !== "number")
              return unit.$lt();
            if (unit < 0) {
              if (!H.boolConversionCheck(t2))
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + H.S(C.JSInt_methods.toRadixString$1(-unit, 16)), codeUnits, i0 - 1));
              t1.writeCharCode$1(_65533);
            } else {
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $label0$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $label0$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $label0$0;
              }
              if (!H.boolConversionCheck(t2))
                throw H.wrapException(P.FormatException$(_s21_ + H.S(C.JSInt_methods.toRadixString$1(unit, 16)), codeUnits, i0 - 1));
              _this._isFirstCharacter = false;
              t1.writeCharCode$1(_65533);
              value = _65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
            i = i0;
          }
          break $label0$0;
        }
      if (typeof expectedUnits !== "number")
        return expectedUnits.$gt();
      if (expectedUnits > 0) {
        _this._value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin.prototype = {$is_JsonPrettyPrintMixin: 1};
  P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin.prototype = {$isChunkedConversionSink: 1,
    $asChunkedConversionSink: function() {
      return [P.String];
    },
    $isStringConversionSink: 1,
    $isStringConversionSinkMixin: 1,
    $isSink: 1,
    $asSink: function() {
      return [P.String];
    }
  };
  P._symbolMapToStringMap_closure.prototype = {$signature: 39};
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t3 = J.getInterceptor$z(t1);
      t3.write$1(t1, t2.comma);
      t3.write$1(t1, P._symbolToString(key));
      t3.write$1(t1, ": ");
      t3.write$1(t1, P.Error_safeToString(value));
      t2.comma = ", ";
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 39
  };
  P._CompileTimeError.prototype = {};
  P._DuplicatedFieldInitializerError.prototype = {};
  P._BigIntImpl.prototype = {$isBigInt: 1, $isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P._BigIntReduction.prototype = {};
  P._BigIntClassic.prototype = {$is_BigIntReduction: 1};
  P.Deprecated.prototype = {};
  P._Override.prototype = {};
  P.Provisional.prototype = {};
  P._Proxy0.prototype = {};
  P.pragma.prototype = {};
  P.BigInt.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.BigInt];
    }
  };
  P.bool.prototype = {};
  P.Comparable.prototype = {};
  P.DateTime.prototype = {
    add$1: function(_, duration) {
      var t1 = this._core$_value,
        t2 = H.interceptedTypeCheck(duration, "$isDuration").get$inMilliseconds();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return P.DateTime$_withValue(t1 + t2, this.isUtc);
    },
    get$millisecondsSinceEpoch: function() {
      return this._core$_value;
    },
    get$year: function() {
      return H.intTypeCheck(H.Primitives_getYear(this));
    },
    get$month: function() {
      return H.intTypeCheck(H.Primitives_getMonth(this));
    },
    get$day: function() {
      return H.intTypeCheck(H.Primitives_getDay(this));
    },
    get$hour: function() {
      return H.intTypeCheck(H.Primitives_getHours(this));
    },
    get$minute: function() {
      return H.intTypeCheck(H.Primitives_getMinutes(this));
    },
    get$second: function() {
      return H.intTypeCheck(H.Primitives_getSeconds(this));
    },
    get$millisecond: function() {
      return H.intTypeCheck(H.Primitives_getMilliseconds(this));
    },
    get$microsecond: function() {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && H.boolConversionCheck(J.$eq$(this._core$_value, other.get$millisecondsSinceEpoch())) && H.boolConversionCheck(J.$eq$(this.isUtc, other.isUtc));
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var _this = this,
        t1 = J.abs$0$in(_this.get$millisecondsSinceEpoch());
      if (typeof t1 !== "number")
        return t1.$gt();
      if (!(t1 > 864e13))
        t1 = H.boolConversionCheck(J.$eq$(J.abs$0$in(_this.get$millisecondsSinceEpoch()), 864e13)) && !H.boolConversionCheck(J.$eq$(_this.get$microsecond(), 0));
      else
        t1 = true;
      if (t1)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + H.S(_this.get$millisecondsSinceEpoch())));
      if (_this.isUtc == null)
        throw H.wrapException(P.ArgumentError$("'isUtc' flag may not be 'null'"));
    },
    get$hashCode: function(_) {
      var t1 = this._core$_value;
      if (typeof t1 !== "number")
        return t1.$shr();
      return (t1 ^ C.JSNumber_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(_this.get$year()),
        m = P.DateTime__twoDigits(_this.get$month()),
        d = P.DateTime__twoDigits(_this.get$day()),
        h = P.DateTime__twoDigits(_this.get$hour()),
        min = P.DateTime__twoDigits(_this.get$minute()),
        sec = P.DateTime__twoDigits(_this.get$second()),
        ms = P.DateTime__threeDigits(_this.get$millisecond()),
        us = H.boolConversionCheck(J.$eq$(_this.get$microsecond(), 0)) ? "" : P.DateTime__threeDigits(_this.get$microsecond());
      if (H.boolConversionCheck(_this.isUtc))
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + H.S(us) + "Z";
      else
        return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + H.S(us);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $add: function(_, other) {
      var t1 = this._duration,
        t2 = H.interceptedTypeCheck(other, "$isDuration")._duration;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return P.Duration$_microseconds(t1 + t2);
    },
    $sub: function(_, other) {
      var t1 = this._duration,
        t2 = H.interceptedTypeCheck(other, "$isDuration")._duration;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return P.Duration$_microseconds(t1 - t2);
    },
    $lt: function(_, other) {
      var t1 = this._duration,
        t2 = H.interceptedTypeCheck(other, "$isDuration")._duration;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    $ge: function(_, other) {
      var t1 = this._duration,
        t2 = H.interceptedTypeCheck(other, "$isDuration")._duration;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 >= t2;
    },
    get$inHours: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 3600000000);
    },
    get$inMinutes: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 60000000);
    },
    get$inSeconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000000);
    },
    get$inMilliseconds: function() {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return t1.$tdiv();
      return C.JSNumber_methods._tdivFast$1(t1, 1000);
    },
    get$inMicroseconds: function() {
      return this._duration;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && H.boolConversionCheck(J.$eq$(this._duration, other.get$inMicroseconds()));
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs, _this = this,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = _this.get$inMicroseconds();
      if (typeof t2 !== "number")
        return t2.$lt();
      if (t2 < 0)
        return "-" + H.S(_this.$negate(0));
      twoDigitMinutes = t1.call$1(J.remainder$1$n(_this.get$inMinutes(), 60));
      twoDigitSeconds = t1.call$1(J.remainder$1$n(_this.get$inSeconds(), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(J.remainder$1$n(_this.get$inMicroseconds(), 1000000));
      return H.S(_this.get$inHours()) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $negate: function(_) {
      var t1 = this._duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$_microseconds(0 - t1);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 13
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      H.intTypeCheck(n);
      if (typeof n !== "number")
        return n.$ge();
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 13
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.CastError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!H.boolConversionCheck(this._hasValue) ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = H.S(_this.get$_errorName()) + nameString + message;
      if (!H.boolConversionCheck(_this._hasValue))
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + H.S(explanation) + ": " + H.S(errorValue);
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          if (typeof t2 !== "number")
            return t2.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return explanation;
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    }
  };
  P.IndexError.prototype = {
    get$start: function(_) {
      return 0;
    },
    get$end: function(_) {
      var t1 = this.length;
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - 1;
    },
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (H.boolConversionCheck(J.$eq$(t1, 0)))
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    $isRangeError: 1,
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.FallThroughError.prototype = {};
  P.AbstractClassInstantiationError.prototype = {};
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, argument, memberName, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = P.StringBuffer$("");
      _box_0.comma = "";
      t1 = _this._core$_arguments;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(t1); H.boolConversionCheck(t1.moveNext$0());) {
          argument = J.get$current$z(t1);
          sb.write$1(0, _box_0.comma);
          sb.write$1(0, P.Error_safeToString(argument));
          _box_0.comma = ", ";
        }
      t1 = _this._namedArguments;
      if (t1 != null)
        J.forEach$1$ax(t1, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      memberName = P._symbolToString(_this._memberName);
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = H.S(sb);
      t1 = "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + H.S(this.message);
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isUnsupportedError: 1
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + H.S(this.message);
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + H.S(t1) + "' during its initialization";
    }
  };
  P.LateInitializationError.prototype = {};
  P.Exception.prototype = {};
  P._Exception.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, postfix, start, prefix, slice, _s3_ = "...",
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? J.$add$ansx(C.JSString_methods.substring$2(objectSource, 0, 75), _s3_) : objectSource;
          return report + "\n" + H.S(source);
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            postfix = _s3_;
            start = lineStart;
            prefix = "";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = _s3_;
            }
            prefix = _s3_;
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return H.S(report) + prefix + H.S(slice) + postfix + "\n" + H.S(C.JSString_methods.$mul(" ", offset - start + prefix.length)) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1
  };
  P.IntegerDivisionByZeroException.prototype = {$isException: 1};
  P.Expando.prototype = {
    $index: function(_, object) {
      var t1 = this._jsWeakMapOrKey;
      if (typeof t1 !== "string") {
        P.Expando__checkType(object);
        return t1.get(object);
      }
      return H.assertSubtypeOfRuntimeType(P.Expando__getFromObject(t1, object), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, object, value) {
      var t1;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      t1 = this._jsWeakMapOrKey;
      if (typeof t1 !== "string")
        t1.set(object, value);
      else
        P.Expando__setOnObject(t1, object, value);
    },
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Invocation.prototype = {};
  P._Invocation.prototype = {$isInvocation: 1};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.WhereIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); H.boolConversionCheck(t1.moveNext$0());)
        if (H.boolConversionCheck(J.$eq$(J.get$current$z(t1), element)))
          return true;
      return false;
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      var t1, value;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this), value = initialValue; H.boolConversionCheck(t1.moveNext$0());)
        value = combine.call$2(value, J.get$current$z(t1));
      return value;
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    join$1: function(_, separator) {
      var iterator, buffer;
      H.stringTypeCheck(separator);
      iterator = this.get$iterator(this);
      if (!H.boolConversionCheck(iterator.moveNext$0()))
        return "";
      buffer = P.StringBuffer$("");
      if (separator == null || separator === "") {
        do
          buffer.write$1(0, H.S(iterator.get$current(iterator)));
        while (H.boolConversionCheck(iterator.moveNext$0()));
      } else {
        buffer.write$1(0, H.S(iterator.get$current(iterator)));
        for (; H.boolConversionCheck(iterator.moveNext$0());) {
          buffer.write$1(0, separator);
          buffer.write$1(0, H.S(iterator.get$current(iterator)));
        }
      }
      return buffer.toString$0(0);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, H.boolTypeCheck(growable), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; H.boolConversionCheck(it.moveNext$0());)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !H.boolConversionCheck(this.get$iterator(this).moveNext$0());
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, H.intTypeCheck(count), H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    skipWhile$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.SkipWhileIterable$(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), t1);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!H.boolConversionCheck(it.moveNext$0()))
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (H.boolConversionCheck(it.moveNext$0()));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      H.intTypeCheck(index);
      P.ArgumentError_checkNotNull(index, _s5_);
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; H.boolConversionCheck(t1.moveNext$0());) {
        element = J.get$current$z(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {};
  P.BidirectionalIterator.prototype = {$isIterator: 1};
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.MapEntry.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToHumanReadableString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return H.getRuntimeType(this);
    },
    toString: function() {
      return this.toString$0(this);
    },
    call$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1", 0, [$0], [], 0));
    },
    call$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$0", 0, [], [], 0));
    },
    call$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2", 0, [$0, $1], [], 0));
    },
    call$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], [], 0));
    },
    call$1$1: function($0, $T1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$1", 0, [$0, $T1], [], 1));
    },
    call$1$2$onError: function($0, $1, $T1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$2$onError", 0, [$0, $1, $T1], ["onError"], 1));
    },
    call$4: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], [], 0));
    },
    call$2$1: function($0, $T1, $T2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$1", 0, [$0, $T1, $T2], [], 2));
    },
    call$3$3: function($0, $1, $2, $T1, $T2, $T3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$3", 0, [$0, $1, $2, $T1, $T2, $T3], [], 3));
    },
    call$2$2: function($0, $1, $T1, $T2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$2", 0, [$0, $1, $T1, $T2], [], 2));
    },
    call$3$1: function($0, $T1, $T2, $T3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$1", 0, [$0, $T1, $T2, $T3], [], 3));
    },
    call$2$specification$zoneValues: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$specification$zoneValues", 0, [$0, $1], ["specification", "zoneValues"], 0));
    },
    call$5: function($0, $1, $2, $3, $4) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$5", 0, [$0, $1, $2, $3, $4], [], 0));
    },
    call$3$4: function($0, $1, $2, $3, $T1, $T2, $T3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$4", 0, [$0, $1, $2, $3, $T1, $T2, $T3], [], 3));
    },
    call$2$4: function($0, $1, $2, $3, $T1, $T2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$4", 0, [$0, $1, $2, $3, $T1, $T2], [], 2));
    },
    call$1$4: function($0, $1, $2, $3, $T1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$4", 0, [$0, $1, $2, $3, $T1], [], 1));
    },
    call$3$6: function($0, $1, $2, $3, $4, $5, $T1, $T2, $T3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3$6", 0, [$0, $1, $2, $3, $4, $5, $T1, $T2, $T3], [], 3));
    },
    call$2$5: function($0, $1, $2, $3, $4, $T1, $T2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$5", 0, [$0, $1, $2, $3, $4, $T1, $T2], [], 2));
    },
    call$1$2: function($0, $1, $T1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$2", 0, [$0, $1, $T1], [], 1));
    },
    call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"], 0));
    },
    call$2$terse: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$terse", 0, [$0, $1], ["terse"], 0));
    },
    call$1$growable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$growable", 0, [$0], ["growable"], 0));
    },
    call$2$withDrive: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$withDrive", 0, [$0, $1], ["withDrive"], 0));
    },
    call$7: function($0, $1, $2, $3, $4, $5, $6) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$7", 0, [$0, $1, $2, $3, $4, $5, $6], [], 0));
    },
    add$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("add", "add$1", 0, [$0], [], 0));
    },
    $indexSet: function($receiver, $0, $1) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], [], 0));
    },
    $add: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("+", "$add", 0, [$0], [], 0));
    },
    substring$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("substring", "substring$1", 0, [$0], [], 0));
    },
    listen$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("listen", "listen$1", 0, [$0], [], 0));
    },
    containsKey$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], [], 0));
    },
    _computeKeys$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_computeKeys", "_computeKeys$0", 0, [], [], 0));
    },
    $lt: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("<", "$lt", 0, [$0], [], 0));
    },
    $sub: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("-", "$sub", 0, [$0], [], 0));
    },
    $ge: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror(">=", "$ge", 0, [$0], [], 0));
    },
    replaceRange$3: function($receiver, $0, $1, $2) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("replaceRange", "replaceRange$3", 0, [$0, $1, $2], [], 0));
    },
    replaceFirst$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("replaceFirst", "replaceFirst$2", 0, [$0, $1], [], 0));
    },
    allMatches$2: function($receiver, $0, $1) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("allMatches", "allMatches$2", 0, [$0, $1], [], 0));
    },
    allMatches$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], [], 0));
    },
    _execGlobal$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_execGlobal", "_execGlobal$2", 0, [$0, $1], [], 0));
    },
    get$length: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("length", "get$length", 1, [], [], 0));
    },
    get$iterator: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("iterator", "get$iterator", 1, [], [], 0));
    },
    get$_modifications: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_modifications", "get$_modifications", 1, [], [], 0));
    },
    get$_collection$_modifications: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_modifications", "get$_collection$_modifications", 1, [], [], 0));
    },
    get$_first: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_first", "get$_first", 1, [], [], 0));
    },
    get$_collection$_first: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_first", "get$_collection$_first", 1, [], [], 0));
    },
    get$_length: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("_length", "get$_length", 1, [], [], 0));
    },
    get$_collection$_length: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("_length", "get$_collection$_length", 1, [], [], 0));
    },
    get$stream: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("stream", "get$stream", 1, [], [], 0));
    },
    get$isNotEmpty: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("isNotEmpty", "get$isNotEmpty", 1, [], [], 0));
    },
    get$_keys: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("_keys", "get$_keys", 1, [], [], 0));
    },
    get$start: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("start", "get$start", 1, [], [], 0));
    },
    get$end: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("end", "get$end", 1, [], [], 0));
    }
  };
  P.Pattern.prototype = {};
  P.Match.prototype = {};
  P.RegExp.prototype = {$isPattern: 1};
  P.RegExpMatch.prototype = {$isMatch: 1};
  P.Set.prototype = {};
  P.Sink.prototype = {};
  P.StackTrace.prototype = {};
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return this._stackTrace;
    },
    $isStackTrace: 1
  };
  P.Stopwatch.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.Runes.prototype = {
    $asIterable: function() {
      return [P.int];
    }
  };
  P.RuneIterator.prototype = {$isBidirectionalIterator: 1,
    $asBidirectionalIterator: function() {
      return [P.int];
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.int];
    }
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._contents);
    },
    write$1: function(_, obj) {
      this._writeString$1(H.S(obj));
    },
    writeCharCode$1: function(charCode) {
      this._writeString$1(P.String_String$fromCharCode(H.intTypeCheck(charCode)));
    },
    writeAll$2: function(objects, separator) {
      H.listSuperNativeTypeCheck(objects, "$isIterable");
      H.stringTypeCheck(separator);
      this._contents = H.stringTypeCheck(P.StringBuffer__writeAll(this._contents, objects, separator));
    },
    writeln$1: function(obj) {
      this._writeString$1(H.S(obj) + "\n");
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return H.Primitives_flattenString(this._contents);
    },
    _writeString$1: function(str) {
      this._contents = H.stringTypeCheck(H.Primitives_stringConcatUnchecked(this._contents, H.stringTypeCheck(str)));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(this.get$isEmpty(this));
    },
    $isStringSink: 1
  };
  P.StringSink.prototype = {};
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri.prototype = {};
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      H.stringTypeCheck(msg);
      H.intTypeCheck(position);
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + H.S(msg), this.host, position));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 100
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + H.S(H.stringTypeCheck(msg)), this.host, H.intTypeCheck(position)));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 70
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(J.substring$2$s(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 71
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var t2, t3,
        t1 = this._host;
      if (t1 == null)
        return "";
      t2 = J.getInterceptor$s(t1);
      if (H.boolConversionCheck(t2.startsWith$1(t1, "["))) {
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$sub();
        return t2.substring$2(t1, 1, t3 - 1);
      }
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$pathSegments: function() {
      var pathToSplit, t1,
        result = this._pathSegments;
      if (result != null)
        return result;
      pathToSplit = this.path;
      if (H.boolConversionCheck(J.getInterceptor$asx(pathToSplit).get$isNotEmpty(pathToSplit)) && H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(pathToSplit, 0), 47)))
        pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
      if (pathToSplit === "")
        result = C.List_empty0;
      else {
        t1 = P.String;
        result = P.List_List$unmodifiable(C.JSArray_methods.map$1$1(H.setRuntimeTypeInfo(pathToSplit.split("/"), [t1]), P.core_Uri_decodeComponent$closure(), null), t1);
      }
      this.set$_pathSegments(result);
      return result;
    },
    _mergePaths$2: function(base, reference) {
      var t1, backCount, refStart, baseEnd, newEnd, delta;
      H.stringTypeCheck(base);
      H.stringTypeCheck(reference);
      for (t1 = J.getInterceptor$s(reference), backCount = 0, refStart = 0; H.boolConversionCheck(t1.startsWith$2(reference, "../", refStart));) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = J.getInterceptor$s(base).lastIndexOf$1(base, "/");
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (typeof newEnd !== "number")
          return newEnd.$lt();
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 1), 46)))
            t1 = !t1 || H.boolConversionCheck(J.$eq$(C.JSString_methods.codeUnitAt$1(base, newEnd + 2), 46));
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, mergedPath, _this = this, _null = null;
      H.interceptedTypeCheck(reference, "$isUri");
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(reference.get$scheme()))) {
        targetScheme = reference.get$scheme();
        if (H.boolConversionCheck(reference.get$hasAuthority())) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = H.boolConversionCheck(reference.get$hasPort()) ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = H.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query(reference) : _null;
      } else {
        targetScheme = _this.scheme;
        if (H.boolConversionCheck(reference.get$hasAuthority())) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(H.boolConversionCheck(reference.get$hasPort()) ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = H.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query(reference) : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          if (H.boolConversionCheck(J.$eq$(reference.get$path(reference), ""))) {
            targetPath = _this.path;
            targetQuery = H.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query(reference) : _this._query;
          } else {
            if (H.boolConversionCheck(reference.get$hasAbsolutePath()))
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else if (H.boolConversionCheck(_this.get$hasEmptyPath()))
              if (!H.boolConversionCheck(_this.get$hasAuthority()))
                targetPath = !H.boolConversionCheck(_this.get$hasScheme()) ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments(C.JSString_methods.$add("/", reference.get$path(reference)));
            else {
              mergedPath = _this._mergePaths$2(_this.path, reference.get$path(reference));
              if (H.boolConversionCheck(_this.get$hasScheme()) || H.boolConversionCheck(_this.get$hasAuthority()) || H.boolConversionCheck(_this.get$hasAbsolutePath()))
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(mergedPath, H.boolConversionCheck(_this.get$hasScheme()) || H.boolConversionCheck(_this.get$hasAuthority()));
            }
            targetQuery = H.boolConversionCheck(reference.get$hasQuery()) ? reference.get$query(reference) : _null;
          }
        }
      }
      return P._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, H.boolConversionCheck(reference.get$hasFragment()) ? reference.get$fragment() : _null);
    },
    get$hasScheme: function() {
      return J.get$isNotEmpty$asx(this.scheme);
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasPort: function() {
      return this._port != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    get$hasEmptyPath: function() {
      return J.get$isEmpty$asx(this.path);
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$1$s(this.path, "/");
    },
    toFilePath$0: function() {
      var windows, _this = this,
        t1 = _this.scheme,
        t2 = J.getInterceptor$(t1);
      if (!H.boolConversionCheck(t2.$eq(t1, "")) && !H.boolConversionCheck(t2.$eq(t1, "file")))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(t1) + " URI"));
      if (!H.boolConversionCheck(J.$eq$(_this.get$query(_this), "")))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
      if (!H.boolConversionCheck(J.$eq$(_this.get$fragment(), "")))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      windows = P._Uri__isWindows();
      return H.boolConversionCheck(windows) ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var pathSegments, result, _this = this;
      if (H.boolConversionCheck(_this.get$hasAuthority()) && !H.boolConversionCheck(J.$eq$(_this.get$host(_this), "")))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      pathSegments = _this.get$pathSegments();
      P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      result = P.StringBuffer$("");
      if (H.boolConversionCheck(_this.get$hasAbsolutePath()))
        result.write$1(0, "/");
      result.writeAll$2(pathSegments, "/");
      return result.toString$0(0);
    },
    _writeAuthority$1: function(ss) {
      var t1;
      H.interceptedTypeCheck(ss, "$isStringSink");
      t1 = this._userInfo;
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(t1))) {
        ss.write$1(0, t1);
        ss.write$1(0, "@");
      }
      t1 = this._host;
      if (t1 != null)
        ss.write$1(0, t1);
      t1 = this._port;
      if (t1 != null) {
        ss.write$1(0, ":");
        ss.write$1(0, t1);
      }
    },
    toString$0: function(_) {
      var t1 = this._text;
      return t1 == null ? this._text = H.stringTypeCheck(this._initializeText$0()) : t1;
    },
    _initializeText$0: function() {
      var _this = this,
        sb = P.StringBuffer$(""),
        t1 = _this.scheme,
        t2 = J.getInterceptor$asx(t1);
      if (H.boolConversionCheck(t2.get$isNotEmpty(t1))) {
        sb.write$1(0, t1);
        sb.write$1(0, ":");
      }
      if (H.boolConversionCheck(_this.get$hasAuthority()) || H.boolConversionCheck(t2.$eq(t1, "file"))) {
        sb.write$1(0, "//");
        _this._writeAuthority$1(sb);
      }
      sb.write$1(0, _this.path);
      t1 = _this._query;
      if (t1 != null) {
        sb.write$1(0, "?");
        sb.write$1(0, t1);
      }
      t1 = _this._fragment;
      if (t1 != null) {
        sb.write$1(0, "#");
        sb.write$1(0, t1);
      }
      return sb.toString$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && H.boolConversionCheck(J.$eq$(_this.scheme, other.get$scheme())) && H.boolConversionCheck(J.$eq$(_this.get$hasAuthority(), other.get$hasAuthority())) && H.boolConversionCheck(J.$eq$(_this.get$userInfo(), other.get$userInfo())) && H.boolConversionCheck(J.$eq$(_this.get$host(_this), other.get$host(other))) && H.boolConversionCheck(J.$eq$(_this.get$port(_this), other.get$port(other))) && H.boolConversionCheck(J.$eq$(_this.path, other.get$path(other))) && H.boolConversionCheck(J.$eq$(_this.get$hasQuery(), other.get$hasQuery())) && H.boolConversionCheck(J.$eq$(_this.get$query(_this), other.get$query(other))) && H.boolConversionCheck(J.$eq$(_this.get$hasFragment(), other.get$hasFragment())) && H.boolConversionCheck(J.$eq$(_this.get$fragment(), other.get$fragment()));
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this.toString$0(0))) : t1;
    },
    set$_pathSegments: function(_pathSegments) {
      this._pathSegments = H.assertSubtype(_pathSegments, "$isList", [P.String], "$asList");
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      var t1;
      H.stringTypeCheck(_);
      t1 = this.portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, t1 + 1));
    },
    $signature: 38
  };
  P._Uri__checkNonWindowsPathReservedCharacters_closure.prototype = {
    call$1: function(segment) {
      var _s23_ = "Illegal path character ";
      H.stringTypeCheck(segment);
      if (H.boolConversionCheck(J.contains$1$asx(segment, "/")))
        if (H.boolConversionCheck(this.argumentError))
          throw H.wrapException(P.ArgumentError$(_s23_ + segment));
        else
          throw H.wrapException(P.UnsupportedError$(_s23_ + segment));
    },
    $signature: 38
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, H.stringTypeCheck(s), C.C_Utf8Codec, false);
    },
    $signature: 14
  };
  P._Uri__makeQuery_writeParameter.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      t1 = this.result;
      t2 = this._box_0;
      t3 = J.getInterceptor$z(t1);
      t3.write$1(t1, t2.separator);
      t2.separator = "&";
      t3.write$1(t1, P.Uri_encodeQueryComponent(key));
      if (value != null && H.boolConversionCheck(C.JSString_methods.get$isNotEmpty(value))) {
        t3.write$1(t1, "=");
        t3.write$1(t1, P.Uri_encodeQueryComponent(value));
      }
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 15
  };
  P._Uri__makeQuery_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      H.stringTypeCheck(key);
      if (value == null || typeof value === "string")
        this.writeParameter.call$2(key, H.stringTypeCheck(value));
      else
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(value, "$isIterable")), t2 = this.writeParameter; H.boolConversionCheck(t1.moveNext$0());)
          t2.call$2(key, H.stringTypeCheck(J.get$current$z(t1)));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 27
  };
  P.UriData.prototype = {
    get$uri: function() {
      var colonIndex, t2, t3, queryIndex, end, query, _this = this,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      colonIndex = J.$index$asx(_this._separatorIndices, 0);
      t1 = _this._text;
      if (typeof colonIndex !== "number")
        return colonIndex.$add();
      t2 = colonIndex + 1;
      t3 = J.getInterceptor$s(t1);
      queryIndex = t3.indexOf$2(t1, "?", t2);
      end = t3.get$length(t1);
      if (typeof queryIndex !== "number")
        return queryIndex.$ge();
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t1, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = null;
      return _this._uriCache = P._DataUri$(_this, P._Uri__normalizeOrSubstring(t1, t2, end, C.List_qg4, false), query);
    },
    toString$0: function(_) {
      var t1 = this._text;
      return H.boolConversionCheck(J.$eq$(J.$index$asx(this._separatorIndices, 0), -1)) ? "data:" + H.S(t1) : t1;
    }
  };
  P.UriData__writeUri_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3, t4;
      H.stringTypeCheck(key);
      H.stringTypeCheck(value);
      if (H.boolConversionCheck(J.get$isEmpty$asx(key)))
        throw H.wrapException(P.ArgumentError$value("", "Parameter names must not be empty", null));
      if (H.boolConversionCheck(J.get$isEmpty$asx(value)))
        throw H.wrapException(P.ArgumentError$value("", "Parameter values must not be empty", 'parameters["' + key + '"]'));
      t1 = this.indices;
      t2 = t1 != null;
      if (t2)
        J.add$1$ax(t1, J.get$length$asx(this.buffer));
      t3 = this.buffer;
      t4 = J.getInterceptor$z(t3);
      t4.write$1(t3, ";");
      t4.write$1(t3, P._Uri__uriEncode(C.List_qFt, key, C.C_Utf8Codec, false));
      if (t2)
        J.add$1$ax(t1, t4.get$length(t3));
      t4.write$1(t3, "=");
      t4.write$1(t3, P._Uri__uriEncode(C.List_qFt, value, C.C_Utf8Codec, false));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 89
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return H.NativeUint8List_NativeUint8List(96);
    },
    $signature: 91
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = J.$index$asx(this.tables, H.intTypeCheck(state));
      J.fillRange$3$x(t1, 0, 96, H.intTypeCheck(defaultTransition));
      return t1;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 49
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, char;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(chars);
      H.intTypeCheck(transition);
      for (t1 = chars.length, t2 = target && C.NativeUint8List_methods, i = 0; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(chars, i);
        if (typeof char !== "number")
          return char.$xor();
        t2.$indexSet(target, (char ^ 96) >>> 0, transition);
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 25
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1;
      H.interceptedTypeCheck(target, "$isUint8List");
      H.stringTypeCheck(range);
      H.intTypeCheck(transition);
      i = J.getInterceptor$s(range)._codeUnitAt$1(range, 0);
      n = C.JSString_methods._codeUnitAt$1(range, 1);
      t1 = target && C.NativeUint8List_methods;
      while (true) {
        if (typeof i !== "number")
          return i.$le();
        if (typeof n !== "number")
          return H.iae(n);
        if (!(i <= n))
          break;
        t1.$indexSet(target, (i ^ 96) >>> 0, transition);
        ++i;
      }
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 25
  };
  P._SimpleUri.prototype = {
    get$hasScheme: function() {
      var t1 = this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    get$hasAuthority: function() {
      var t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    get$hasPort: function() {
      var t2,
        t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = this._pathStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hasQuery: function() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    get$hasFragment: function() {
      var t1 = this._fragmentStart,
        t2 = J.get$length$asx(this._uri);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    get$_isFile: function() {
      return H.boolConversionCheck(J.$eq$(this._schemeEnd, 4)) && H.boolConversionCheck(J.startsWith$1$s(this._uri, "file"));
    },
    get$_isHttp: function() {
      return H.boolConversionCheck(J.$eq$(this._schemeEnd, 4)) && H.boolConversionCheck(J.startsWith$1$s(this._uri, "http"));
    },
    get$_isHttps: function() {
      return H.boolConversionCheck(J.$eq$(this._schemeEnd, 5)) && H.boolConversionCheck(J.startsWith$1$s(this._uri, "https"));
    },
    get$_isPackage: function() {
      return H.boolConversionCheck(J.$eq$(this._schemeEnd, 7)) && H.boolConversionCheck(J.startsWith$1$s(this._uri, "package"));
    },
    get$hasAbsolutePath: function() {
      return J.startsWith$2$s(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath: function() {
      return J.$eq$(this._pathStart, this._queryStart);
    },
    get$scheme: function() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 0)
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (H.boolConversionCheck(_this.get$_isHttp()))
        t1 = _this._schemeCache = "http";
      else if (H.boolConversionCheck(_this.get$_isHttps())) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (H.boolConversionCheck(_this.get$_isFile())) {
        _this._schemeCache = "file";
        t1 = "file";
      } else if (H.boolConversionCheck(_this.get$_isPackage())) {
        _this._schemeCache = "package";
        t1 = "package";
      } else {
        t1 = H.stringTypeCheck(J.substring$2$s(_this._uri, 0, t1));
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += 3;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > t2 ? J.substring$2$s(this._uri, t2, t1 - 1) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0 ? J.substring$2$s(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, _this = this;
      if (H.boolConversionCheck(_this.get$hasPort())) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return P.int_parse(J.substring$2$s(_this._uri, t1 + 1, _this._pathStart), null, null);
      }
      if (H.boolConversionCheck(_this.get$_isHttp()))
        return 80;
      if (H.boolConversionCheck(_this.get$_isHttps()))
        return 443;
      return 0;
    },
    get$path: function(_) {
      return J.substring$2$s(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2 ? J.substring$2$s(this._uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri,
        t3 = J.getInterceptor$asx(t2),
        t4 = t3.get$length(t2);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return t1 < t4 ? t3.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments: function() {
      var t3, parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri,
        t2 = J.getInterceptor$s(t1);
      if (H.boolConversionCheck(t2.startsWith$2(t1, "/", start))) {
        if (typeof start !== "number")
          return start.$add();
        ++start;
      }
      if (start == end)
        return C.List_empty0;
      t3 = P.String;
      parts = H.setRuntimeTypeInfo([], [t3]);
      i = start;
      while (true) {
        if (typeof i !== "number")
          return i.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(i < end))
          break;
        if (t2.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, i));
          start = i + 1;
        }
        ++i;
      }
      C.JSArray_methods.add$1(parts, t2.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, t3);
    },
    _isPort$1: function(port) {
      var t1, portDigitStart;
      H.stringTypeCheck(port);
      t1 = this._portStart;
      if (typeof t1 !== "number")
        return t1.$add();
      portDigitStart = t1 + 1;
      return portDigitStart + port.length === this._pathStart && H.boolConversionCheck(J.startsWith$2$s(this._uri, port, portDigitStart));
    },
    removeFragment$0: function() {
      var t1, _this = this;
      if (!H.boolConversionCheck(_this.get$hasFragment()))
        return _this;
      t1 = _this._fragmentStart;
      return P._SimpleUri$(J.substring$2$s(_this._uri, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1: function(reference) {
      return this.resolveUri$1(P.Uri_parse(H.stringTypeCheck(reference)));
    },
    resolveUri$1: function(reference) {
      H.interceptedTypeCheck(reference, "$isUri");
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2: function(base, ref) {
      var isSimple, t1, delta, t2, t3, t4, newUri, t5, t6, refStart, baseUri, refUri, baseStart, baseEnd, baseStart0, refEnd, backCount, refStart0, insert;
      H.interceptedTypeCheck(base, "$is_SimpleUri");
      H.interceptedTypeCheck(ref, "$is_SimpleUri");
      if (H.boolConversionCheck(ref.get$hasScheme()))
        return ref;
      if (H.boolConversionCheck(ref.get$hasAuthority())) {
        if (!H.boolConversionCheck(base.get$hasScheme()))
          return ref;
        if (H.boolConversionCheck(base.get$_isFile()))
          isSimple = !H.boolConversionCheck(ref.get$hasEmptyPath());
        else if (H.boolConversionCheck(base.get$_isHttp()))
          isSimple = !H.boolConversionCheck(ref._isPort$1("80"));
        else
          isSimple = !H.boolConversionCheck(base.get$_isHttps()) || !H.boolConversionCheck(ref._isPort$1("443"));
        if (isSimple) {
          t1 = base._schemeEnd;
          if (typeof t1 !== "number")
            return t1.$add();
          delta = t1 + 1;
          t2 = J.substring$2$s(base._uri, 0, delta);
          t3 = ref._uri;
          t4 = ref._schemeEnd;
          if (typeof t4 !== "number")
            return t4.$add();
          newUri = J.$add$ansx(t2, J.substring$1$s(t3, t4 + 1));
          t4 = ref._hostStart;
          if (typeof t4 !== "number")
            return t4.$add();
          t3 = ref._portStart;
          if (typeof t3 !== "number")
            return t3.$add();
          t2 = ref._pathStart;
          if (typeof t2 !== "number")
            return t2.$add();
          t5 = ref._queryStart;
          if (typeof t5 !== "number")
            return t5.$add();
          t6 = ref._fragmentStart;
          if (typeof t6 !== "number")
            return t6.$add();
          return P._SimpleUri$(newUri, t1, t4 + delta, t3 + delta, t2 + delta, t5 + delta, t6 + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      if (H.boolConversionCheck(ref.get$hasEmptyPath())) {
        if (H.boolConversionCheck(ref.get$hasQuery())) {
          t1 = base._queryStart;
          t2 = ref._queryStart;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          delta = t1 - t2;
          newUri = J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2));
          t1 = base._schemeEnd;
          t3 = base._hostStart;
          t4 = base._portStart;
          t5 = base._pathStart;
          t6 = ref._fragmentStart;
          if (typeof t6 !== "number")
            return t6.$add();
          return P._SimpleUri$(newUri, t1, t3, t4, t5, t2 + delta, t6 + delta, base._schemeCache);
        }
        if (H.boolConversionCheck(ref.get$hasFragment())) {
          t1 = base._fragmentStart;
          t2 = ref._fragmentStart;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return P._SimpleUri$(J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2)), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t1 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      if (H.boolConversionCheck(ref.get$hasAbsolutePath())) {
        t1 = base._pathStart;
        t2 = ref._pathStart;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        delta = t1 - t2;
        newUri = J.$add$ansx(J.substring$2$s(base._uri, 0, t1), J.substring$1$s(ref._uri, t2));
        t2 = base._schemeEnd;
        t3 = base._hostStart;
        t4 = base._portStart;
        t5 = ref._queryStart;
        if (typeof t5 !== "number")
          return t5.$add();
        t6 = ref._fragmentStart;
        if (typeof t6 !== "number")
          return t6.$add();
        return P._SimpleUri$(newUri, t2, t3, t4, t1, t5 + delta, t6 + delta, base._schemeCache);
      }
      if (H.boolConversionCheck(base.get$hasEmptyPath()) && H.boolConversionCheck(base.get$hasAuthority())) {
        refStart = ref._pathStart;
        for (t1 = ref._uri, t2 = J.getInterceptor$s(t1); H.boolConversionCheck(t2.startsWith$2(t1, "../", refStart));) {
          if (typeof refStart !== "number")
            return refStart.$add();
          refStart += 3;
        }
        t3 = base._pathStart;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof refStart !== "number")
          return H.iae(refStart);
        delta = t3 - refStart + 1;
        newUri = H.S(J.substring$2$s(base._uri, 0, t3)) + "/" + H.S(t2.substring$1(t1, refStart));
        t1 = base._schemeEnd;
        t2 = base._hostStart;
        t4 = base._portStart;
        t5 = ref._queryStart;
        if (typeof t5 !== "number")
          return t5.$add();
        t6 = ref._fragmentStart;
        if (typeof t6 !== "number")
          return t6.$add();
        return P._SimpleUri$(newUri, t1, t2, t4, t3, t5 + delta, t6 + delta, base._schemeCache);
      }
      baseUri = base._uri;
      refUri = ref._uri;
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      for (t1 = J.getInterceptor$s(baseUri), baseStart0 = baseStart; H.boolConversionCheck(t1.startsWith$2(baseUri, "../", baseStart0));) {
        if (typeof baseStart0 !== "number")
          return baseStart0.$add();
        baseStart0 += 3;
      }
      refStart = ref._pathStart;
      refEnd = ref._queryStart;
      t1 = J.getInterceptor$s(refUri);
      backCount = 0;
      while (true) {
        if (typeof refStart !== "number")
          return refStart.$add();
        refStart0 = refStart + 3;
        if (typeof refEnd !== "number")
          return H.iae(refEnd);
        if (!(refStart0 <= refEnd && H.boolConversionCheck(t1.startsWith$2(refUri, "../", refStart))))
          break;
        ++backCount;
        refStart = refStart0;
      }
      insert = "";
      while (true) {
        if (typeof baseEnd !== "number")
          return baseEnd.$gt();
        if (typeof baseStart0 !== "number")
          return H.iae(baseStart0);
        if (!(baseEnd > baseStart0))
          break;
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && !H.boolConversionCheck(base.get$hasScheme()) && !H.boolConversionCheck(base.get$hasAbsolutePath())) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      newUri = H.S(C.JSString_methods.substring$2(baseUri, 0, baseEnd)) + insert + H.S(t1.substring$1(refUri, refStart));
      t1 = base._schemeEnd;
      t2 = base._hostStart;
      t3 = base._portStart;
      t4 = ref._fragmentStart;
      if (typeof t4 !== "number")
        return t4.$add();
      return P._SimpleUri$(newUri, t1, t2, t3, baseStart, refEnd + delta, t4 + delta, base._schemeCache);
    },
    toFilePath$0: function() {
      var t2, windows, _this = this,
        t1 = _this._schemeEnd;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0 && !H.boolConversionCheck(_this.get$_isFile()))
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + H.S(_this.get$scheme()) + " URI"));
      t1 = _this._queryStart;
      t2 = J.get$length$asx(_this._uri);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2) {
        t2 = _this._fragmentStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a query component"));
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a URI with a fragment component"));
      }
      windows = P._Uri__isWindows();
      return H.boolConversionCheck(windows) ? P._Uri__toWindowsFilePath(_this) : _this._toFilePath$0();
    },
    _toFilePath$0: function() {
      var _this = this,
        t1 = _this._hostStart,
        t2 = _this._portStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        throw H.wrapException(P.UnsupportedError$("Cannot extract a non-Windows file path from a file URI with an authority"));
      return _this.get$path(_this);
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = H.intTypeCheck(J.get$hashCode$(this._uri)) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && H.boolConversionCheck(J.$eq$(this._uri, other.toString$0(0)));
    },
    _toNonSimple$0: function() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = H.boolConversionCheck(_this.get$hasAuthority()) ? _this.get$host(_this) : _null,
        t4 = H.boolConversionCheck(_this.get$hasPort()) ? _this.get$port(_this) : _null,
        t5 = _this.get$path(_this),
        t6 = H.boolConversionCheck(_this.get$hasQuery()) ? _this.get$query(_this) : _null;
      return P._Uri$_internal(t1, t2, t3, t4, t5, t6, H.boolConversionCheck(_this.get$hasFragment()) ? _this.get$fragment() : _null);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  P._FakeUserTag.prototype = {$isUserTag: 1};
  P.ServiceExtensionResponse.prototype = {};
  P.UserTag.prototype = {};
  P.Metric.prototype = {};
  P.Gauge.prototype = {};
  P.Counter.prototype = {};
  P.Metrics.prototype = {};
  P.ServiceProtocolInfo.prototype = {};
  P.Service.prototype = {};
  P.Flow.prototype = {};
  P.Timeline.prototype = {};
  P.TimelineTask.prototype = {};
  P._AsyncBlock.prototype = {};
  P._SyncBlock.prototype = {};
  W.HtmlElement.prototype = {$isHtmlElement: 1, $isNoncedElement: 1};
  W.AbortPaymentEvent.prototype = {$isAbortPaymentEvent: 1};
  W.AbsoluteOrientationSensor.prototype = {$isAbsoluteOrientationSensor: 1};
  W.AbstractWorker.prototype = {$isEventTarget: 1};
  W.Accelerometer.prototype = {$isAccelerometer: 1};
  W.AccessibleNode.prototype = {$isAccessibleNode: 1};
  W.AccessibleNodeList.prototype = {$isAccessibleNodeList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AmbientLightSensor.prototype = {$isAmbientLightSensor: 1};
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1,
    $isHtmlHyperlinkElementUtils: 1
  };
  W.Animation.prototype = {$isAnimation: 1};
  W.AnimationEffectReadOnly.prototype = {$isAnimationEffectReadOnly: 1};
  W.AnimationEffectTiming.prototype = {$isAnimationEffectTiming: 1};
  W.AnimationEffectTimingReadOnly.prototype = {$isAnimationEffectTimingReadOnly: 1};
  W.AnimationEvent.prototype = {$isAnimationEvent: 1};
  W.AnimationPlaybackEvent.prototype = {$isAnimationPlaybackEvent: 1};
  W.AnimationTimeline.prototype = {$isAnimationTimeline: 1};
  W.AnimationWorkletGlobalScope.prototype = {$isAnimationWorkletGlobalScope: 1};
  W.ApplicationCache.prototype = {$isApplicationCache: 1};
  W.ApplicationCacheErrorEvent.prototype = {$isApplicationCacheErrorEvent: 1};
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAreaElement: 1,
    $isHtmlHyperlinkElementUtils: 1
  };
  W.AudioElement.prototype = {$isAudioElement: 1};
  W.AuthenticatorAssertionResponse.prototype = {$isAuthenticatorAssertionResponse: 1};
  W.AuthenticatorAttestationResponse.prototype = {$isAuthenticatorAttestationResponse: 1};
  W.AuthenticatorResponse.prototype = {$isAuthenticatorResponse: 1};
  W.BRElement.prototype = {$isBRElement: 1};
  W.BackgroundFetchClickEvent.prototype = {$isBackgroundFetchClickEvent: 1};
  W.BackgroundFetchEvent.prototype = {$isBackgroundFetchEvent: 1};
  W.BackgroundFetchFailEvent.prototype = {$isBackgroundFetchFailEvent: 1};
  W.BackgroundFetchFetch.prototype = {$isBackgroundFetchFetch: 1};
  W.BackgroundFetchManager.prototype = {$isBackgroundFetchManager: 1};
  W.BackgroundFetchRegistration.prototype = {$isBackgroundFetchRegistration: 1};
  W.BackgroundFetchSettledFetch.prototype = {$isBackgroundFetchSettledFetch: 1};
  W.BackgroundFetchedEvent.prototype = {$isBackgroundFetchedEvent: 1};
  W.BarProp.prototype = {$isBarProp: 1};
  W.BarcodeDetector.prototype = {$isBarcodeDetector: 1};
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.BatteryManager.prototype = {$isBatteryManager: 1};
  W.BeforeInstallPromptEvent.prototype = {$isBeforeInstallPromptEvent: 1};
  W.BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BlobEvent.prototype = {$isBlobEvent: 1};
  W.BluetoothRemoteGattDescriptor.prototype = {$isBluetoothRemoteGattDescriptor: 1};
  W.Body.prototype = {$isBody: 1};
  W.BodyElement.prototype = {$isBodyElement: 1, $isWindowEventHandlers: 1};
  W.BroadcastChannel.prototype = {$isBroadcastChannel: 1};
  W.BudgetState.prototype = {$isBudgetState: 1};
  W.ButtonElement.prototype = {$isButtonElement: 1};
  W.CDataSection.prototype = {$isCDataSection: 1};
  W.CacheStorage.prototype = {$isCacheStorage: 1};
  W.CanMakePaymentEvent.prototype = {$isCanMakePaymentEvent: 1};
  W.CanvasCaptureMediaStreamTrack.prototype = {$isCanvasCaptureMediaStreamTrack: 1};
  W.CanvasElement.prototype = {
    getContext$1: function(receiver, contextId) {
      H.stringTypeCheck(contextId);
      return this._getContext_2$1(receiver, contextId);
    },
    _getContext_2$1: function(receiver, contextId) {
      return receiver.getContext(contextId);
    },
    $isCanvasElement: 1,
    $isCanvasImageSource: 1
  };
  W.CanvasGradient.prototype = {
    addColorStop$2: function(receiver, offset, color) {
      return receiver.addColorStop(H.numTypeCheck(offset), H.stringTypeCheck(color));
    },
    $isCanvasGradient: 1
  };
  W.CanvasPattern.prototype = {$isCanvasPattern: 1};
  W.CanvasRenderingContext.prototype = {};
  W.CanvasRenderingContext2D.prototype = {
    beginPath$0: function(receiver) {
      return receiver.beginPath();
    },
    clearRect$4: function(receiver, x, y, width, height) {
      return receiver.clearRect(H.numTypeCheck(x), H.numTypeCheck(y), H.numTypeCheck(width), H.numTypeCheck(height));
    },
    createLinearGradient$4: function(receiver, x0, y0, x1, y1) {
      return receiver.createLinearGradient(H.numTypeCheck(x0), H.numTypeCheck(y0), H.numTypeCheck(x1), H.numTypeCheck(y1));
    },
    fill$0: function(receiver) {
      return receiver.fill();
    },
    fillRect$4: function(receiver, x, y, width, height) {
      return receiver.fillRect(H.numTypeCheck(x), H.numTypeCheck(y), H.numTypeCheck(width), H.numTypeCheck(height));
    },
    restore$0: function(receiver) {
      return receiver.restore();
    },
    save$0: function(receiver) {
      return receiver.save();
    },
    lineTo$2: function(receiver, x, y) {
      return receiver.lineTo(H.numTypeCheck(x), H.numTypeCheck(y));
    },
    moveTo$2: function(receiver, x, y) {
      return receiver.moveTo(H.numTypeCheck(x), H.numTypeCheck(y));
    },
    arc$5: function(receiver, x, y, radius, startAngle, endAngle) {
      receiver.arc(H.numTypeCheck(x), H.numTypeCheck(y), H.numTypeCheck(radius), H.numTypeCheck(startAngle), H.numTypeCheck(endAngle), false);
    },
    $isCanvasRenderingContext: 1,
    $isCanvasRenderingContext2D: 1
  };
  W.CharacterData.prototype = {$isCharacterData: 1, $isChildNode: 1, $isNonDocumentTypeChildNode: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.ChildNode.prototype = {};
  W.Client.prototype = {$isClient: 1};
  W.Clients.prototype = {$isClients: 1};
  W.ClipboardEvent.prototype = {$isClipboardEvent: 1};
  W.CloseEvent.prototype = {$isCloseEvent: 1};
  W.Comment.prototype = {$isComment: 1};
  W.CompositionEvent.prototype = {$isCompositionEvent: 1};
  W.ContentElement.prototype = {$isContentElement: 1};
  W.CookieStore.prototype = {$isCookieStore: 1};
  W.Coordinates.prototype = {$isCoordinates: 1};
  W.Credential.prototype = {$isCredential: 1};
  W.CredentialUserData.prototype = {$isCredentialUserData: 1};
  W.CredentialsContainer.prototype = {$isCredentialsContainer: 1};
  W.Crypto.prototype = {$isCrypto: 1};
  W.CryptoKey.prototype = {$isCryptoKey: 1};
  W.Css.prototype = {$isCss: 1};
  W.CssCharsetRule.prototype = {$isCssCharsetRule: 1};
  W.CssConditionRule.prototype = {$isCssConditionRule: 1};
  W.CssFontFaceRule.prototype = {$isCssFontFaceRule: 1};
  W.CssGroupingRule.prototype = {$isCssGroupingRule: 1};
  W.CssImageValue.prototype = {$isCssImageValue: 1};
  W.CssImportRule.prototype = {$isCssImportRule: 1};
  W.CssKeyframeRule.prototype = {$isCssKeyframeRule: 1};
  W.CssKeyframesRule.prototype = {$isCssKeyframesRule: 1};
  W.CssKeywordValue.prototype = {$isCssKeywordValue: 1};
  W.CssMatrixComponent.prototype = {$isCssMatrixComponent: 1};
  W.CssMediaRule.prototype = {$isCssMediaRule: 1};
  W.CssNamespaceRule.prototype = {$isCssNamespaceRule: 1};
  W.CssNumericValue.prototype = {
    add$1: function(receiver, value) {
      return receiver.add(H.interceptedTypeCheck(value, "$isCssNumericValue"));
    },
    $isCssNumericValue: 1
  };
  W.CssPageRule.prototype = {$isCssPageRule: 1};
  W.CssPerspective.prototype = {$isCssPerspective: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssPositionValue.prototype = {$isCssPositionValue: 1};
  W.CssResourceValue.prototype = {$isCssResourceValue: 1};
  W.CssRotation.prototype = {$isCssRotation: 1};
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssScale.prototype = {$isCssScale: 1};
  W.CssSkew.prototype = {$isCssSkew: 1};
  W.CssStyleDeclaration.prototype = {
    _supportsProperty$1: function(receiver, propertyName) {
      return H.stringTypeCheck(propertyName) in receiver;
    },
    setProperty$2: function(receiver, propertyName, value) {
      H.stringTypeCheck(propertyName);
      H.stringTypeCheck(value);
      return this._setPropertyHelper$3(receiver, this._browserPropertyName$1(receiver, propertyName), value, null);
    },
    _browserPropertyName$1: function(receiver, propertyName) {
      var $name;
      H.stringTypeCheck(propertyName);
      $name = W.CssStyleDeclaration__readCache(propertyName);
      if (typeof $name === "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      W.CssStyleDeclaration__writeCache(propertyName, $name);
      return $name;
    },
    _supportedBrowserPropertyName$1: function(receiver, propertyName) {
      var prefixed;
      H.stringTypeCheck(propertyName);
      if (H.boolConversionCheck(this._supportsProperty$1(receiver, W.CssStyleDeclaration__camelCase(propertyName))))
        return propertyName;
      prefixed = H.S(P.Device_cssPrefix()) + H.S(propertyName);
      if (H.boolConversionCheck(this._supportsProperty$1(receiver, prefixed)))
        return prefixed;
      return propertyName;
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      H.stringTypeCheck(propertyName);
      H.stringTypeCheck(value);
      H.stringTypeCheck(priority);
      if (value == null)
        value = "";
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
    },
    $isCssStyleDeclaration: 1,
    $isCssStyleDeclarationBase: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W._CssStyleDeclarationSet.prototype = {$isCssStyleDeclarationBase: 1};
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleRule.prototype = {$isCssStyleRule: 1};
  W.CssStyleSheet.prototype = {$isCssStyleSheet: 1};
  W.CssStyleValue.prototype = {$isCssStyleValue: 1};
  W.CssSupportsRule.prototype = {$isCssSupportsRule: 1};
  W.CssTransformComponent.prototype = {$isCssTransformComponent: 1};
  W.CssTransformValue.prototype = {$isCssTransformValue: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssTranslation.prototype = {$isCssTranslation: 1};
  W.CssUnitValue.prototype = {$isCssUnitValue: 1};
  W.CssUnparsedValue.prototype = {$isCssUnparsedValue: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssVariableReferenceValue.prototype = {$isCssVariableReferenceValue: 1};
  W.CssViewportRule.prototype = {$isCssViewportRule: 1};
  W.CssurlImageValue.prototype = {$isCssurlImageValue: 1};
  W.CustomElementRegistry.prototype = {$isCustomElementRegistry: 1};
  W.CustomEvent.prototype = {$isCustomEvent: 1};
  W.DListElement.prototype = {$isDListElement: 1};
  W.DataElement.prototype = {$isDataElement: 1};
  W.DataListElement.prototype = {$isDataListElement: 1};
  W.DataTransfer.prototype = {$isDataTransfer: 1};
  W.DataTransferItem.prototype = {$isDataTransferItem: 1};
  W.DataTransferItemList.prototype = {
    add$1: function(receiver, data_OR_file) {
      return receiver.add(data_OR_file);
    },
    $isDataTransferItemList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DedicatedWorkerGlobalScope.prototype = {$isDedicatedWorkerGlobalScope: 1};
  W.DeprecatedStorageInfo.prototype = {$isDeprecatedStorageInfo: 1};
  W.DeprecatedStorageQuota.prototype = {$isDeprecatedStorageQuota: 1};
  W.DeprecationReport.prototype = {$isDeprecationReport: 1};
  W.DetailsElement.prototype = {$isDetailsElement: 1};
  W.DetectedBarcode.prototype = {$isDetectedBarcode: 1};
  W.DetectedFace.prototype = {$isDetectedFace: 1};
  W.DetectedText.prototype = {$isDetectedText: 1};
  W.DeviceAcceleration.prototype = {$isDeviceAcceleration: 1};
  W.DeviceMotionEvent.prototype = {$isDeviceMotionEvent: 1};
  W.DeviceOrientationEvent.prototype = {$isDeviceOrientationEvent: 1};
  W.DeviceRotationRate.prototype = {$isDeviceRotationRate: 1};
  W.DialogElement.prototype = {$isDialogElement: 1};
  W.DirectoryEntry.prototype = {$isDirectoryEntry: 1};
  W.DirectoryReader.prototype = {$isDirectoryReader: 1};
  W.DivElement.prototype = {$isDivElement: 1};
  W.Document.prototype = {
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(H.stringTypeCheck(selectors));
    },
    createElement$1: function(receiver, tagName) {
      var t1 = this._createElement_2$1(receiver, H.stringTypeCheck(tagName));
      return H.interceptedTypeCheck(t1, "$isElement");
    },
    _createElement_2$1: function(receiver, tagName) {
      return receiver.createElement(H.stringTypeCheck(tagName));
    },
    $isDocument: 1
  };
  W.DocumentFragment.prototype = {$isDocumentFragment: 1, $isNonElementParentNode: 1, $isParentNode: 1};
  W.DocumentOrShadowRoot.prototype = {$isDocumentOrShadowRoot: 1};
  W.DocumentTimeline.prototype = {$isDocumentTimeline: 1};
  W.DomError.prototype = {$isDomError: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.DomImplementation.prototype = {$isDomImplementation: 1};
  W.DomIterator.prototype = {$isDomIterator: 1};
  W.DomMatrix.prototype = {$isDomMatrix: 1};
  W.DomMatrixReadOnly.prototype = {$isDomMatrixReadOnly: 1};
  W.DomParser.prototype = {$isDomParser: 1};
  W.DomPoint.prototype = {$isDomPoint: 1};
  W.DomPointReadOnly.prototype = {$isDomPointReadOnly: 1};
  W.DomQuad.prototype = {$isDomQuad: 1};
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isDomRectList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      var _this = this;
      return "Rectangle (" + H.S(_this.get$left(receiver)) + ", " + H.S(_this.get$top(receiver)) + ") " + H.S(_this.get$width(receiver)) + " x " + H.S(_this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      return !!t1.$isRectangle && H.boolConversionCheck(J.$eq$(_this.get$left(receiver), t1.get$left(other))) && H.boolConversionCheck(J.$eq$(_this.get$top(receiver), t1.get$top(other))) && H.boolConversionCheck(J.$eq$(_this.get$width(receiver), t1.get$width(other))) && H.boolConversionCheck(J.$eq$(_this.get$height(receiver), t1.get$height(other)));
    },
    get$hashCode: function(receiver) {
      var _this = this;
      return W._JenkinsSmiHash_hash4(J.get$hashCode$(_this.get$left(receiver)), J.get$hashCode$(_this.get$top(receiver)), J.get$hashCode$(_this.get$width(receiver)), J.get$hashCode$(_this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$left: function(receiver) {
      return receiver.left;
    },
    get$top: function(receiver) {
      return receiver.top;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isDomRectReadOnly: 1,
    $is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [P.String];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [P.String];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isDomStringList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomStringMap.prototype = {$isDomStringMap: 1};
  W.DomTokenList.prototype = {
    add$1: function(receiver, tokens) {
      return receiver.add(H.stringTypeCheck(tokens));
    },
    $isDomTokenList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W._ChildrenElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  W.ElementList.prototype = {};
  W._FrozenElementList.prototype = {$isElementList: 1, $isNodeListWrapper: 1};
  W.Element.prototype = {
    setAttribute$2: function(receiver, $name, value) {
      this._setAttribute$2(receiver, H.stringTypeCheck($name), H.stringTypeCheck(value));
    },
    get$classes: function(receiver) {
      return W._ElementCssClassSet$(receiver);
    },
    get$localName: function(receiver) {
      return receiver.localName;
    },
    toString$0: function(receiver) {
      return this.get$localName(receiver);
    },
    _setAttribute$2: function(receiver, $name, value) {
      return receiver.setAttribute(H.stringTypeCheck($name), H.stringTypeCheck(value));
    },
    $isChildNode: 1,
    $isElement: 1,
    $isGlobalEventHandlers: 1,
    $isNonDocumentTypeChildNode: 1,
    $isParentNode: 1
  };
  W._ElementFactoryProvider.prototype = {};
  W.ScrollAlignment.prototype = {};
  W.EmbedElement.prototype = {$isEmbedElement: 1};
  W.Entry.prototype = {$isEntry: 1};
  W.ErrorEvent.prototype = {$isErrorEvent: 1};
  W.Event.prototype = {$isEvent: 1};
  W.EventSource.prototype = {$isEventSource: 1};
  W.Events.prototype = {};
  W.ElementEvents.prototype = {};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(options);
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(options);
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), options);
    },
    $isEventTarget: 1
  };
  W.ExtendableEvent.prototype = {$isExtendableEvent: 1};
  W.ExtendableMessageEvent.prototype = {$isExtendableMessageEvent: 1};
  W.External.prototype = {$isExternal: 1};
  W.FaceDetector.prototype = {$isFaceDetector: 1};
  W.FederatedCredential.prototype = {$isCredentialUserData: 1, $isFederatedCredential: 1};
  W.FetchEvent.prototype = {$isFetchEvent: 1};
  W.FieldSetElement.prototype = {$isFieldSetElement: 1};
  W.File.prototype = {$isFile: 1};
  W.FileEntry.prototype = {$isFileEntry: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isFile");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.File];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.File];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isFileList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileReader.prototype = {$isFileReader: 1};
  W.FileSystem.prototype = {$isFileSystem: 1};
  W.FileWriter.prototype = {$isFileWriter: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FocusEvent.prototype = {$isFocusEvent: 1};
  W.FontFace.prototype = {$isFontFace: 1};
  W.FontFaceSet.prototype = {
    add$1: function(receiver, arg) {
      return receiver.add(H.interceptedTypeCheck(arg, "$isFontFace"));
    },
    $isFontFaceSet: 1
  };
  W.FontFaceSetLoadEvent.prototype = {$isFontFaceSetLoadEvent: 1};
  W.FontFaceSource.prototype = {$isFontFaceSource: 1};
  W.ForeignFetchEvent.prototype = {$isForeignFetchEvent: 1};
  W.FormData.prototype = {$isFormData: 1};
  W.FormElement.prototype = {$isFormElement: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.GamepadButton.prototype = {$isGamepadButton: 1};
  W.GamepadEvent.prototype = {$isGamepadEvent: 1};
  W.GamepadPose.prototype = {$isGamepadPose: 1};
  W.Geolocation.prototype = {$isGeolocation: 1};
  W._GeopositionWrapper.prototype = {$isInterceptor: 1, $isGeoposition: 1};
  W.Geoposition.prototype = {$isGeoposition: 1};
  W.GlobalEventHandlers.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.Gyroscope.prototype = {$isGyroscope: 1};
  W.HRElement.prototype = {$isHRElement: 1};
  W.HashChangeEvent.prototype = {$isHashChangeEvent: 1};
  W.HeadElement.prototype = {$isHeadElement: 1};
  W.Headers.prototype = {$isHeaders: 1};
  W.HeadingElement.prototype = {$isHeadingElement: 1};
  W.History.prototype = {$isHistory: 1, $isHistoryBase: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.HtmlDocument.prototype = {
    get$head: function(receiver) {
      return receiver.head;
    },
    $isHtmlDocument: 1
  };
  W.HtmlFormControlsCollection.prototype = {$isHtmlFormControlsCollection: 1};
  W.HtmlHtmlElement.prototype = {$isHtmlHtmlElement: 1};
  W.HtmlHyperlinkElementUtils.prototype = {$isHtmlHyperlinkElementUtils: 1};
  W.HtmlOptionsCollection.prototype = {$isHtmlOptionsCollection: 1};
  W.HttpRequest0.prototype = {$isHttpRequest0: 1};
  W.HttpRequestEventTarget.prototype = {$isHttpRequestEventTarget: 1};
  W.HttpRequestUpload.prototype = {$isHttpRequestUpload: 1};
  W.IFrameElement.prototype = {$isIFrameElement: 1};
  W.IdleDeadline.prototype = {$isIdleDeadline: 1};
  W.ImageBitmap.prototype = {$isImageBitmap: 1};
  W.ImageBitmapRenderingContext.prototype = {$isImageBitmapRenderingContext: 1};
  W.ImageCapture.prototype = {$isImageCapture: 1};
  W.ImageData.prototype = {$isImageData: 1};
  W.ImageElement.prototype = {$isImageElement: 1, $isCanvasImageSource: 1};
  W.InputDeviceCapabilities.prototype = {$isInputDeviceCapabilities: 1};
  W.InputElement.prototype = {$isInputElement: 1, $isInputElementBase: 1, $isHiddenInputElement: 1, $isTextInputElementBase: 1, $isSearchInputElement: 1, $isTextInputElement: 1, $isUrlInputElement: 1, $isTelephoneInputElement: 1, $isEmailInputElement: 1, $isPasswordInputElement: 1, $isRangeInputElementBase: 1, $isDateInputElement: 1, $isMonthInputElement: 1, $isWeekInputElement: 1, $isTimeInputElement: 1, $isLocalDateTimeInputElement: 1, $isNumberInputElement: 1, $isRangeInputElement: 1, $isCheckboxInputElement: 1, $isRadioButtonInputElement: 1, $isFileUploadInputElement: 1, $isSubmitButtonInputElement: 1, $isImageButtonInputElement: 1, $isResetButtonInputElement: 1, $isButtonInputElement: 1};
  W.InputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.HiddenInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SearchInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TextInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.UrlInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TelephoneInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.EmailInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.PasswordInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isTextInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElementBase.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.DateInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.MonthInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.WeekInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.TimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.LocalDateTimeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.NumberInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RangeInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isRangeInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.CheckboxInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.RadioButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.FileUploadInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.SubmitButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ImageButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ResetButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.ButtonInputElement.prototype = {$isInterceptor: 1, $isChildNode: 1, $isElement: 1, $isEventTarget: 1, $isGlobalEventHandlers: 1, $isInputElementBase: 1, $isNode: 1, $isNonDocumentTypeChildNode: 1, $isParentNode: 1};
  W.InstallEvent.prototype = {$isInstallEvent: 1};
  W.IntersectionObserver.prototype = {$isIntersectionObserver: 1};
  W.IntersectionObserverEntry.prototype = {$isIntersectionObserverEntry: 1};
  W.InterventionReport.prototype = {$isInterventionReport: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.KeyframeEffect.prototype = {$isKeyframeEffect: 1};
  W.KeyframeEffectReadOnly.prototype = {$isKeyframeEffectReadOnly: 1};
  W.LIElement.prototype = {$isLIElement: 1};
  W.LabelElement.prototype = {$isLabelElement: 1};
  W.LegendElement.prototype = {$isLegendElement: 1};
  W.LinearAccelerationSensor.prototype = {$isLinearAccelerationSensor: 1};
  W.LinkElement.prototype = {$isLinkElement: 1};
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1,
    $isLocationBase: 1
  };
  W.Magnetometer.prototype = {$isMagnetometer: 1};
  W.MapElement.prototype = {$isMapElement: 1};
  W.MediaCapabilities.prototype = {$isMediaCapabilities: 1};
  W.MediaCapabilitiesInfo.prototype = {$isMediaCapabilitiesInfo: 1};
  W.MediaDeviceInfo.prototype = {$isMediaDeviceInfo: 1};
  W.MediaDevices.prototype = {$isMediaDevices: 1};
  W.MediaElement.prototype = {$isMediaElement: 1};
  W.MediaEncryptedEvent.prototype = {$isMediaEncryptedEvent: 1};
  W.MediaError.prototype = {$isMediaError: 1};
  W.MediaKeyMessageEvent.prototype = {$isMediaKeyMessageEvent: 1};
  W.MediaKeySession.prototype = {$isMediaKeySession: 1};
  W.MediaKeyStatusMap.prototype = {$isMediaKeyStatusMap: 1};
  W.MediaKeySystemAccess.prototype = {$isMediaKeySystemAccess: 1};
  W.MediaKeys.prototype = {$isMediaKeys: 1};
  W.MediaKeysPolicy.prototype = {$isMediaKeysPolicy: 1};
  W.MediaList.prototype = {$isMediaList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MediaMetadata.prototype = {$isMediaMetadata: 1};
  W.MediaQueryList.prototype = {$isMediaQueryList: 1};
  W.MediaQueryListEvent.prototype = {$isMediaQueryListEvent: 1};
  W.MediaRecorder.prototype = {
    start$1: function(receiver, timeslice) {
      return receiver.start(H.intTypeCheck(timeslice));
    },
    start$0: function($receiver) {
      return $receiver.start();
    },
    $isMediaRecorder: 1,
    get$stream: function(receiver) {
      return receiver.stream;
    }
  };
  W.MediaSession.prototype = {$isMediaSession: 1};
  W.MediaSettingsRange.prototype = {$isMediaSettingsRange: 1};
  W.MediaSource.prototype = {$isMediaSource: 1};
  W.MediaStream.prototype = {$isMediaStream: 1};
  W.MediaStreamEvent.prototype = {$isMediaStreamEvent: 1,
    get$stream: function(receiver) {
      return receiver.stream;
    }
  };
  W.MediaStreamTrack.prototype = {$isMediaStreamTrack: 1};
  W.MediaStreamTrackEvent.prototype = {$isMediaStreamTrackEvent: 1};
  W.MemoryInfo.prototype = {$isMemoryInfo: 1};
  W.MenuElement.prototype = {$isMenuElement: 1};
  W.MessageChannel.prototype = {$isMessageChannel: 1};
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.stringTypeCheck(type);
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      H.boolTypeCheck(useCapture);
      if (type === "message")
        this._html$_start$0(receiver);
      this.super$EventTarget$addEventListener(receiver, type, listener, useCapture);
    },
    _html$_start$0: function(receiver) {
      return receiver.start();
    },
    $isMessagePort: 1
  };
  W.MetaElement.prototype = {$isMetaElement: 1};
  W.Metadata.prototype = {$isMetadata: 1};
  W.MeterElement.prototype = {$isMeterElement: 1};
  W.MidiAccess.prototype = {$isMidiAccess: 1};
  W.MidiConnectionEvent.prototype = {$isMidiConnectionEvent: 1};
  W.MidiInput.prototype = {$isMidiInput: 1};
  W.MidiInputMap.prototype = {
    _getItem$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    containsKey$1: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.MidiInputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiInputMap: 1
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return J.add$1$ax(this.keys, H.stringTypeCheck(k));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.MidiInputMap_values_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      return J.add$1$ax(this.values, H.interceptedTypeCheck(v, "$isMap"));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.MidiMessageEvent.prototype = {$isMidiMessageEvent: 1};
  W.MidiOutput.prototype = {$isMidiOutput: 1};
  W.MidiOutputMap.prototype = {
    _getItem$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    containsKey$1: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.MidiOutputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isMidiOutputMap: 1
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return J.add$1$ax(this.keys, H.stringTypeCheck(k));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.MidiOutputMap_values_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      return J.add$1$ax(this.values, H.interceptedTypeCheck(v, "$isMap"));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.MidiPort.prototype = {$isMidiPort: 1};
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMimeType");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.MimeType];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.MimeType];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isMimeTypeArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.ModElement.prototype = {$isModElement: 1};
  W.MouseEvent.prototype = {
    get$movement: function(receiver) {
      return P.Point$(receiver.movementX, receiver.movementY, P.num);
    },
    get$page: function(receiver) {
      return P.Point$(receiver.pageX, receiver.pageY, P.num);
    },
    $isMouseEvent: 1
  };
  W.MutationEvent.prototype = {$isMutationEvent: 1};
  W.MutationObserver.prototype = {$isMutationObserver: 1};
  W.MutationRecord.prototype = {$isMutationRecord: 1};
  W.NavigationPreloadManager.prototype = {$isNavigationPreloadManager: 1};
  W.Navigator.prototype = {$isNavigator: 1, $isNavigatorAutomationInformation: 1, $isNavigatorCookies: 1, $isNavigatorID: 1, $isNavigatorLanguage: 1, $isNavigatorOnLine: 1};
  W.NavigatorAutomationInformation.prototype = {$isNavigatorAutomationInformation: 1};
  W.NavigatorConcurrentHardware.prototype = {$isNavigatorConcurrentHardware: 1};
  W.NavigatorCookies.prototype = {$isNavigatorCookies: 1};
  W.NavigatorID.prototype = {};
  W.NavigatorLanguage.prototype = {};
  W.NavigatorOnLine.prototype = {};
  W.NavigatorUserMediaError.prototype = {$isNavigatorUserMediaError: 1};
  W.NetworkInformation.prototype = {$isNetworkInformation: 1};
  W._ChildNodeListLazy.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        J._removeChild$1$x(t1, receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      H.interceptedTypeCheck(otherNode, "$isNode");
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return receiver;
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    append$1: function(receiver, node) {
      return receiver.appendChild(H.interceptedTypeCheck(node, "$isNode"));
    },
    _removeChild$1: function(receiver, child) {
      return receiver.removeChild(H.interceptedTypeCheck(child, "$isNode"));
    },
    _replaceChild$2: function(receiver, node, child) {
      return receiver.replaceChild(H.interceptedTypeCheck(node, "$isNode"), H.interceptedTypeCheck(child, "$isNode"));
    },
    $isNode: 1
  };
  W.NodeFilter.prototype = {$isNodeFilter: 1};
  W.NodeIterator.prototype = {$isNodeIterator: 1};
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isNodeList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.NonDocumentTypeChildNode.prototype = {$isNonDocumentTypeChildNode: 1};
  W.NonElementParentNode.prototype = {$isNonElementParentNode: 1};
  W.NoncedElement.prototype = {$isNoncedElement: 1};
  W.Notification.prototype = {$isNotification: 1};
  W.NotificationEvent.prototype = {$isNotificationEvent: 1};
  W.OListElement.prototype = {$isOListElement: 1,
    get$start: function(receiver) {
      return receiver.start;
    }
  };
  W.ObjectElement.prototype = {$isObjectElement: 1};
  W.OffscreenCanvas.prototype = {$isOffscreenCanvas: 1};
  W.OffscreenCanvasRenderingContext2D.prototype = {$isOffscreenCanvasRenderingContext2D: 1, $is_CanvasPath: 1};
  W.OptGroupElement.prototype = {$isOptGroupElement: 1};
  W.OptionElement.prototype = {$isOptionElement: 1};
  W.OrientationSensor.prototype = {$isOrientationSensor: 1};
  W.OutputElement.prototype = {$isOutputElement: 1};
  W.OverconstrainedError.prototype = {$isOverconstrainedError: 1};
  W.PageTransitionEvent.prototype = {$isPageTransitionEvent: 1};
  W.PaintRenderingContext2D.prototype = {$isPaintRenderingContext2D: 1, $is_CanvasPath: 1};
  W.PaintSize.prototype = {$isPaintSize: 1};
  W.PaintWorkletGlobalScope.prototype = {$isPaintWorkletGlobalScope: 1};
  W.ParagraphElement.prototype = {$isParagraphElement: 1};
  W.ParamElement.prototype = {$isParamElement: 1};
  W.ParentNode.prototype = {};
  W.PasswordCredential.prototype = {$isCredentialUserData: 1, $isPasswordCredential: 1};
  W.Path2D.prototype = {$isPath2D: 1, $is_CanvasPath: 1};
  W.PaymentAddress.prototype = {$isPaymentAddress: 1};
  W.PaymentInstruments.prototype = {$isPaymentInstruments: 1};
  W.PaymentManager.prototype = {$isPaymentManager: 1};
  W.PaymentRequest.prototype = {$isPaymentRequest: 1};
  W.PaymentRequestEvent.prototype = {$isPaymentRequestEvent: 1};
  W.PaymentRequestUpdateEvent.prototype = {$isPaymentRequestUpdateEvent: 1};
  W.PaymentResponse.prototype = {$isPaymentResponse: 1};
  W.Performance.prototype = {$isPerformance: 1};
  W.PerformanceEntry.prototype = {$isPerformanceEntry: 1};
  W.PerformanceLongTaskTiming.prototype = {$isPerformanceLongTaskTiming: 1};
  W.PerformanceMark.prototype = {$isPerformanceMark: 1};
  W.PerformanceMeasure.prototype = {$isPerformanceMeasure: 1};
  W.PerformanceNavigation.prototype = {$isPerformanceNavigation: 1};
  W.PerformanceNavigationTiming.prototype = {$isPerformanceNavigationTiming: 1};
  W.PerformanceObserver.prototype = {$isPerformanceObserver: 1};
  W.PerformanceObserverEntryList.prototype = {$isPerformanceObserverEntryList: 1};
  W.PerformancePaintTiming.prototype = {$isPerformancePaintTiming: 1};
  W.PerformanceResourceTiming.prototype = {$isPerformanceResourceTiming: 1};
  W.PerformanceServerTiming.prototype = {$isPerformanceServerTiming: 1};
  W.PerformanceTiming.prototype = {$isPerformanceTiming: 1};
  W.PermissionStatus.prototype = {$isPermissionStatus: 1};
  W.Permissions.prototype = {$isPermissions: 1};
  W.PhotoCapabilities.prototype = {$isPhotoCapabilities: 1};
  W.PictureElement.prototype = {$isPictureElement: 1};
  W.Plugin.prototype = {$isPlugin: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isPlugin");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Plugin];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Plugin];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isPluginArray: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.PointerEvent.prototype = {$isPointerEvent: 1};
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.PositionError.prototype = {$isPositionError: 1};
  W.PreElement.prototype = {$isPreElement: 1};
  W.Presentation.prototype = {$isPresentation: 1};
  W.PresentationAvailability.prototype = {$isPresentationAvailability: 1};
  W.PresentationConnection.prototype = {$isPresentationConnection: 1};
  W.PresentationConnectionAvailableEvent.prototype = {$isPresentationConnectionAvailableEvent: 1};
  W.PresentationConnectionCloseEvent.prototype = {$isPresentationConnectionCloseEvent: 1};
  W.PresentationConnectionList.prototype = {$isPresentationConnectionList: 1};
  W.PresentationReceiver.prototype = {$isPresentationReceiver: 1};
  W.PresentationRequest.prototype = {
    start$0: function(receiver) {
      return P.promiseToFuture(receiver.start(), W.PresentationConnection);
    },
    $isPresentationRequest: 1
  };
  W.ProcessingInstruction.prototype = {$isProcessingInstruction: 1};
  W.ProgressElement.prototype = {$isProgressElement: 1};
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.PromiseRejectionEvent.prototype = {$isPromiseRejectionEvent: 1};
  W.PublicKeyCredential.prototype = {$isPublicKeyCredential: 1};
  W.PushEvent.prototype = {$isPushEvent: 1};
  W.PushManager.prototype = {$isPushManager: 1};
  W.PushMessageData.prototype = {$isPushMessageData: 1};
  W.PushSubscription.prototype = {$isPushSubscription: 1};
  W.PushSubscriptionOptions.prototype = {$isPushSubscriptionOptions: 1};
  W.QuoteElement.prototype = {$isQuoteElement: 1};
  W.Range.prototype = {$isRange: 1};
  W.RelatedApplication.prototype = {$isRelatedApplication: 1};
  W.RelativeOrientationSensor.prototype = {$isRelativeOrientationSensor: 1};
  W.RemotePlayback.prototype = {$isRemotePlayback: 1};
  W.ReportBody.prototype = {$isReportBody: 1};
  W.ReportingObserver.prototype = {$isReportingObserver: 1};
  W.ResizeObserver.prototype = {$isResizeObserver: 1};
  W.ResizeObserverEntry.prototype = {$isResizeObserverEntry: 1};
  W.RtcCertificate.prototype = {$isRtcCertificate: 1};
  W.RtcDataChannel.prototype = {$isRtcDataChannel: 1};
  W.RtcDataChannelEvent.prototype = {$isRtcDataChannelEvent: 1};
  W.RtcDtmfSender.prototype = {$isRtcDtmfSender: 1};
  W.RtcDtmfToneChangeEvent.prototype = {$isRtcDtmfToneChangeEvent: 1};
  W.RtcIceCandidate.prototype = {$isRtcIceCandidate: 1};
  W.RtcLegacyStatsReport.prototype = {$isRtcLegacyStatsReport: 1};
  W.RtcPeerConnection.prototype = {$isRtcPeerConnection: 1};
  W.RtcPeerConnectionIceEvent.prototype = {$isRtcPeerConnectionIceEvent: 1};
  W.RtcRtpContributingSource.prototype = {$isRtcRtpContributingSource: 1};
  W.RtcRtpReceiver.prototype = {$isRtcRtpReceiver: 1};
  W.RtcRtpSender.prototype = {$isRtcRtpSender: 1};
  W.RtcSessionDescription.prototype = {$isRtcSessionDescription: 1};
  W.RtcStatsReport.prototype = {
    _getItem$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    containsKey$1: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.RtcStatsReport_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isRtcStatsReport: 1
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return J.add$1$ax(this.keys, H.stringTypeCheck(k));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.RtcStatsReport_values_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      return J.add$1$ax(this.values, H.interceptedTypeCheck(v, "$isMap"));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  W.RtcStatsResponse.prototype = {$isRtcStatsResponse: 1};
  W.RtcTrackEvent.prototype = {$isRtcTrackEvent: 1};
  W.Screen.prototype = {$isScreen: 1};
  W.ScreenOrientation.prototype = {$isScreenOrientation: 1};
  W.ScriptElement.prototype = {$isScriptElement: 1};
  W.ScrollState.prototype = {$isScrollState: 1};
  W.ScrollTimeline.prototype = {$isScrollTimeline: 1};
  W.SecurityPolicyViolationEvent.prototype = {$isSecurityPolicyViolationEvent: 1};
  W.SelectElement.prototype = {$isSelectElement: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Selection.prototype = {$isSelection: 1};
  W.Sensor.prototype = {
    start$0: function(receiver) {
      return receiver.start();
    },
    $isSensor: 1
  };
  W.SensorErrorEvent.prototype = {$isSensorErrorEvent: 1};
  W.ServiceWorker.prototype = {$isAbstractWorker: 1, $isServiceWorker: 1};
  W.ServiceWorkerContainer.prototype = {$isServiceWorkerContainer: 1};
  W.ServiceWorkerGlobalScope.prototype = {$isServiceWorkerGlobalScope: 1};
  W.ServiceWorkerRegistration.prototype = {$isServiceWorkerRegistration: 1};
  W.ShadowElement.prototype = {$isShadowElement: 1};
  W.ShadowRoot.prototype = {$isDocumentOrShadowRoot: 1, $isShadowRoot: 1};
  W.SharedArrayBuffer.prototype = {$isSharedArrayBuffer: 1};
  W.SharedWorker.prototype = {$isAbstractWorker: 1, $isSharedWorker: 1};
  W.SharedWorkerGlobalScope.prototype = {$isSharedWorkerGlobalScope: 1};
  W.SlotElement.prototype = {$isSlotElement: 1};
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSourceBuffer");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SourceBuffer];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SourceBuffer];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isSourceBufferList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SourceElement.prototype = {$isSourceElement: 1};
  W.SpanElement.prototype = {$isSpanElement: 1};
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechGrammar");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechGrammar];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isSpeechGrammarList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognition.prototype = {
    start$0: function(receiver) {
      return receiver.start();
    },
    $isSpeechRecognition: 1
  };
  W.SpeechRecognitionAlternative.prototype = {$isSpeechRecognitionAlternative: 1};
  W.SpeechRecognitionError.prototype = {$isSpeechRecognitionError: 1};
  W.SpeechRecognitionEvent.prototype = {$isSpeechRecognitionEvent: 1};
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.SpeechSynthesis.prototype = {$isSpeechSynthesis: 1};
  W.SpeechSynthesisEvent.prototype = {$isSpeechSynthesisEvent: 1};
  W.SpeechSynthesisUtterance.prototype = {$isSpeechSynthesisUtterance: 1};
  W.SpeechSynthesisVoice.prototype = {$isSpeechSynthesisVoice: 1};
  W.StaticRange.prototype = {$isStaticRange: 1};
  W.Storage.prototype = {
    containsKey$1: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return this._getItem$1(receiver, H.stringTypeCheck(key));
    },
    $indexSet: function(receiver, key, value) {
      this._setItem$2(receiver, H.stringTypeCheck(key), H.stringTypeCheck(value));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = this._key$1(receiver, i);
        if (key == null)
          return;
        f.call$2(key, this.$index(receiver, key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return this._key$1(receiver, 0) == null;
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    _getItem$1: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    _key$1: function(receiver, index) {
      return receiver.key(H.intTypeCheck(index));
    },
    _setItem$2: function(receiver, key, value) {
      return receiver.setItem(H.stringTypeCheck(key), H.stringTypeCheck(value));
    },
    $isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    },
    $isStorage: 1
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      H.stringTypeCheck(v);
      return J.add$1$ax(this.keys, k);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 15
  };
  W.Storage_values_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      return J.add$1$ax(this.values, H.stringTypeCheck(v));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 15
  };
  W.StorageEvent.prototype = {$isStorageEvent: 1};
  W.StorageManager.prototype = {$isStorageManager: 1};
  W.StyleElement.prototype = {$isStyleElement: 1};
  W.StyleMedia.prototype = {$isStyleMedia: 1};
  W.StylePropertyMap.prototype = {$isStylePropertyMap: 1};
  W.StylePropertyMapReadonly.prototype = {$isStylePropertyMapReadonly: 1};
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.SyncEvent.prototype = {$isSyncEvent: 1};
  W.SyncManager.prototype = {$isSyncManager: 1};
  W.TableCaptionElement.prototype = {$isTableCaptionElement: 1};
  W.TableCellElement.prototype = {$isTableCellElement: 1};
  W.TableColElement.prototype = {$isTableColElement: 1};
  W.TableElement.prototype = {$isTableElement: 1};
  W.TableRowElement.prototype = {$isTableRowElement: 1};
  W.TableSectionElement.prototype = {$isTableSectionElement: 1};
  W.TaskAttributionTiming.prototype = {$isTaskAttributionTiming: 1};
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.Text.prototype = {$isText: 1};
  W.TextAreaElement.prototype = {$isTextAreaElement: 1};
  W.TextDetector.prototype = {$isTextDetector: 1};
  W.TextEvent.prototype = {$isTextEvent: 1};
  W.TextMetrics.prototype = {$isTextMetrics: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrackCue");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrackCue];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrackCue];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isTextTrackCueList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrack");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.TextTrack];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.TextTrack];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isTextTrackList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeElement.prototype = {$isTimeElement: 1};
  W.TimeRanges.prototype = {
    end$1: function(receiver, index) {
      return receiver.end(H.intTypeCheck(index));
    },
    start$1: function(receiver, index) {
      return receiver.start(H.intTypeCheck(index));
    },
    $isTimeRanges: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.TitleElement.prototype = {$isTitleElement: 1};
  W.Touch.prototype = {$isTouch: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTouch");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Touch];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Touch];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isTouchList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefault.prototype = {$isTrackDefault: 1};
  W.TrackDefaultList.prototype = {$isTrackDefaultList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.TrackElement.prototype = {$isTrackElement: 1};
  W.TrackEvent.prototype = {$isTrackEvent: 1};
  W.TransitionEvent.prototype = {$isTransitionEvent: 1};
  W.TreeWalker.prototype = {$isTreeWalker: 1};
  W.TrustedHtml.prototype = {$isTrustedHtml: 1};
  W.TrustedScriptUrl.prototype = {$isTrustedScriptUrl: 1};
  W.TrustedUrl.prototype = {$isTrustedUrl: 1};
  W.UIEvent.prototype = {$isUIEvent: 1};
  W.UListElement.prototype = {$isUListElement: 1};
  W.UnderlyingSourceBase.prototype = {
    start$1: function(receiver, stream) {
      return P.promiseToFuture(receiver.start(stream), null);
    },
    $isUnderlyingSourceBase: 1
  };
  W.UnknownElement.prototype = {$isUnknownElement: 1};
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isUrl: 1
  };
  W.UrlSearchParams.prototype = {$isUrlSearchParams: 1};
  W.UrlUtilsReadOnly.prototype = {};
  W.VR.prototype = {$isVR: 1};
  W.VRCoordinateSystem.prototype = {$isVRCoordinateSystem: 1};
  W.VRDevice.prototype = {$isVRDevice: 1};
  W.VRDeviceEvent.prototype = {$isVRDeviceEvent: 1};
  W.VRDisplay.prototype = {$isVRDisplay: 1};
  W.VRDisplayCapabilities.prototype = {$isVRDisplayCapabilities: 1};
  W.VRDisplayEvent.prototype = {$isVRDisplayEvent: 1};
  W.VREyeParameters.prototype = {$isVREyeParameters: 1};
  W.VRFrameData.prototype = {$isVRFrameData: 1};
  W.VRFrameOfReference.prototype = {$isVRFrameOfReference: 1};
  W.VRPose.prototype = {$isVRPose: 1};
  W.VRSession.prototype = {
    end$0: function(receiver) {
      return P.promiseToFuture(receiver.end(), null);
    },
    $isVRSession: 1
  };
  W.VRSessionEvent.prototype = {$isVRSessionEvent: 1};
  W.VRStageBounds.prototype = {$isVRStageBounds: 1};
  W.VRStageBoundsPoint.prototype = {$isVRStageBoundsPoint: 1};
  W.VRStageParameters.prototype = {$isVRStageParameters: 1};
  W.ValidityState.prototype = {$isValidityState: 1};
  W.VideoElement.prototype = {$isVideoElement: 1, $isCanvasImageSource: 1};
  W.VideoPlaybackQuality.prototype = {$isVideoPlaybackQuality: 1};
  W.VideoTrack.prototype = {$isVideoTrack: 1};
  W.VideoTrackList.prototype = {$isVideoTrackList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.VisualViewport.prototype = {$isVisualViewport: 1};
  W.VttCue.prototype = {$isVttCue: 1};
  W.VttRegion.prototype = {$isVttRegion: 1};
  W.WebSocket0.prototype = {$isWebSocket0: 1};
  W.WheelEvent.prototype = {$isWheelEvent: 1};
  W.Window.prototype = {
    requestAnimationFrame$1: function(receiver, callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      return this._requestAnimationFrame$1(receiver, W._wrapZone(callback, P.num));
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$console: function(receiver) {
      return C.C_Console;
    },
    get$onKeyDown: function(receiver) {
      return C.EventStreamProvider_keydown.forTarget$1(receiver);
    },
    get$onKeyPress: function(receiver) {
      return C.EventStreamProvider_keypress.forTarget$1(receiver);
    },
    get$onKeyUp: function(receiver) {
      return C.EventStreamProvider_keyup.forTarget$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forTarget$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forTarget$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forTarget$1(receiver);
    },
    get$onResize: function(receiver) {
      return C.EventStreamProvider_resize.forTarget$1(receiver);
    },
    $isGlobalEventHandlers: 1,
    $isWindow: 1,
    $isWindowBase64: 1,
    $isWindowEventHandlers: 1,
    $is_WindowTimers: 1,
    $isWindowBase: 1
  };
  W._BeforeUnloadEvent.prototype = {$isBeforeUnloadEvent: 1};
  W._BeforeUnloadEventStreamProvider.prototype = {$isEventStreamProvider: 1,
    $asEventStreamProvider: function() {
      return [W.BeforeUnloadEvent];
    }
  };
  W.WindowBase64.prototype = {};
  W.WindowClient.prototype = {$isWindowClient: 1};
  W.WindowEventHandlers.prototype = {};
  W.Worker.prototype = {$isAbstractWorker: 1, $isWorker: 1};
  W.WorkerGlobalScope.prototype = {$isWindowBase64: 1, $isWorkerGlobalScope: 1, $is_WindowTimers: 1};
  W.WorkerPerformance.prototype = {$isWorkerPerformance: 1};
  W.WorkletAnimation.prototype = {$isWorkletAnimation: 1};
  W.WorkletGlobalScope.prototype = {$isWorkletGlobalScope: 1};
  W.XPathEvaluator.prototype = {$isXPathEvaluator: 1};
  W.XPathExpression.prototype = {$isXPathExpression: 1};
  W.XPathNSResolver.prototype = {$isXPathNSResolver: 1};
  W.XPathResult.prototype = {$isXPathResult: 1};
  W.XmlDocument.prototype = {$isXmlDocument: 1};
  W.XmlSerializer.prototype = {$isXmlSerializer: 1};
  W.XsltProcessor.prototype = {$isXsltProcessor: 1};
  W._Attr.prototype = {$is_Attr: 1};
  W._Bluetooth.prototype = {$is_Bluetooth: 1};
  W._BluetoothCharacteristicProperties.prototype = {$is_BluetoothCharacteristicProperties: 1};
  W._BluetoothDevice.prototype = {$is_BluetoothDevice: 1};
  W._BluetoothRemoteGATTCharacteristic.prototype = {$is_BluetoothRemoteGATTCharacteristic: 1};
  W._BluetoothRemoteGATTServer.prototype = {$is_BluetoothRemoteGATTServer: 1};
  W._BluetoothRemoteGATTService.prototype = {$is_BluetoothRemoteGATTService: 1};
  W._BluetoothUUID.prototype = {$is_BluetoothUUID: 1};
  W._BudgetService.prototype = {$is_BudgetService: 1};
  W._Cache.prototype = {$is_Cache: 1};
  W._CanvasPath.prototype = {};
  W._Clipboard.prototype = {$is_Clipboard: 1};
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isCssRule");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.CssRule];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.CssRule];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $is_CssRuleList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DOMFileSystemSync.prototype = {$is_DOMFileSystemSync: 1};
  W._DirectoryEntrySync.prototype = {$is_DirectoryEntrySync: 1};
  W._DirectoryReaderSync.prototype = {$is_DirectoryReaderSync: 1};
  W._DocumentType.prototype = {$isChildNode: 1, $is_DocumentType: 1};
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      var _this = this;
      return "Rectangle (" + H.S(_this.get$left(receiver)) + ", " + H.S(_this.get$top(receiver)) + ") " + H.S(_this.get$width(receiver)) + " x " + H.S(_this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      return !!t1.$isRectangle && H.boolConversionCheck(J.$eq$(_this.get$left(receiver), t1.get$left(other))) && H.boolConversionCheck(J.$eq$(_this.get$top(receiver), t1.get$top(other))) && H.boolConversionCheck(J.$eq$(_this.get$width(receiver), t1.get$width(other))) && H.boolConversionCheck(J.$eq$(_this.get$height(receiver), t1.get$height(other)));
    },
    get$hashCode: function(receiver) {
      var _this = this;
      return W._JenkinsSmiHash_hash4(J.get$hashCode$(_this.get$left(receiver)), J.get$hashCode$(_this.get$top(receiver)), J.get$hashCode$(_this.get$width(receiver)), J.get$hashCode$(_this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $is_DomRect: 1
  };
  W._JenkinsSmiHash.prototype = {};
  W._EntrySync.prototype = {$is_EntrySync: 1};
  W._FileEntrySync.prototype = {$is_FileEntrySync: 1};
  W._FileReaderSync.prototype = {$is_FileReaderSync: 1};
  W._FileWriterSync.prototype = {$is_FileWriterSync: 1};
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isGamepad");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Gamepad];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Gamepad];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $is_GamepadList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._HTMLAllCollection.prototype = {$is_HTMLAllCollection: 1};
  W._HTMLDirectoryElement.prototype = {$is_HTMLDirectoryElement: 1};
  W._HTMLFontElement.prototype = {$is_HTMLFontElement: 1};
  W._HTMLFrameElement.prototype = {$is_HTMLFrameElement: 1};
  W._HTMLFrameSetElement.prototype = {$isWindowEventHandlers: 1, $is_HTMLFrameSetElement: 1};
  W._HTMLMarqueeElement.prototype = {$is_HTMLMarqueeElement: 1};
  W._Mojo.prototype = {$is_Mojo: 1};
  W._MojoHandle.prototype = {$is_MojoHandle: 1};
  W._MojoInterfaceInterceptor.prototype = {$is_MojoInterfaceInterceptor: 1};
  W._MojoInterfaceRequestEvent.prototype = {$is_MojoInterfaceRequestEvent: 1};
  W._MojoWatcher.prototype = {$is_MojoWatcher: 1};
  W._NFC.prototype = {$is_NFC: 1};
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.Node];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.Node];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $is_NamedNodeMap: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PagePopupController.prototype = {$is_PagePopupController: 1};
  W._Report.prototype = {$is_Report: 1};
  W._Request.prototype = {$is_Request: 1};
  W._ResourceProgressEvent.prototype = {$is_ResourceProgressEvent: 1};
  W._Response.prototype = {$is_Response: 1};
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $is_SpeechRecognitionResultList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isStyleSheet");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = receiver.length;
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    $isJSIndexable: 1,
    $asJSIndexable: function() {
      return [W.StyleSheet];
    },
    $isJSMutableIndexable: 1,
    $asJSMutableIndexable: function() {
      return [W.StyleSheet];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $is_StyleSheetList: 1,
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._SubtleCrypto.prototype = {$is_SubtleCrypto: 1};
  W._USB.prototype = {$is_USB: 1};
  W._USBAlternateInterface.prototype = {$is_USBAlternateInterface: 1};
  W._USBConfiguration.prototype = {$is_USBConfiguration: 1};
  W._USBConnectionEvent.prototype = {$is_USBConnectionEvent: 1};
  W._USBDevice.prototype = {$is_USBDevice: 1};
  W._USBEndpoint.prototype = {$is_USBEndpoint: 1};
  W._USBInTransferResult.prototype = {$is_USBInTransferResult: 1};
  W._USBInterface.prototype = {$is_USBInterface: 1};
  W._USBIsochronousInTransferPacket.prototype = {$is_USBIsochronousInTransferPacket: 1};
  W._USBIsochronousInTransferResult.prototype = {$is_USBIsochronousInTransferResult: 1};
  W._USBIsochronousOutTransferPacket.prototype = {$is_USBIsochronousOutTransferPacket: 1};
  W._USBIsochronousOutTransferResult.prototype = {$is_USBIsochronousOutTransferResult: 1};
  W._USBOutTransferResult.prototype = {$is_USBOutTransferResult: 1};
  W._WindowTimers.prototype = {};
  W._WorkerLocation.prototype = {$isUrlUtilsReadOnly: 1, $is_WorkerLocation: 1};
  W._WorkerNavigator.prototype = {$isNavigatorID: 1, $isNavigatorOnLine: 1, $is_WorkerNavigator: 1};
  W._Worklet.prototype = {$is_Worklet: 1};
  W._AttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {};
  W._NamespacedAttributeMap.prototype = {};
  W._DataAttributeMap.prototype = {
    $asMapBase: function() {
      return [P.String, P.String];
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.CanvasImageSource.prototype = {};
  W.WindowBase.prototype = {$isInterceptor: 1, $isEventTarget: 1};
  W.LocationBase.prototype = {};
  W.HistoryBase.prototype = {};
  W.CssClassSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  W._ContentCssRect.prototype = {};
  W._ContentCssListRect.prototype = {};
  W._PaddingCssRect.prototype = {};
  W._BorderCssRect.prototype = {};
  W._MarginCssRect.prototype = {};
  W.CssRect.prototype = {$is_RectangleBase: 1,
    $as_RectangleBase: function() {
      return [P.num];
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W._MultiElementCssClassSet.prototype = {};
  W._ElementCssClassSet.prototype = {
    readClasses$0: function() {
      var trimmed,
        t1 = P.String,
        s = P.LinkedHashSet_LinkedHashSet(t1);
      for (t1 = C.JSArray_methods.get$iterator(H.setRuntimeTypeInfo(this._element.className.split(" "), [t1])); H.boolConversionCheck(t1.moveNext$0());) {
        trimmed = J.trim$0$s(J.get$current$z(t1));
        if (!H.boolConversionCheck(J.get$isEmpty$asx(trimmed)))
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._element.className = H.stringTypeCheck(H.assertSubtype(s, "$isSet", [P.String], "$asSet").join$1(0, " "));
    },
    get$length: function(_) {
      return W._ElementCssClassSet__classListLength(W._ElementCssClassSet__classListOf(this._element));
    },
    get$isEmpty: function(_) {
      return J.$eq$(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !H.boolConversionCheck(J.$eq$(this.get$length(this), 0));
    },
    contains$1: function(_, value) {
      return W._ElementCssClassSet__contains(this._element, value);
    },
    add$1: function(_, value) {
      return W._ElementCssClassSet__add(this._element, H.stringTypeCheck(value));
    },
    remove$1: function(_, value) {
      return typeof value === "string" && H.boolConversionCheck(W._ElementCssClassSet__remove(this._element, value));
    }
  };
  W.Dimension.prototype = {};
  W.EventStreamProvider.prototype = {
    forTarget$1: function(e) {
      return W._EventStream$(H.interceptedTypeCheck(e, "$isEventTarget"), this._eventType, false, H.getTypeArgumentByIndex(this, 0));
    }
  };
  W.ElementStream.prototype = {$isStream: 1};
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.interceptedTypeCheck(onError, "$isFunction");
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      H.boolTypeCheck(cancelOnError);
      return W._EventStreamSubscription$(_this._html$_target, _this._eventType, onData, _this._useCapture, t1);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  W._ElementEventStreamImpl.prototype = {$isElementStream: 1};
  W._ElementListEventStreamImpl.prototype = {$isElementStream: 1};
  W._EventStreamSubscription.prototype = {
    _EventStreamSubscription$4: function(_target, _eventType, onData, _useCapture, $T) {
      this._tryResume$0();
    },
    cancel$0: function(_) {
      var _this = this;
      if (H.boolConversionCheck(_this.get$_canceled()))
        return;
      _this._unlisten$0();
      _this._html$_target = null;
      _this.set$_html$_onData(null);
      return;
    },
    get$_canceled: function() {
      return this._html$_target == null;
    },
    get$isPaused: function() {
      return false;
    },
    _tryResume$0: function() {
      var _this = this;
      if (_this._html$_onData != null && !H.boolConversionCheck(_this.get$isPaused()))
        J.addEventListener$3$x(_this._html$_target, _this._eventType, _this._html$_onData, _this._useCapture);
    },
    _unlisten$0: function() {
      var _this = this,
        t1 = _this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(_this._html$_target, _this._eventType, t1, _this._useCapture);
    },
    set$_html$_onData: function(_onData) {
      this._html$_onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 75
  };
  W.CustomStream.prototype = {$isStream: 1};
  W._CustomEventStreamImpl.prototype = {$isCustomStream: 1};
  W._CustomKeyEventStreamImpl.prototype = {
    $asStream: function() {
      return [W.KeyEvent];
    },
    $asCustomStream: function() {
      return [W.KeyEvent];
    },
    $as_CustomEventStreamImpl: function() {
      return [W.KeyEvent];
    }
  };
  W._StreamPool.prototype = {};
  W._CustomEventStreamProvider.prototype = {$isEventStreamProvider: 1};
  W._Html5NodeValidator.prototype = {$isNodeValidator: 1};
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return W.FixedSizeListIterator$(receiver, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    insert$2: function(receiver, index, element) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    insertAll$2: function(receiver, index, iterable) {
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    setAll$2: function(receiver, index, iterable) {
      H.intTypeCheck(index);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot modify an immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      H.intTypeCheck(pos);
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      H.intTypeCheck(skipCount);
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    replaceRange$3: function(receiver, start, end, iterable) {
      H.intTypeCheck(start);
      H.intTypeCheck(end);
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot modify an immutable List."));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  W.KeyCode.prototype = {};
  W.KeyLocation.prototype = {};
  W._KeyName.prototype = {};
  W._KeyboardEventHandler.prototype = {
    $asEventStreamProvider: function() {
      return [W.KeyEvent];
    }
  };
  W.KeyboardEventStream.prototype = {};
  W.NodeValidatorBuilder.prototype = {$isNodeValidator: 1};
  W._SimpleNodeValidator.prototype = {$isNodeValidator: 1};
  W._CustomElementNodeValidator.prototype = {};
  W._TemplatingNodeValidator.prototype = {};
  W._SvgNodeValidator.prototype = {$isNodeValidator: 1};
  W.ReadyState.prototype = {};
  W._WrappedList.prototype = {$isNodeListWrapper: 1};
  W._WrappedIterator.prototype = {$isIterator: 1};
  W._HttpRequestUtils.prototype = {};
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var nextPosition, _this = this,
        t1 = _this._position;
      if (typeof t1 !== "number")
        return t1.$add();
      nextPosition = t1 + 1;
      t1 = _this._html$_length;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._position = H.intTypeCheck(t1);
      return false;
    },
    get$current: function(_) {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._VariableSizeListIterator.prototype = {$isIterator: 1};
  W.Console.prototype = {
    get$_isConsoleDefined: function() {
      return typeof console != "undefined";
    },
    error$1: function(_, arg) {
      return H.boolConversionCheck(this.get$_isConsoleDefined()) ? window.console.error(arg) : null;
    }
  };
  W._JSElementUpgrader.prototype = {$isElementUpgrader: 1};
  W._DOMWindowCrossFrame.prototype = {$isInterceptor: 1, $isEventTarget: 1, $isWindowBase: 1};
  W._LocationCrossFrame.prototype = {$isLocationBase: 1};
  W._HistoryCrossFrame.prototype = {$isHistoryBase: 1};
  W.KeyEvent.prototype = {$isKeyboardEvent: 1, $isUIEvent: 1};
  W.Platform.prototype = {};
  W._WrappedEvent.prototype = {$isInterceptor: 1, $isEvent: 1};
  W.ElementUpgrader.prototype = {};
  W.NodeValidator.prototype = {};
  W.NodeTreeSanitizer.prototype = {};
  W._TrustedHtmlTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W.UriPolicy.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ThrowsNodeValidator.prototype = {$isNodeValidator: 1};
  W._ValidatingTreeSanitizer.prototype = {$isNodeTreeSanitizer: 1};
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W._DomRectList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W._DomStringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W._FileList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    }
  };
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._MidiInputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    }
  };
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W._NodeList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._PluginArray_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    }
  };
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    }
  };
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    }
  };
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W._Storage_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W._TextTrackList_EventTarget_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    }
  };
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W._TouchList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    }
  };
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    }
  };
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase.prototype = {$isCssStyleDeclarationBase: 1};
  W.__GamepadList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    }
  };
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    }
  };
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    }
  };
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i, t3,
        t1 = this.values,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t3 = t2.$index(t1, i);
        if (t3 == null ? value == null : t3 === value)
          return i;
      }
      t2.add$1(t1, value);
      J.add$1$ax(this.copies, null);
      return $length;
    },
    readSlot$1: function(i) {
      return J.$index$asx(this.copies, H.intTypeCheck(i));
    },
    writeSlot$2: function(i, x) {
      J.$indexSet$ax(this.copies, H.intTypeCheck(i), x);
    },
    cleanupSlots$0: function() {
    },
    walk$1: function(e) {
      var t2, slot, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor$(e);
      if (!!t2.$isDateTime)
        return P.convertDartToNative_DateTime(e);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isFileList)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (H.boolConversionCheck(_this.cloneNotRequired$1(e)))
        return e;
      if (!!t2.$isMap) {
        slot = _this.findSlot$1(e);
        copy = t1.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = _this.newJsMap$0();
        t1.copy = copy;
        _this.writeSlot$2(slot, copy);
        t2.forEach$1(e, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (!!t2.$isList) {
        slot = _this.findSlot$1(e);
        copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (!!t2.$isJSObject) {
        slot = _this.findSlot$1(e);
        copy = t1.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = _this.newJsObject$0();
        t1.copy = copy;
        _this.writeSlot$2(slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var t1, $length, copy, t2, i;
      H.listTypeCheck(e);
      H.intTypeCheck(slot);
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.newJsList$1($length);
      this.writeSlot$2(slot, copy);
      if (typeof $length !== "number")
        return H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    },
    convertDartToNative_PrepareForStructuredClone$1: function(value) {
      var copy = this.walk$1(value);
      this.cleanupSlots$0();
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.putIntoMap$3(this._box_0.copy, key, t1.walk$1(value));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.putIntoObject$3(this._box_0.copy, key, t1.walk$1(value));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        if (H.boolConversionCheck(this.identicalInJs$2(t2.$index(t1, i), value)))
          return i;
      t2.add$1(t1, value);
      J.add$1$ax(this.copies, null);
      return $length;
    },
    readSlot$1: function(i) {
      return J.$index$asx(this.copies, H.intTypeCheck(i));
    },
    writeSlot$2: function(i, x) {
      J.$indexSet$ax(this.copies, H.intTypeCheck(i), x);
    },
    walk$1: function(e) {
      var slot, copy, l, t1, $length, t2, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (H.boolConversionCheck(P.isJavaScriptDate(e)))
        return P.convertNativeToDart_DateTime(e);
      if (H.boolConversionCheck(P.isJavaScriptRegExp(e)))
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (H.boolConversionCheck(P.isJavaScriptPromise(e)))
        return P.promiseToFuture(e, null);
      if (H.boolConversionCheck(P.isJavaScriptSimpleObject(e))) {
        slot = _this.findSlot$1(e);
        copy = _box_0.copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        _this.writeSlot$2(slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (H.boolConversionCheck(P.isJavaScriptArray(e))) {
        l = e;
        slot = _this.findSlot$1(l);
        copy = _this.readSlot$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(l);
        $length = t1.get$length(l);
        copy = H.boolConversionCheck(_this.mustCopy) ? _this.newDartList$1($length) : l;
        _this.writeSlot$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, _this.walk$1(t1.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = H.boolTypeCheck(mustCopy);
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 74
  };
  P.ContextAttributes.prototype = {};
  P._TypedImageData.prototype = {$isInterceptor: 1, $isImageData: 1};
  P.convertDartToNative_Dictionary_closure.prototype = {$signature: 4};
  P._StructuredCloneDart2Js.prototype = {
    newJsObject$0: function() {
      return {};
    },
    forEachObjectKey$2: function(object, action) {
      var t1, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = C.JSArray_methods.get$iterator(Object.keys(object)); H.boolConversionCheck(t1.moveNext$0());) {
        key = J.get$current$z(t1);
        action.call$2(key, object[key]);
      }
    },
    putIntoObject$3: function(object, key, value) {
      return object[key] = value;
    },
    newJsMap$0: function() {
      return {};
    },
    putIntoMap$3: function(map, key, value) {
      return map[key] = value;
    },
    newJsList$1: function($length) {
      return new Array($length);
    },
    cloneNotRequired$1: function(e) {
      var t1 = J.getInterceptor$(e);
      return !!t1.$isNativeByteBuffer || !!t1.$isNativeTypedData || !!t1.$isMessagePort;
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    newJsList$1: function($length) {
      return new Array($length);
    },
    newDartList$1: function($length) {
      return this.newJsList$1($length);
    },
    identicalInJs$2: function(a, b) {
      return a == null ? b == null : a === b;
    },
    forEachJsField$2: function(object, action) {
      var t1, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = C.JSArray_methods.get$iterator(Object.keys(object)); H.boolConversionCheck(t1.moveNext$0());) {
        key = J.get$current$z(t1);
        action.call$2(key, object[key]);
      }
    }
  };
  P.CssClassSetImpl.prototype = {
    _validateToken$1: function(value) {
      H.stringTypeCheck(value);
      if (H.boolConversionCheck($.$get$CssClassSetImpl__validTokenRE().hasMatch$1(value)))
        return value;
      throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
    },
    toString$0: function(_) {
      return J.join$1$ax(this.readClasses$0(), " ");
    },
    get$iterator: function(_) {
      return J.get$iterator$ax(this.readClasses$0());
    },
    join$1: function(_, separator) {
      H.stringTypeCheck(separator);
      return J.join$1$ax(this.readClasses$0(), separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [P.String]});
      return J.map$1$1$ax(this.readClasses$0(), f, $T);
    },
    map$1: function($receiver, f) {
      return this.map$1$1($receiver, f, null);
    },
    where$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [P.String]});
      return J.where$1$ax(this.readClasses$0(), f);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.readClasses$0());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.readClasses$0());
    },
    get$length: function(_) {
      return J.get$length$asx(this.readClasses$0());
    },
    fold$1$2: function(_, initialValue, combine, $T) {
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, P.String]});
      return J.fold$1$2$ax(this.readClasses$0(), initialValue, combine, $T);
    },
    fold$2: function($receiver, initialValue, combine) {
      return this.fold$1$2($receiver, initialValue, combine, null);
    },
    contains$1: function(_, value) {
      if (typeof value !== "string")
        return false;
      this._validateToken$1(value);
      return J.contains$1$asx(this.readClasses$0(), value);
    },
    add$1: function(_, value) {
      H.stringTypeCheck(value);
      this._validateToken$1(value);
      return H.boolTypeCheck(this.modify$1(0, new P.CssClassSetImpl_add_closure(value)));
    },
    get$first: function(_) {
      return J.get$first$ax(this.readClasses$0());
    },
    get$last: function(_) {
      return J.get$last$ax(this.readClasses$0());
    },
    toList$1$growable: function(_, growable) {
      H.boolTypeCheck(growable);
      return J.toList$1$growable$ax(this.readClasses$0(), growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    skip$1: function(_, n) {
      H.intTypeCheck(n);
      return J.skip$1$ax(this.readClasses$0(), n);
    },
    skipWhile$1: function(_, test) {
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [P.String]});
      return J.skipWhile$1$ax(this.readClasses$0(), test);
    },
    elementAt$1: function(_, index) {
      H.intTypeCheck(index);
      return J.elementAt$1$ax(this.readClasses$0(), index);
    },
    modify$1: function(_, f) {
      var s, ret;
      H.functionTypeCheck(f, {func: 1, args: [[P.Set, P.String]]});
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asSetMixin: function() {
      return [P.String];
    },
    $asSetBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $asSet: function() {
      return [P.String];
    },
    $isCssClassSet: 1,
    $as_SetBase_Object_SetMixin: function() {
      return [P.String];
    }
  };
  P.CssClassSetImpl_add_closure.prototype = {
    call$1: function(s) {
      return H.assertSubtype(s, "$isSet", [P.String], "$asSet").add$1(0, this.value);
    },
    $signature: 50
  };
  P.Device.prototype = {};
  P.FilteredElementList.prototype = {
    $asEfficientLengthIterable: function() {
      return [W.Element];
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asListMixin: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $isNodeListWrapper: 1,
    $as_ListBase_Object_ListMixin: function() {
      return [W.Element];
    }
  };
  P.Lists.prototype = {};
  P.NodeListWrapper.prototype = {};
  P._KeyRangeFactoryProvider.prototype = {};
  P.Cursor.prototype = {$isCursor: 1};
  P.CursorWithValue.prototype = {$isCursorWithValue: 1};
  P.Database.prototype = {$isDatabase: 1};
  P.IdbFactory.prototype = {$isIdbFactory: 1};
  P._completeRequest_closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isEvent");
      J.complete$1$z(this.completer, H.assertSubtypeOfRuntimeType(J.get$result$x(this.request), this.T));
    },
    $signature: 28
  };
  P.Index.prototype = {$isIndex: 1};
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.ObjectStore.prototype = {
    add$1: function(receiver, value) {
      var request, e, stacktrace, t1, exception, key = null;
      try {
        request = null;
        if (key != null)
          request = this._indexed_db$_add$2(receiver, value, key);
        else
          request = this._indexed_db$_add$1(receiver, value);
        t1 = P._completeRequest(H.interceptedTypeCheck(request, "$isRequest"), null);
        return t1;
      } catch (exception) {
        e = H.unwrapException(exception);
        stacktrace = H.getTraceFromException(exception);
        t1 = P.Future_Future$error(e, stacktrace, null);
        return t1;
      }
    },
    _indexed_db$_add$2: function(receiver, value, key) {
      if (key != null)
        return this._add_1$2(receiver, P.convertDartToNative_SerializedScriptValue(value), P.convertDartToNative_SerializedScriptValue(key));
      return this._add_2$1(receiver, P.convertDartToNative_SerializedScriptValue(value));
    },
    _indexed_db$_add$1: function($receiver, value) {
      return this._indexed_db$_add$2($receiver, value, null);
    },
    _add_1$2: function(receiver, value, key) {
      return receiver.add(value, key);
    },
    _add_2$1: function(receiver, value) {
      return receiver.add(value);
    },
    $isObjectStore: 1
  };
  P.Observation.prototype = {$isObservation: 1};
  P.Observer.prototype = {$isObserver: 1};
  P.ObserverChanges.prototype = {$isObserverChanges: 1};
  P.OpenDBRequest.prototype = {$isOpenDBRequest: 1};
  P.Request.prototype = {
    get$result: function(receiver) {
      return P._convertNativeToDart_IDBAny(receiver.result);
    },
    get$onError: function(receiver) {
      return C.EventStreamProvider_error.forTarget$1(receiver);
    },
    get$onSuccess: function(receiver) {
      return C.EventStreamProvider_success.forTarget$1(receiver);
    },
    $isRequest: 1
  };
  P.Transaction.prototype = {$isTransaction: 1};
  P.VersionChangeEvent.prototype = {$isVersionChangeEvent: 1};
  P.BytesBuilder.prototype = {};
  P._CopyingBytesBuilder0.prototype = {$isBytesBuilder: 1};
  P._BytesBuilder.prototype = {$isBytesBuilder: 1};
  P.IOException.prototype = {$isException: 1};
  P.OSError.prototype = {};
  P._BufferAndStart.prototype = {};
  P._IOCrypto.prototype = {};
  P.ZLibOption.prototype = {};
  P.ZLibCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.GZipCodec.prototype = {
    $asCodec: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibEncoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.ZLibDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], [P.List, P.int]];
    },
    $asConverter: function() {
      return [[P.List, P.int], [P.List, P.int]];
    }
  };
  P.RawZLibFilter.prototype = {};
  P._BufferSink.prototype = {};
  P._ZLibEncoderSink.prototype = {};
  P._ZLibDecoderSink.prototype = {};
  P._FilterSink.prototype = {};
  P.Directory.prototype = {$isFileSystemEntity: 1};
  P._Directory.prototype = {$isDirectory: 1};
  P._AsyncDirectoryListerOps.prototype = {};
  P._AsyncDirectoryLister.prototype = {};
  P._EmbedderConfig.prototype = {};
  P._EventHandler.prototype = {};
  P.FileMode.prototype = {};
  P.FileLock.prototype = {};
  P.File0.prototype = {$isFileSystemEntity: 1};
  P.RandomAccessFile.prototype = {};
  P.FileSystemException.prototype = {$isException: 1, $isIOException: 1};
  P._FileStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P._FileStreamConsumer.prototype = {
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._File.prototype = {$isFile0: 1};
  P._RandomAccessFileOps.prototype = {};
  P._RandomAccessFile.prototype = {$isRandomAccessFile: 1};
  P.FileSystemEntityType.prototype = {};
  P.FileStat.prototype = {};
  P.FileSystemEntity.prototype = {};
  P.FileSystemEvent.prototype = {};
  P.FileSystemCreateEvent.prototype = {};
  P.FileSystemModifyEvent.prototype = {};
  P.FileSystemDeleteEvent.prototype = {};
  P.FileSystemMoveEvent.prototype = {};
  P._FileSystemWatcher.prototype = {};
  P._IOResourceInfo.prototype = {};
  P._ReadWriteResourceInfo.prototype = {};
  P._FileResourceInfo.prototype = {};
  P._ProcessResourceInfo.prototype = {};
  P._SocketResourceInfo.prototype = {};
  P._IOService.prototype = {};
  P.IOSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1
  };
  P._StreamSinkImpl0.prototype = {$isEventSink: 1, $isStreamConsumer: 1, $isStreamSink: 1, $isSink: 1};
  P._IOSinkImpl0.prototype = {
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $as_StreamSinkImpl0: function() {
      return [[P.List, P.int]];
    }
  };
  P.Link.prototype = {$isFileSystemEntity: 1};
  P._Link.prototype = {$isLink: 1};
  P._Namespace.prototype = {};
  P._NetworkProfiling.prototype = {};
  P._HttpProfile.prototype = {};
  P._SocketProfile.prototype = {};
  P.IOOverrides.prototype = {};
  P._IOOverridesScope.prototype = {};
  P.Platform0.prototype = {};
  P._Platform.prototype = {};
  P._CaseInsensitiveStringMap.prototype = {
    $asMapBase: function($V) {
      return [P.String, $V];
    },
    $asMapMixin: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  P._ProcessUtils.prototype = {};
  P.ProcessInfo.prototype = {};
  P.ProcessStartMode.prototype = {};
  P.Process.prototype = {};
  P.ProcessResult.prototype = {};
  P.ProcessSignal.prototype = {};
  P.SignalException.prototype = {$isException: 1, $isIOException: 1};
  P.ProcessException.prototype = {$isException: 1, $isIOException: 1};
  P.SecureServerSocket.prototype = {
    $asStream: function() {
      return [P.SecureSocket];
    }
  };
  P.RawSecureServerSocket.prototype = {
    $asStream: function() {
      return [P.RawSecureSocket];
    }
  };
  P.SecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Uint8List];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1,
    $isSocket: 1
  };
  P.RawSecureSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSocket: 1
  };
  P.X509Certificate.prototype = {};
  P._FilterStatus.prototype = {};
  P._RawSecureSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    },
    $isRawSecureSocket: 1,
    $isRawSocket: 1
  };
  P._ExternalBuffer.prototype = {};
  P._SecureFilter.prototype = {};
  P.TlsException.prototype = {$isException: 1, $isIOException: 1};
  P.HandshakeException.prototype = {};
  P.CertificateException.prototype = {};
  P.SecurityContext.prototype = {};
  P._ServiceObject0.prototype = {};
  P.InternetAddressType.prototype = {};
  P.InternetAddress.prototype = {};
  P.NetworkInterface.prototype = {};
  P.RawServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocket];
    }
  };
  P.ServerSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Socket];
    }
  };
  P.SocketDirection.prototype = {};
  P.SocketOption.prototype = {};
  P._RawSocketOptions.prototype = {};
  P.RawSocketOption.prototype = {};
  P.RawSocketEvent.prototype = {};
  P.ConnectionTask.prototype = {};
  P.RawSocket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.Socket.prototype = {$isStream: 1,
    $asStream: function() {
      return [P.Uint8List];
    },
    $isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.Datagram.prototype = {};
  P.RawDatagramSocket.prototype = {
    $asStream: function() {
      return [P.RawSocketEvent];
    }
  };
  P.SocketException.prototype = {$isException: 1, $isIOException: 1};
  P._StdStream.prototype = {
    $asStream: function() {
      return [[P.List, P.int]];
    }
  };
  P.Stdin.prototype = {};
  P.Stdout.prototype = {};
  P.StdoutException.prototype = {$isException: 1, $isIOException: 1};
  P.StdinException.prototype = {$isException: 1, $isIOException: 1};
  P._StdConsumer.prototype = {$isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    }
  };
  P._StdSink.prototype = {$isEventSink: 1,
    $asEventSink: function() {
      return [[P.List, P.int]];
    },
    $isStreamConsumer: 1,
    $asStreamConsumer: function() {
      return [[P.List, P.int]];
    },
    $isStreamSink: 1,
    $asStreamSink: function() {
      return [[P.List, P.int]];
    },
    $isSink: 1,
    $asSink: function() {
      return [[P.List, P.int]];
    },
    $isStringSink: 1,
    $isIOSink: 1
  };
  P.StdioType.prototype = {};
  P._StdIOUtils.prototype = {};
  P.SystemEncoding.prototype = {};
  P._WindowsCodePageEncoder.prototype = {
    $asStreamTransformer: function() {
      return [P.String, [P.List, P.int]];
    },
    $asStreamTransformerBase: function() {
      return [P.String, [P.List, P.int]];
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._WindowsCodePageEncoderSink.prototype = {};
  P._WindowsCodePageDecoder.prototype = {
    $asStreamTransformer: function() {
      return [[P.List, P.int], P.String];
    },
    $asStreamTransformerBase: function() {
      return [[P.List, P.int], P.String];
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._WindowsCodePageDecoderSink.prototype = {};
  P.RawSynchronousSocket.prototype = {};
  P._ReceivePortImpl.prototype = {
    $asStream: function() {
    },
    $isReceivePort: 1
  };
  P.Capability.prototype = {};
  P.IsolateSpawnException.prototype = {$isException: 1};
  P.Isolate.prototype = {};
  P.SendPort.prototype = {$isCapability: 1};
  P.ReceivePort.prototype = {$isStream: 1,
    $asStream: function() {
    }
  };
  P.RawReceivePort.prototype = {};
  P.RemoteError.prototype = {$isError: 1};
  P.TransferableTypedData.prototype = {};
  P.JsObject.prototype = {};
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P._JsArray_JsObject_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      return J.complete$1$z(this.completer, H.futureOrCheck(r, {futureOr: 1, type: this.T}));
    },
    $signature: 29
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      return this.completer.completeError$1(e);
    },
    $signature: 29
  };
  P._JSRandom.prototype = {
    nextInt$1: function(max) {
      H.intTypeCheck(max);
      if (typeof max !== "number")
        return max.$le();
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    },
    $isRandom: 1
  };
  P._Random.prototype = {$isRandom: 1};
  P._JSSecureRandom.prototype = {$isRandom: 1};
  P._JenkinsSmiHash0.prototype = {};
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isPoint && H.boolConversionCheck(J.$eq$(this.x, other.x)) && H.boolConversionCheck(J.$eq$(this.y, other.y));
    },
    get$hashCode: function(_) {
      return P._JenkinsSmiHash_hash2(J.get$hashCode$(this.x), J.get$hashCode$(this.y));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, _this = this;
      H.assertSubtype(other, "$isPoint", _this.$ti, "$asPoint");
      t1 = _this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.assertSubtypeOfRuntimeType(t1 + t2, t3);
      t1 = _this.y;
      t4 = other.y;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return P.Point$(t2, H.assertSubtypeOfRuntimeType(t1 + t4, t3), t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, _this = this;
      H.assertSubtype(other, "$isPoint", _this.$ti, "$asPoint");
      t1 = _this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = H.getTypeArgumentByIndex(_this, 0);
      t2 = H.assertSubtypeOfRuntimeType(t1 - t2, t3);
      t1 = _this.y;
      t4 = other.y;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return P.Point$(t2, H.assertSubtypeOfRuntimeType(t1 - t4, t3), t3);
    }
  };
  P.Random.prototype = {};
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.MutableRectangle.prototype = {$isRectangle: 1};
  P.MirrorSystem.prototype = {};
  P.Mirror.prototype = {};
  P.IsolateMirror.prototype = {$isMirror: 1};
  P.DeclarationMirror.prototype = {$isMirror: 1};
  P.ObjectMirror.prototype = {$isMirror: 1};
  P.InstanceMirror.prototype = {$isMirror: 1, $isObjectMirror: 1};
  P.ClosureMirror.prototype = {$isMirror: 1, $isObjectMirror: 1, $isInstanceMirror: 1};
  P.LibraryMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1};
  P.LibraryDependencyMirror.prototype = {$isMirror: 1};
  P.CombinatorMirror.prototype = {$isMirror: 1};
  P.TypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ClassMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1};
  P.FunctionTypeMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isObjectMirror: 1, $isTypeMirror: 1, $isClassMirror: 1};
  P.TypeVariableMirror.prototype = {};
  P.TypedefMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isTypeMirror: 1};
  P.MethodMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.VariableMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1};
  P.ParameterMirror.prototype = {$isMirror: 1, $isDeclarationMirror: 1, $isVariableMirror: 1};
  P.SourceLocation.prototype = {};
  P.Comment0.prototype = {};
  P.MirrorsUsed.prototype = {};
  P._SvgElementFactoryProvider.prototype = {};
  P.AElement.prototype = {$isAElement: 1, $isUriReference: 1};
  P.Angle.prototype = {$isAngle: 1};
  P.AnimateElement.prototype = {$isAnimateElement: 1};
  P.AnimateMotionElement.prototype = {$isAnimateMotionElement: 1};
  P.AnimateTransformElement.prototype = {$isAnimateTransformElement: 1};
  P.AnimatedAngle.prototype = {$isAnimatedAngle: 1};
  P.AnimatedBoolean.prototype = {$isAnimatedBoolean: 1};
  P.AnimatedEnumeration.prototype = {$isAnimatedEnumeration: 1};
  P.AnimatedInteger.prototype = {$isAnimatedInteger: 1};
  P.AnimatedLength.prototype = {$isAnimatedLength: 1};
  P.AnimatedLengthList.prototype = {$isAnimatedLengthList: 1};
  P.AnimatedNumber.prototype = {$isAnimatedNumber: 1};
  P.AnimatedNumberList.prototype = {$isAnimatedNumberList: 1};
  P.AnimatedPreserveAspectRatio.prototype = {$isAnimatedPreserveAspectRatio: 1};
  P.AnimatedRect.prototype = {$isAnimatedRect: 1};
  P.AnimatedString.prototype = {$isAnimatedString: 1};
  P.AnimatedTransformList.prototype = {$isAnimatedTransformList: 1};
  P.AnimationElement.prototype = {$isAnimationElement: 1, $isTests: 1};
  P.CircleElement.prototype = {$isCircleElement: 1};
  P.ClipPathElement.prototype = {$isClipPathElement: 1};
  P.DefsElement.prototype = {$isDefsElement: 1};
  P.DescElement.prototype = {$isDescElement: 1};
  P.DiscardElement.prototype = {$isDiscardElement: 1};
  P.EllipseElement.prototype = {$isEllipseElement: 1};
  P.FEBlendElement.prototype = {$isFEBlendElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEColorMatrixElement.prototype = {$isFEColorMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEComponentTransferElement.prototype = {$isFEComponentTransferElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FECompositeElement.prototype = {$isFECompositeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEConvolveMatrixElement.prototype = {$isFEConvolveMatrixElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDiffuseLightingElement.prototype = {$isFEDiffuseLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDisplacementMapElement.prototype = {$isFEDisplacementMapElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEDistantLightElement.prototype = {$isFEDistantLightElement: 1};
  P.FEFloodElement.prototype = {$isFEFloodElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEFuncAElement.prototype = {$isFEFuncAElement: 1};
  P.FEFuncBElement.prototype = {$isFEFuncBElement: 1};
  P.FEFuncGElement.prototype = {$isFEFuncGElement: 1};
  P.FEFuncRElement.prototype = {$isFEFuncRElement: 1};
  P.FEGaussianBlurElement.prototype = {$isFEGaussianBlurElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEImageElement.prototype = {$isFEImageElement: 1, $isFilterPrimitiveStandardAttributes: 1, $isUriReference: 1};
  P.FEMergeElement.prototype = {$isFEMergeElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEMergeNodeElement.prototype = {$isFEMergeNodeElement: 1};
  P.FEMorphologyElement.prototype = {$isFEMorphologyElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEOffsetElement.prototype = {$isFEOffsetElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FEPointLightElement.prototype = {$isFEPointLightElement: 1};
  P.FESpecularLightingElement.prototype = {$isFESpecularLightingElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FESpotLightElement.prototype = {$isFESpotLightElement: 1};
  P.FETileElement.prototype = {$isFETileElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FETurbulenceElement.prototype = {$isFETurbulenceElement: 1, $isFilterPrimitiveStandardAttributes: 1};
  P.FilterElement.prototype = {$isFilterElement: 1, $isUriReference: 1};
  P.FilterPrimitiveStandardAttributes.prototype = {};
  P.FitToViewBox.prototype = {};
  P.ForeignObjectElement.prototype = {$isForeignObjectElement: 1};
  P.GElement.prototype = {$isGElement: 1};
  P.GeometryElement.prototype = {$isGeometryElement: 1};
  P.GraphicsElement.prototype = {$isGraphicsElement: 1, $isTests: 1};
  P.ImageElement0.prototype = {$isImageElement0: 1, $isUriReference: 1};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= this.get$length(receiver))
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return this.getItem$1(receiver, index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isLength");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = this.get$length(receiver);
      if (typeof len !== "number")
        return len.$gt();
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = this.get$length(receiver);
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    getItem$1: function(receiver, index) {
      return receiver.getItem(H.intTypeCheck(index));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    },
    $isLengthList: 1
  };
  P.LineElement.prototype = {$isLineElement: 1};
  P.LinearGradientElement.prototype = {$isLinearGradientElement: 1};
  P.MarkerElement.prototype = {$isFitToViewBox: 1, $isMarkerElement: 1};
  P.MaskElement.prototype = {$isMaskElement: 1, $isTests: 1};
  P.Matrix.prototype = {$isMatrix: 1};
  P.MetadataElement.prototype = {$isMetadataElement: 1};
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= this.get$length(receiver))
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return this.getItem$1(receiver, index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNumber");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = this.get$length(receiver);
      if (typeof len !== "number")
        return len.$gt();
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = this.get$length(receiver);
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    getItem$1: function(receiver, index) {
      return receiver.getItem(H.intTypeCheck(index));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    },
    $isNumberList: 1
  };
  P.PathElement.prototype = {$isPathElement: 1};
  P.PatternElement.prototype = {$isFitToViewBox: 1, $isPatternElement: 1, $isTests: 1, $isUriReference: 1};
  P.Point0.prototype = {$isPoint0: 1};
  P.PointList.prototype = {$isPointList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.PolygonElement.prototype = {$isPolygonElement: 1};
  P.PolylineElement.prototype = {$isPolylineElement: 1};
  P.PreserveAspectRatio.prototype = {$isPreserveAspectRatio: 1};
  P.RadialGradientElement.prototype = {$isRadialGradientElement: 1};
  P.Rect.prototype = {$isRect: 1};
  P.RectElement.prototype = {$isRectElement: 1};
  P.ScriptElement0.prototype = {$isScriptElement0: 1, $isUriReference: 1};
  P.SetElement.prototype = {$isSetElement: 1};
  P.StopElement.prototype = {$isStopElement: 1};
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= this.get$length(receiver))
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return this.getItem$1(receiver, index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = this.get$length(receiver);
      if (typeof len !== "number")
        return len.$gt();
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = this.get$length(receiver);
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    getItem$1: function(receiver, index) {
      return receiver.getItem(H.intTypeCheck(index));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    },
    $isStringList: 1
  };
  P.StyleElement0.prototype = {$isStyleElement0: 1};
  P.AttributeClassSet.prototype = {};
  P.SvgElement.prototype = {$isNoncedElement: 1, $isSvgElement: 1};
  P.SvgSvgElement.prototype = {$isFitToViewBox: 1, $isSvgSvgElement: 1, $isZoomAndPan: 1};
  P.SwitchElement.prototype = {$isSwitchElement: 1};
  P.SymbolElement.prototype = {$isFitToViewBox: 1, $isSymbolElement: 1};
  P.TSpanElement.prototype = {$isTSpanElement: 1};
  P.Tests.prototype = {};
  P.TextContentElement.prototype = {$isTextContentElement: 1};
  P.TextElement.prototype = {$isTextElement: 1};
  P.TextPathElement.prototype = {$isTextPathElement: 1, $isUriReference: 1};
  P.TextPositioningElement.prototype = {$isTextPositioningElement: 1};
  P.TitleElement0.prototype = {$isTitleElement0: 1};
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= this.get$length(receiver))
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return this.getItem$1(receiver, index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTransform");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = this.get$length(receiver);
      if (typeof len !== "number")
        return len.$gt();
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = this.get$length(receiver);
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    getItem$1: function(receiver, index) {
      return receiver.getItem(H.intTypeCheck(index));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    },
    $isTransformList: 1
  };
  P.UnitTypes.prototype = {$isUnitTypes: 1};
  P.UriReference.prototype = {};
  P.UseElement.prototype = {$isUriReference: 1, $isUseElement: 1};
  P.ViewElement.prototype = {$isFitToViewBox: 1, $isViewElement: 1, $isZoomAndPan: 1};
  P.ZoomAndPan.prototype = {};
  P._GradientElement.prototype = {$isUriReference: 1, $is_GradientElement: 1};
  P._SVGComponentTransferFunctionElement.prototype = {$is_SVGComponentTransferFunctionElement: 1};
  P._SVGFEDropShadowElement.prototype = {$isFilterPrimitiveStandardAttributes: 1, $is_SVGFEDropShadowElement: 1};
  P._SVGMPathElement.prototype = {$isUriReference: 1, $is_SVGMPathElement: 1};
  P._LengthList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    }
  };
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P._NumberList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    }
  };
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P._StringList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    }
  };
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P._TransformList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    }
  };
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P.ByteBuffer.prototype = {};
  P.TypedData.prototype = {};
  P._TypedIntList.prototype = {};
  P._TypedFloatList.prototype = {};
  P.Endian.prototype = {};
  P.ByteData.prototype = {$isTypedData: 1};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Int64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Uint64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1
  };
  P.Float32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1
  };
  P.Float32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1
  };
  P.Int32x4List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Int32x4];
    },
    $isList: 1,
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1
  };
  P.Float64x2List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Float64x2];
    },
    $isList: 1,
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1
  };
  P.Float32x4.prototype = {};
  P.Int32x4.prototype = {};
  P.Float64x2.prototype = {};
  P.UnmodifiableByteBufferView.prototype = {$isByteBuffer: 1};
  P.UnmodifiableByteDataView.prototype = {$isTypedData: 1, $isByteData: 1};
  P._UnmodifiableListMixin.prototype = {};
  P.UnmodifiableUint8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt8ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt8List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint8ClampedListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint8ClampedList: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt16ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt16List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableUint64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isUint64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $isTypedData: 1,
    $is_TypedIntList: 1,
    $isInt64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.UnmodifiableInt32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $isTypedData: 1,
    $isInt32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P.UnmodifiableFloat32x4ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $isTypedData: 1,
    $isFloat32x4List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P.UnmodifiableFloat64x2ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $isTypedData: 1,
    $isFloat64x2List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P.UnmodifiableFloat32ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat32List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P.UnmodifiableFloat64ListView.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $isTypedData: 1,
    $is_TypedFloatList: 1,
    $isFloat64List: 1,
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float32List, P.Float32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float32x4];
    },
    $asListBase: function() {
      return [P.Float32x4];
    },
    $asListMixin: function() {
      return [P.Float32x4];
    },
    $asIterable: function() {
      return [P.Float32x4];
    },
    $asList: function() {
      return [P.Float32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float32x4, P.Float32x4List, P.Float32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float32x4];
    }
  };
  P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asUnmodifiableListMixin: function() {
      return [P.double];
    },
    $asUnmodifiableListBase: function() {
      return [P.double];
    },
    $asListBase: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $asIterable: function() {
      return [P.double];
    },
    $asList: function() {
      return [P.double];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.double, P.Float64List, P.Float64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.double];
    }
  };
  P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Float64x2];
    },
    $asUnmodifiableListBase: function() {
      return [P.Float64x2];
    },
    $asListBase: function() {
      return [P.Float64x2];
    },
    $asListMixin: function() {
      return [P.Float64x2];
    },
    $asIterable: function() {
      return [P.Float64x2];
    },
    $asList: function() {
      return [P.Float64x2];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Float64x2, P.Float64x2List, P.Float64x2List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Float64x2];
    }
  };
  P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int16List, P.Int16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int32List, P.Int32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListMixin: function() {
      return [P.Int32x4];
    },
    $asUnmodifiableListBase: function() {
      return [P.Int32x4];
    },
    $asListBase: function() {
      return [P.Int32x4];
    },
    $asListMixin: function() {
      return [P.Int32x4];
    },
    $asIterable: function() {
      return [P.Int32x4];
    },
    $asList: function() {
      return [P.Int32x4];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.Int32x4, P.Int32x4List, P.Int32x4List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.Int32x4];
    }
  };
  P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int64List, P.Int64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Int8List, P.Int8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint16List, P.Uint16List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint32List, P.Uint32List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint64List, P.Uint64List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asUnmodifiableListBase: function() {
      return [P.int];
    },
    $asListBase: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $is_UnmodifiableListMixin: 1,
    $as_UnmodifiableListMixin: function() {
      return [P.int, P.Uint8List, P.Uint8List];
    },
    $as_ListBase_Object_ListMixin: function() {
      return [P.int];
    }
  };
  P.AnalyserNode.prototype = {$isAnalyserNode: 1};
  P.AudioBuffer.prototype = {$isAudioBuffer: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioBufferSourceNode.prototype = {
    start$3: function(receiver, when, grainOffset, grainDuration) {
      return receiver.start(H.numTypeCheck(when), H.numTypeCheck(grainOffset), H.numTypeCheck(grainDuration));
    },
    start$1: function($receiver, when) {
      return $receiver.start(when);
    },
    start$0: function($receiver) {
      return $receiver.start();
    },
    start$2: function($receiver, when, grainOffset) {
      return $receiver.start(when, grainOffset);
    },
    $isAudioBufferSourceNode: 1
  };
  P.AudioContext.prototype = {$isAudioContext: 1};
  P.AudioDestinationNode.prototype = {$isAudioDestinationNode: 1};
  P.AudioListener.prototype = {$isAudioListener: 1};
  P.AudioNode.prototype = {$isAudioNode: 1};
  P.AudioParam.prototype = {$isAudioParam: 1};
  P.AudioParamMap.prototype = {
    _web_audio$_getItem$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    containsKey$1: function(receiver, key) {
      return this._web_audio$_getItem$1(receiver, H.stringTypeCheck(key)) != null;
    },
    $index: function(receiver, key) {
      return this._web_audio$_getItem$1(receiver, H.stringTypeCheck(key));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new P.AudioParamMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return J.$eq$(this.get$length(receiver), 0);
    },
    get$isNotEmpty: function(receiver) {
      return !H.boolConversionCheck(this.get$isEmpty(receiver));
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    },
    $isAudioParamMap: 1
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return J.add$1$ax(this.keys, H.stringTypeCheck(k));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  P.AudioParamMap_values_closure.prototype = {
    call$2: function(k, v) {
      H.stringTypeCheck(k);
      return J.add$1$ax(this.values, H.interceptedTypeCheck(v, "$isMap"));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 2
  };
  P.AudioProcessingEvent.prototype = {$isAudioProcessingEvent: 1};
  P.AudioScheduledSourceNode.prototype = {$isAudioScheduledSourceNode: 1};
  P.AudioTrack.prototype = {$isAudioTrack: 1};
  P.AudioTrackList.prototype = {$isAudioTrackList: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioWorkletGlobalScope.prototype = {$isAudioWorkletGlobalScope: 1};
  P.AudioWorkletNode.prototype = {$isAudioWorkletNode: 1};
  P.AudioWorkletProcessor.prototype = {$isAudioWorkletProcessor: 1};
  P.BaseAudioContext.prototype = {$isBaseAudioContext: 1};
  P.BiquadFilterNode.prototype = {$isBiquadFilterNode: 1};
  P.ChannelMergerNode.prototype = {$isChannelMergerNode: 1};
  P.ChannelSplitterNode.prototype = {$isChannelSplitterNode: 1};
  P.ConstantSourceNode.prototype = {$isConstantSourceNode: 1};
  P.ConvolverNode.prototype = {$isConvolverNode: 1};
  P.DelayNode.prototype = {$isDelayNode: 1};
  P.DynamicsCompressorNode.prototype = {$isDynamicsCompressorNode: 1};
  P.GainNode.prototype = {$isGainNode: 1};
  P.IirFilterNode.prototype = {$isIirFilterNode: 1};
  P.MediaElementAudioSourceNode.prototype = {$isMediaElementAudioSourceNode: 1};
  P.MediaStreamAudioDestinationNode.prototype = {$isMediaStreamAudioDestinationNode: 1,
    get$stream: function(receiver) {
      return receiver.stream;
    }
  };
  P.MediaStreamAudioSourceNode.prototype = {$isMediaStreamAudioSourceNode: 1};
  P.OfflineAudioCompletionEvent.prototype = {$isOfflineAudioCompletionEvent: 1};
  P.OfflineAudioContext.prototype = {$isOfflineAudioContext: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.OscillatorNode.prototype = {$isOscillatorNode: 1};
  P.PannerNode.prototype = {$isPannerNode: 1};
  P.PeriodicWave.prototype = {$isPeriodicWave: 1};
  P.ScriptProcessorNode.prototype = {$isScriptProcessorNode: 1};
  P.StereoPannerNode.prototype = {$isStereoPannerNode: 1};
  P.WaveShaperNode.prototype = {$isWaveShaperNode: 1};
  P._AudioParamMap_Interceptor_MapMixin.prototype = {$isMapMixin: 1,
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.ActiveInfo.prototype = {$isActiveInfo: 1};
  P.AngleInstancedArrays.prototype = {$isAngleInstancedArrays: 1};
  P.Buffer.prototype = {$isBuffer: 1};
  P.Canvas.prototype = {$isCanvas: 1};
  P.ColorBufferFloat.prototype = {$isColorBufferFloat: 1};
  P.CompressedTextureAstc.prototype = {$isCompressedTextureAstc: 1};
  P.CompressedTextureAtc.prototype = {$isCompressedTextureAtc: 1};
  P.CompressedTextureETC1.prototype = {$isCompressedTextureETC1: 1};
  P.CompressedTextureEtc.prototype = {$isCompressedTextureEtc: 1};
  P.CompressedTexturePvrtc.prototype = {$isCompressedTexturePvrtc: 1};
  P.CompressedTextureS3TC.prototype = {$isCompressedTextureS3TC: 1};
  P.CompressedTextureS3TCsRgb.prototype = {$isCompressedTextureS3TCsRgb: 1};
  P.ContextEvent.prototype = {$isContextEvent: 1};
  P.DebugRendererInfo.prototype = {$isDebugRendererInfo: 1};
  P.DebugShaders.prototype = {$isDebugShaders: 1};
  P.DepthTexture.prototype = {$isDepthTexture: 1};
  P.DrawBuffers.prototype = {$isDrawBuffers: 1};
  P.EXTsRgb.prototype = {$isEXTsRgb: 1};
  P.ExtBlendMinMax.prototype = {$isExtBlendMinMax: 1};
  P.ExtColorBufferFloat.prototype = {$isExtColorBufferFloat: 1};
  P.ExtColorBufferHalfFloat.prototype = {$isExtColorBufferHalfFloat: 1};
  P.ExtDisjointTimerQuery.prototype = {$isExtDisjointTimerQuery: 1};
  P.ExtDisjointTimerQueryWebGL2.prototype = {$isExtDisjointTimerQueryWebGL2: 1};
  P.ExtFragDepth.prototype = {$isExtFragDepth: 1};
  P.ExtShaderTextureLod.prototype = {$isExtShaderTextureLod: 1};
  P.ExtTextureFilterAnisotropic.prototype = {$isExtTextureFilterAnisotropic: 1};
  P.Framebuffer.prototype = {$isFramebuffer: 1};
  P.GetBufferSubDataAsync.prototype = {$isGetBufferSubDataAsync: 1};
  P.LoseContext.prototype = {$isLoseContext: 1};
  P.OesElementIndexUint.prototype = {$isOesElementIndexUint: 1};
  P.OesStandardDerivatives.prototype = {$isOesStandardDerivatives: 1};
  P.OesTextureFloat.prototype = {$isOesTextureFloat: 1};
  P.OesTextureFloatLinear.prototype = {$isOesTextureFloatLinear: 1};
  P.OesTextureHalfFloat.prototype = {$isOesTextureHalfFloat: 1};
  P.OesTextureHalfFloatLinear.prototype = {$isOesTextureHalfFloatLinear: 1};
  P.OesVertexArrayObject.prototype = {$isOesVertexArrayObject: 1};
  P.Program.prototype = {$isProgram: 1};
  P.Query.prototype = {$isQuery: 1};
  P.Renderbuffer.prototype = {$isRenderbuffer: 1};
  P.RenderingContext.prototype = {$isCanvasRenderingContext: 1, $isRenderingContext: 1};
  P.RenderingContext2.prototype = {$isRenderingContext2: 1, $is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P.Sampler.prototype = {$isSampler: 1};
  P.Shader.prototype = {$isShader: 1};
  P.ShaderPrecisionFormat.prototype = {$isShaderPrecisionFormat: 1};
  P.Sync.prototype = {$isSync: 1};
  P.Texture.prototype = {$isTexture: 1};
  P.TimerQueryExt.prototype = {$isTimerQueryExt: 1};
  P.TransformFeedback.prototype = {$isTransformFeedback: 1};
  P.UniformLocation.prototype = {$isUniformLocation: 1};
  P.VertexArrayObject.prototype = {$isVertexArrayObject: 1};
  P.VertexArrayObjectOes.prototype = {$isVertexArrayObjectOes: 1};
  P.WebGL.prototype = {$isWebGL: 1};
  P._WebGL2RenderingContextBase.prototype = {$is_WebGL2RenderingContextBase: 1, $is_WebGLRenderingContextBase: 1};
  P._WebGLRenderingContextBase.prototype = {};
  P.SqlDatabase.prototype = {$isSqlDatabase: 1};
  P.SqlError.prototype = {$isSqlError: 1};
  P.SqlResultSet.prototype = {$isSqlResultSet: 1};
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= this.get$length(receiver))
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return this.item$1(receiver, index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMap");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      H.intTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      var t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = this.get$length(receiver);
      if (typeof len !== "number")
        return len.$gt();
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$single: function(receiver) {
      var len = this.get$length(receiver);
      if (len === 1)
        return receiver[0];
      if (len === 0)
        throw H.wrapException(P.StateError$("No elements"));
      throw H.wrapException(P.StateError$("More than one element"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, H.intTypeCheck(index));
    },
    item$1: function(receiver, index) {
      return P.convertNativeToDart_Dictionary(this._item_1$1(receiver, H.intTypeCheck(index)));
    },
    _item_1$1: function(receiver, index) {
      return receiver.item(index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    },
    $isSqlResultSetRowList: 1
  };
  P.SqlTransaction.prototype = {$isSqlTransaction: 1};
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $isListMixin: 1,
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $isImmutableListMixin: 1,
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  G.ThrowingSlowComponentLoader.prototype = {$isSlowComponentLoader: 1};
  G.createRandomAppId_char.prototype = {
    call$0: function() {
      var t1 = this.random.nextInt$1(26);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.String_String$fromCharCode(97 + t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 72
  };
  Y._Injector$minimalApp.prototype = {
    _getThrowingSlowComponentLoader$0$0: function() {
      var t1 = this._field0;
      return t1 == null ? this._field0 = G.ThrowingSlowComponentLoader$() : t1;
    },
    _getComponentLoader$1$0: function() {
      var t1 = this._field1;
      return t1 == null ? this._field1 = M.ComponentLoader$() : t1;
    },
    _getdynamic$2$0: function() {
      var t1 = this._field2;
      return t1 == null ? this._field2 = G.createRandomAppId() : t1;
    },
    _getDomSanitizationServiceImpl$3$0: function() {
      var t1 = this._field3;
      return t1 == null ? this._field3 = H.interceptedTypeCheck(R.DomSanitizationServiceImpl_DomSanitizationServiceImpl(), "$isDomSanitizationServiceImpl") : t1;
    },
    _getExisting$4$0: function() {
      return this.$get$1(0, C.Type_DomSanitizationService_cKo);
    },
    _getBrowserExceptionHandler$5$0: function() {
      var t1 = this._field5;
      return t1 == null ? this._field5 = T.BrowserExceptionHandler$() : t1;
    },
    _getInjector$6$0: function() {
      return this;
    },
    injectFromSelfOptional$2: function(token, orElse) {
      var _this = this;
      if (token === C.Type_SlowComponentLoader_qxe)
        return _this._getThrowingSlowComponentLoader$0$0();
      if (token === C.Type_ComponentLoader_7xV)
        return _this._getComponentLoader$1$0();
      if (token === C.C_OpaqueToken)
        return _this._getdynamic$2$0();
      if (token === C.Type_DomSanitizationService_cKo)
        return _this._getDomSanitizationServiceImpl$3$0();
      if (token === C.Type_SanitizationService_bRS)
        return _this._getExisting$4$0();
      if (token === C.Type_ExceptionHandler_qBE)
        return _this._getBrowserExceptionHandler$5$0();
      if (token === C.Type_Injector_aJC)
        return _this._getInjector$6$0();
      return orElse;
    }
  };
  G.appInjector_closure0.prototype = {
    call$0: function() {
      return this._box_0.applicationRef;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 65
  };
  G.appInjector_closure1.prototype = {
    call$0: function() {
      return $.appViewUtils;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 56
  };
  G.appInjector_closure2.prototype = {
    call$0: function() {
      return this.ngZone;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 30
  };
  G.appInjector_closure3.prototype = {
    call$0: function() {
      return D.Testability$(this.ngZone);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 54
  };
  G.appInjector_closure.prototype = {
    call$0: function() {
      var t1 = this.ngZone,
        t2 = this.userInjector;
      this._box_0.applicationRef = Y.internalCreateApplicationRef(t1, t2);
      $.appViewUtils = Q.AppViewUtils$(t2.provideToken$1$1(C.C_OpaqueToken, P.String), t2.provideType$1$1(C.Type_SanitizationService_bRS, E.SanitizationService), L.EventManager$(t1));
      return t2;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 51
  };
  G._LazyInjector.prototype = {
    injectFromSelfOptional$2: function(token, orElse) {
      var result = J.$index$asx(this._providers, token);
      if (result == null) {
        if (token === C.Type_Injector_aJC)
          return this;
        return orElse;
      }
      return result.call$0();
    }
  };
  Y.NgClass.prototype = {$isOnDestroy: 1, $isDoCheck: 1};
  R.NgFor.prototype = {$isDoCheck: 1};
  R._RecordViewTuple.prototype = {};
  K.NgIf.prototype = {};
  X.NgStyle.prototype = {$isDoCheck: 1};
  V.SwitchView.prototype = {};
  V.NgSwitch.prototype = {};
  V.NgSwitchWhen.prototype = {};
  V.NgSwitchDefault.prototype = {};
  L.NgTemplateOutlet.prototype = {$isDoCheck: 1};
  B._ObservableStrategy.prototype = {};
  B._PromiseStrategy.prototype = {};
  B.AsyncPipe.prototype = {$isPipeTransform: 1, $isOnDestroy: 1};
  R.DatePipe.prototype = {$isPipeTransform: 1};
  K.InvalidPipeArgumentException.prototype = {};
  L.JsonPipe.prototype = {$isPipeTransform: 1};
  Y.LowerCasePipe.prototype = {$isPipeTransform: 1};
  D._NumberPipe.prototype = {};
  D.DecimalPipe.prototype = {$isPipeTransform: 1};
  D.PercentPipe.prototype = {$isPipeTransform: 1};
  D.CurrencyPipe.prototype = {$isPipeTransform: 1};
  D._NumberFormatStyle.prototype = {};
  M.ReplacePipe.prototype = {$isPipeTransform: 1};
  T.SlicePipe.prototype = {$isPipeTransform: 1};
  B.UpperCasePipe.prototype = {$isPipeTransform: 1};
  K.TransitionalAppHost.prototype = {
    createAppInjector$1: function(create) {
      return H.functionTypeCheck(create, {func: 1, ret: M.Injector, opt: [M.Injector]}).call$1(this._hostInjector);
    }
  };
  Y.ApplicationRef.prototype = {
    ApplicationRef$_$3: function(_ngZone, _exceptionHandler, _injector) {
      var _this = this,
        t1 = _this._ngZone;
      _this.set$_onErrorSub(J.get$onError$x(t1).listen$1(new Y.ApplicationRef$__closure(_this)));
      _this.set$_onMicroSub(t1.get$onMicrotaskEmpty().listen$1(new Y.ApplicationRef$__closure0(_this)));
    },
    bootstrap$1$1: function(componentFactory, $T) {
      return X.unsafeCast(this.run$1$1(new Y.ApplicationRef_bootstrap_closure(this, H.assertSubtype(componentFactory, "$isComponentFactory", [$T], "$asComponentFactory"), $T), P.Object), [D.ComponentRef, $T]);
    },
    bootstrap$1: function(componentFactory) {
      return this.bootstrap$1$1(componentFactory, null);
    },
    _loadedRootComponent$2: function(component, node) {
      var _this = this;
      H.assertSubtype(component, "$isComponentRef", [-1], "$asComponentRef");
      H.interceptedTypeCheck(node, "$isElement");
      J.add$1$ax(_this._rootComponents, component);
      component.onDestroy$1(new Y.ApplicationRef__loadedRootComponent_closure(_this, component, node));
      _this.registerChangeDetector$1(component.get$changeDetectorRef());
      _this.tick$0();
    },
    _destroyedRootComponent$1: function(component) {
      H.assertSubtype(component, "$isComponentRef", [-1], "$asComponentRef");
      if (!H.boolConversionCheck(J.remove$1$ax(this._rootComponents, component)))
        return;
      this.unregisterChangeDetector$1(component.get$changeDetectorRef());
    },
    handleUncaughtException$3: function(error, trace, reason) {
      this._exceptionHandler.call$3(error, H.interceptedTypeCheck(trace, "$isStackTrace"), H.stringTypeCheck(reason));
    },
    handleUncaughtException$2: function(error, trace) {
      return this.handleUncaughtException$3(error, trace, null);
    },
    runInZone$1$1: function(callback, $R) {
      return this._ngZone.run$1$1(H.functionTypeCheck(callback, {func: 1, ret: $R}), $R);
    },
    runInZone$1: function(callback) {
      return this.runInZone$1$1(callback, null);
    },
    set$_onErrorSub: function(_onErrorSub) {
      H.assertSubtype(_onErrorSub, "$isStreamSubscription", [-1], "$asStreamSubscription");
    },
    set$_onMicroSub: function(_onMicroSub) {
      H.assertSubtype(_onMicroSub, "$isStreamSubscription", [-1], "$asStreamSubscription");
    }
  };
  Y.ApplicationRef$__closure.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isNgZoneError");
      this.$this.handleUncaughtException$2(e.error, P._StringStackTrace$(J.join$1$ax(e.stackTrace, "\n")));
    },
    $signature: 48
  };
  Y.ApplicationRef$__closure0.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1._ngZone.runGuarded$1(t1.get$tick());
    },
    $signature: 16
  };
  Y.ApplicationRef_bootstrap_closure.prototype = {
    call$0: function() {
      var newElement, t3, replacement, testability,
        t1 = this.$this,
        t2 = t1._injector,
        component = J.create$1$z(this.componentFactory, t2),
        existing = W.querySelector("my-app");
      if (existing != null) {
        newElement = component.get$location(component);
        t3 = newElement.id;
        if (t3 == null || H.boolConversionCheck(C.JSString_methods.get$isEmpty(t3)))
          newElement.id = existing.id;
        J.replaceWith$1$x(existing, newElement);
        replacement = newElement;
      } else {
        t3 = W.document().body;
        (t3 && C.BodyElement_methods).append$1(t3, component.get$location(component));
        replacement = null;
      }
      testability = component.get$injector().provideTypeOptional$1$1(C.Type_Testability_h8g, D.Testability);
      if (testability != null)
        t2.provideType$1$1(C.Type_TestabilityRegistry_IMm, D.TestabilityRegistry).registerApplication$2(component.get$location(component), testability);
      t1._loadedRootComponent$2(component, replacement);
      return component;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: [D.ComponentRef, this.T]};
    }
  };
  Y.ApplicationRef__loadedRootComponent_closure.prototype = {
    call$0: function() {
      this.$this._destroyedRootComponent$1(this.component);
      var t1 = this.node;
      if (t1 != null)
        J.remove$0$ax(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  A._DevModeEquality.prototype = {
    $asEquality: function() {
      return [P.Object];
    },
    $asDefaultEquality: function() {
      return [P.Object];
    }
  };
  A.SimpleChange.prototype = {};
  S.ChangeDetectorRef.prototype = {};
  N.ComponentState.prototype = {};
  A.ChangeDetectorState.prototype = {};
  A.ChangeDetectionStrategy.prototype = {};
  A.ChangeDetectionCheckedState.prototype = {};
  R.DefaultIterableDiffer.prototype = {};
  R.CollectionChangeRecord.prototype = {};
  R._DuplicateItemRecordList.prototype = {};
  R._DuplicateMap.prototype = {};
  N.DefaultKeyValueDiffer.prototype = {};
  N.KeyValueChangeRecord.prototype = {};
  M.ChangeDetectionHost.prototype = {
    registerChangeDetector$1: function(detector) {
      J.add$1$ax(this._changeDetectors, H.interceptedTypeCheck(detector, "$isChangeDetectorRef"));
    },
    unregisterChangeDetector$1: function(detector) {
      J.remove$1$ax(this._changeDetectors, H.interceptedTypeCheck(detector, "$isChangeDetectorRef"));
    },
    tick$0: function() {
      var e, s, exception, _this = this;
      if (H.boolConversionCheck(X.isDevMode()) && H.boolConversionCheck(_this._runningTick))
        throw H.wrapException(P.StateError$("Change detecion (tick) was called recursively"));
      try {
        $.ChangeDetectionHost__current = _this;
        _this._runningTick = true;
        _this._runTick$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (!H.boolConversionCheck(_this._runTickGuarded$0()))
          _this.handleUncaughtException$3(e, s, "DigestTick");
        throw exception;
      } finally {
        $.ChangeDetectionHost__current = null;
        _this._runningTick = false;
        _this._resetViewErrors$0();
      }
    },
    _runTick$0: function() {
      var i,
        detectors = this._changeDetectors,
        t1 = J.getInterceptor$asx(detectors),
        $length = t1.get$length(detectors);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        t1.$index(detectors, i).detectChanges$0();
      if (H.boolConversionCheck(X.isDevMode())) {
        U.debugEnterThrowOnChanged();
        for (i = 0; i < $length; ++i)
          t1.$index(detectors, i).detectChanges$0();
        U.debugExitThrowOnChanged();
      }
    },
    _runTickGuarded$0: function() {
      var i, detector,
        detectors = this._changeDetectors,
        t1 = J.getInterceptor$asx(detectors),
        $length = t1.get$length(detectors);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        detector = t1.$index(detectors, i);
        if (detector instanceof A.View) {
          this._lastGuardedView = detector;
          detector.detectChanges$0();
        }
      }
      return this._checkForChangeDetectionError$0();
    },
    _checkForChangeDetectionError$0: function() {
      var _this = this,
        t1 = _this._lastGuardedView;
      if (t1 != null) {
        _this.reportViewException$3(t1, _this._lastCaughtException, _this._lastCaughtTrace);
        _this._resetViewErrors$0();
        return true;
      }
      return false;
    },
    _resetViewErrors$0: function() {
      this._lastGuardedView = this._lastCaughtException = this._lastCaughtTrace = null;
    },
    reportViewException$3: function(view, error, trace) {
      H.interceptedTypeCheck(view, "$isView");
      H.interceptedTypeCheck(trace, "$isStackTrace");
      view.disableChangeDetection$0();
      this.handleUncaughtException$2(error, trace);
    },
    run$1$1: function(callback, $R) {
      var completer, t1 = {};
      H.functionTypeCheck(callback, {func: 1, ret: {futureOr: 1, type: $R}});
      completer = P.Completer_Completer($R);
      t1.result = null;
      this.runInZone$1$1(new M.ChangeDetectionHost_run_closure(t1, this, callback, completer, $R), P.Null);
      t1 = t1.result;
      return !!J.getInterceptor$(t1).$isFuture ? completer.future : t1;
    },
    run$1: function(callback) {
      return this.run$1$1(callback, null);
    }
  };
  M.ChangeDetectionHost_run_closure.prototype = {
    call$0: function() {
      var resultCast, e, s, result, t1, t2, exception, _this = this;
      try {
        result = _this.callback.call$0();
        _this._box_0.result = result;
        if (!!J.getInterceptor$(result).$isFuture) {
          t1 = _this.R;
          resultCast = X.unsafeCast(result, [P.Future, t1]);
          t2 = _this.completer;
          resultCast.then$1$2$onError(new M.ChangeDetectionHost_run__closure(t2, t1), new M.ChangeDetectionHost_run__closure0(_this.$this, t2), P.Null);
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        _this.$this.handleUncaughtException$2(e, s);
        throw exception;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  M.ChangeDetectionHost_run__closure.prototype = {
    call$1: function(result) {
      H.assertSubtypeOfRuntimeType(result, this.R);
      J.complete$1$z(this.completer, result);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [this.R]};
    }
  };
  M.ChangeDetectionHost_run__closure0.prototype = {
    call$2: function(e, s) {
      var sCasted = X.unsafeCast(s, P.StackTrace);
      this.completer.completeError$2(e, sCasted);
      this.$this.handleUncaughtException$2(e, sCasted);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 4
  };
  E.PipeTransform.prototype = {};
  B.Inject.prototype = {};
  B.Injectable.prototype = {};
  B.Optional.prototype = {};
  B.Self.prototype = {};
  B.SkipSelf.prototype = {};
  B.Host.prototype = {};
  S.OpaqueToken.prototype = {
    toString$0: function(_) {
      if (H.boolConversionCheck(X.isDevMode()))
        return "OpaqueToken (" + H.S(this.super$Object$toString(0)) + ") <" + H.S(H.createRuntimeType(H.getTypeArgumentByIndex(this, 0))) + ">('APP_ID')";
      return this.super$Object$toString(0);
    }
  };
  S.MultiToken.prototype = {
    $asOpaqueToken: function($T) {
      return [[P.List, $T]];
    }
  };
  Q.AppViewUtils.prototype = {};
  D.ComponentRef.prototype = {
    get$location: function(_) {
      return this._nativeElement;
    },
    get$injector: function() {
      return this._hostView.injector$1(0);
    },
    get$hostView: function() {
      return this._hostView;
    },
    get$changeDetectorRef: function() {
      return this._hostView;
    },
    onDestroy$1: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      this.get$hostView().onDestroy$1(callback);
    }
  };
  D.ComponentFactory.prototype = {
    create$1: function(_, injector) {
      var hostView = V.viewFactory_AppComponentHost0(H.interceptedTypeCheck(injector, "$isInjector"));
      return hostView.create$1(0, C.List_empty2);
    }
  };
  M.ComponentLoader.prototype = {};
  L.SlowComponentLoader.prototype = {};
  Z.ElementRef.prototype = {};
  O.ComponentStyles.prototype = {
    ComponentStyles$_$5: function(_styles, _componentUrl, _componentId, contentPrefix, hostPrefix) {
      this._appendStyles$0();
    },
    get$usesStyleEncapsulation: function() {
      return true;
    },
    _appendStyles$0: function() {
      var styles, t1, t2,
        target = H.setRuntimeTypeInfo([], [P.String]);
      if (H.boolConversionCheck(X.isDevMode()))
        C.JSArray_methods.add$1(target, "/* From: " + H.S(this._componentUrl) + "*/");
      styles = J.join$1$ax(O._flattenStyles(this._styles, target, this._componentId), "\n");
      t1 = J.get$head$x(W.document());
      t2 = W.StyleElement_StyleElement();
      t2.textContent = styles;
      J.append$1$x(t1, t2);
    }
  };
  O._UnscopedComponentStyles.prototype = {};
  D.TemplateRef.prototype = {};
  V.ViewContainer.prototype = {$isViewContainerRef: 1};
  R.ViewContainerRef.prototype = {$isComponentLoader: 1};
  D.ViewFragment.prototype = {};
  L.ViewRef.prototype = {};
  L.EmbeddedViewRef.prototype = {$isViewRef: 1};
  E.ComponentView.prototype = {
    get$parentView: function() {
      return this._data.parentView;
    },
    get$parentIndex: function() {
      return this._data.parentIndex;
    },
    createAndProject$2: function(component, projectedNodes) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(component, H.getRuntimeTypeArgument(_this, "ComponentView", 0));
      H.assertSubtype(projectedNodes, "$isList", [P.Object], "$asList");
      _this.set$ctx(component);
      _this._data.set$projectedNodes(projectedNodes);
      _this.build$0();
    },
    initViewRoot$0: function() {
      var hostElement = this.rootElement,
        styles = this.componentStyles;
      if (H.boolConversionCheck(styles.get$usesStyleEncapsulation()))
        T.updateClassBinding(hostElement, styles.hostPrefix, true);
      return hostElement;
    },
    get$firstCheck: function() {
      return J.$eq$(this._data.get$changeDetectorState(), 0);
    },
    detectChanges$0: function() {
      var _this = this,
        t1 = _this._data;
      if (H.boolConversionCheck(t1.get$shouldSkipChangeDetection())) {
        if (H.boolConversionCheck(J.$eq$(t1.get$changeDetectionMode(), 2)))
          _this.detectChangesInCheckAlwaysViews$0();
        return;
      }
      if (H.boolConversionCheck(X.isDevMode()) && H.boolConversionCheck(t1.get$destroyed()))
        throw H.wrapException(P.StateError$("detectChanges"));
      if (H.boolConversionCheck(M.ChangeDetectionHost_checkForCrashes()))
        _this.detectCrash$0();
      else
        _this.detectChangesInternal$0();
      if (H.boolConversionCheck(J.$eq$(t1.get$changeDetectionMode(), 1)))
        t1.set$changeDetectionMode(2);
      t1.set$changeDetectorState(1);
    },
    disableChangeDetection$0: function() {
      this._data.set$changeDetectorState(2);
    },
    set$ctx: function(ctx) {
      H.assertSubtypeOfRuntimeType(ctx, H.getRuntimeTypeArgument(this, "ComponentView", 0));
    }
  };
  E._ComponentViewData.prototype = {
    get$changeDetectionMode: function() {
      return this._changeDetectionMode;
    },
    set$changeDetectionMode: function(mode) {
      H.intTypeCheck(mode);
      if (!H.boolConversionCheck(J.$eq$(this._changeDetectionMode, mode))) {
        this._changeDetectionMode = mode;
        this._updateShouldSkipChangeDetection$0();
      }
    },
    get$changeDetectorState: function() {
      return this._changeDetectorState;
    },
    set$changeDetectorState: function(state) {
      H.intTypeCheck(state);
      if (!H.boolConversionCheck(J.$eq$(this._changeDetectorState, state))) {
        this._changeDetectorState = state;
        this._updateShouldSkipChangeDetection$0();
      }
    },
    get$destroyed: function() {
      return false;
    },
    get$shouldSkipChangeDetection: function() {
      return this._shouldSkipChangeDetection;
    },
    _updateShouldSkipChangeDetection$0: function() {
      var _this = this;
      _this._shouldSkipChangeDetection = H.boolConversionCheck(J.$eq$(_this._changeDetectionMode, 2)) || H.boolConversionCheck(J.$eq$(_this._changeDetectionMode, 4)) || H.boolConversionCheck(J.$eq$(_this._changeDetectorState, 2));
    },
    set$projectedNodes: function(projectedNodes) {
      H.assertSubtype(projectedNodes, "$isList", [P.Object], "$asList");
    },
    $isRenderViewData: 1,
    $isViewData: 1
  };
  B.DynamicView.prototype = {$isChangeDetectorRef: 1, $isViewRef: 1, $isView: 1};
  B.DynamicViewData.prototype = {$isViewData: 1};
  E.EmbeddedView.prototype = {$isViewRef: 1, $isEmbeddedViewRef: 1, $isDynamicView: 1};
  E._EmbeddedViewData.prototype = {$isDynamicViewData: 1, $isRenderViewData: 1, $isViewData: 1};
  G.HostView.prototype = {
    get$firstCheck: function() {
      return J.$eq$(this._host_view$_data.get$changeDetectorState(), 0);
    },
    create$1: function(_, projectedNodes) {
      var _this = this;
      H.assertSubtype(projectedNodes, "$isList", [[P.List, P.Object]], "$asList");
      _this.build$0();
      _this.componentView.createAndProject$2(_this.component, projectedNodes);
      return D.ComponentRef$(_this, _this.componentView.rootElement, _this.component, H.getRuntimeTypeArgument(_this, "HostView", 0));
    },
    initRootNode$1: function(nodeOrViewContainer) {
      H.interceptedTypeCheck(D.ViewFragment_ViewFragment(H.setRuntimeTypeInfo([nodeOrViewContainer], [P.Object])), "$isViewFragment");
    },
    onDestroy$1: function(callback) {
      this._host_view$_data.addOnDestroyCallback$1(H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    detectChanges$0: function() {
      var t1 = this._host_view$_data;
      if (H.boolConversionCheck(t1.get$shouldSkipChangeDetection()))
        return;
      if (H.boolConversionCheck(X.isDevMode()) && H.boolConversionCheck(t1.get$destroyed()))
        throw H.wrapException(P.StateError$("detectChanges"));
      if (H.boolConversionCheck(M.ChangeDetectionHost_checkForCrashes()))
        this.detectCrash$0();
      else
        this.detectChangesInternal$0();
      t1.set$changeDetectorState(1);
    },
    detectChangesInternal$0: function() {
      this.componentView.detectChanges$0();
    },
    disableChangeDetection$0: function() {
      this._host_view$_data.set$changeDetectorState(2);
    },
    injectFromAncestry$2: function(token, notFoundValue) {
      return J.$get$2$z(this._host_view$_injector, token, notFoundValue);
    },
    set$component: function(component) {
      this.component = H.assertSubtypeOfRuntimeType(component, H.getRuntimeTypeArgument(this, "HostView", 0));
    },
    set$componentView: function(componentView) {
      this.componentView = H.assertSubtype(componentView, "$isComponentView", [H.getRuntimeTypeArgument(this, "HostView", 0)], "$asComponentView");
    },
    $isViewRef: 1,
    $isDynamicView: 1
  };
  G._HostViewData.prototype = {
    get$changeDetectorState: function() {
      return this._host_view$_changeDetectorState;
    },
    set$changeDetectorState: function(state) {
      H.intTypeCheck(state);
      if (!H.boolConversionCheck(J.$eq$(this._host_view$_changeDetectorState, state))) {
        this._host_view$_changeDetectorState = state;
        this._host_view$_updateShouldSkipChangeDetection$0();
      }
    },
    get$destroyed: function() {
      return false;
    },
    get$shouldSkipChangeDetection: function() {
      return this._host_view$_shouldSkipChangeDetection;
    },
    addOnDestroyCallback$1: function(callback) {
      var t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      if (this._onDestroyCallbacks == null)
        this.set$_onDestroyCallbacks(H.setRuntimeTypeInfo([], [t1]));
      J.add$1$ax(this._onDestroyCallbacks, callback);
    },
    _host_view$_updateShouldSkipChangeDetection$0: function() {
      var t1 = H.boolConversionCheck(J.$eq$(this._host_view$_changeDetectorState, 2));
      this._host_view$_shouldSkipChangeDetection = t1;
    },
    set$_onDestroyCallbacks: function(_onDestroyCallbacks) {
      this._onDestroyCallbacks = H.assertSubtype(_onDestroyCallbacks, "$isList", [{func: 1, ret: -1}], "$asList");
    },
    $isDynamicViewData: 1,
    $isViewData: 1
  };
  A.RenderView.prototype = {
    injectFromAncestry$2: function(token, notFoundValue) {
      return this.get$parentView().inject$3(token, this.get$parentIndex(), notFoundValue);
    },
    addShimC$1: function(element) {
      var styles;
      H.interceptedTypeCheck(element, "$isHtmlElement");
      styles = this.componentStyles;
      if (H.boolConversionCheck(styles.get$usesStyleEncapsulation()))
        T.updateClassBinding(element, styles.contentPrefix, true);
    }
  };
  A.RenderViewData.prototype = {$isViewData: 1};
  A.View.prototype = {
    detectChangesInCheckAlwaysViews$0: function() {
    },
    detectChangesInternal$0: function() {
    },
    detectCrash$0: function() {
      var e, s, exception;
      try {
        this.detectChangesInternal$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        M.ChangeDetectionHost_handleCrash(this, e, s);
      }
    },
    injector$1: function(nodeIndex) {
      return G.ElementInjector$(this, H.intTypeCheck(nodeIndex));
    },
    injectorGet$3: function(token, nodeIndex, notFoundResult) {
      var result;
      H.intTypeCheck(nodeIndex);
      A.debugInjectorEnter(token);
      result = this.inject$3(token, nodeIndex, notFoundResult);
      A.debugInjectorLeave(token);
      return result;
    },
    injectorGetInternal$3: function(token, nodeIndex, notFoundResult) {
      H.intTypeCheck(nodeIndex);
      return notFoundResult;
    },
    inject$3: function(token, nodeIndex, notFoundResult) {
      var result;
      H.intTypeCheck(nodeIndex);
      result = nodeIndex != null ? this.injectorGetInternal$3(token, nodeIndex, C.C_Object) : C.C_Object;
      return result === C.C_Object ? this.injectFromAncestry$2(token, notFoundResult) : result;
    },
    $isChangeDetectorRef: 1
  };
  A.ViewData.prototype = {};
  O.Directive.prototype = {};
  O.Component.prototype = {};
  O.Pipe.prototype = {};
  O.Attribute.prototype = {};
  O._Query.prototype = {};
  O.ContentChildren.prototype = {};
  O.ContentChild.prototype = {};
  O._ViewQuery.prototype = {};
  O.ViewChildren.prototype = {};
  O.ViewChild.prototype = {};
  O.Input0.prototype = {};
  O.Output.prototype = {};
  O.HostBinding.prototype = {};
  O.HostListener.prototype = {};
  N.AfterChanges.prototype = {};
  N.OnInit.prototype = {};
  N.OnDestroy.prototype = {};
  N.DoCheck.prototype = {};
  N.AfterContentInit.prototype = {};
  N.AfterContentChecked.prototype = {};
  N.AfterViewInit.prototype = {};
  N.AfterViewChecked.prototype = {};
  M.Typed.prototype = {};
  A.ViewEncapsulation.prototype = {};
  L.Visibility.prototype = {};
  E.TemplateSecurityContext.prototype = {};
  E.SanitizationService.prototype = {};
  E.SafeValue.prototype = {};
  D.Testability.prototype = {
    Testability$1: function(_ngZone) {
      this._watchAngularEvents$0();
    },
    _watchAngularEvents$0: function() {
      var t1 = this._testability$_ngZone;
      t1.get$onTurnStart().listen$1(new D.Testability__watchAngularEvents_closure(this));
      t1.runOutsideAngular$1$1(new D.Testability__watchAngularEvents_closure0(this), P.Null);
    },
    isStable$0: function(_) {
      var t1;
      if (H.boolConversionCheck(this._isZoneStable))
        t1 = !H.boolConversionCheck(this._testability$_ngZone.get$hasPendingMacrotasks());
      else
        t1 = false;
      return t1;
    },
    _runCallbacksIfReady$0: function() {
      if (H.boolConversionCheck(this.isStable$0(0)))
        P.scheduleMicrotask(new D.Testability__runCallbacksIfReady_closure(this));
      else
        this._didWork = true;
    },
    whenStable$1: function(_, callback) {
      J.add$1$ax(this._callbacks, H.interceptedTypeCheck(callback, "$isFunction"));
      this._runCallbacksIfReady$0();
    }
  };
  D.Testability__watchAngularEvents_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      t1._didWork = true;
      t1._isZoneStable = false;
    },
    $signature: 16
  };
  D.Testability__watchAngularEvents_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._testability$_ngZone.get$onTurnDone().listen$1(new D.Testability__watchAngularEvents__closure(t1));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  D.Testability__watchAngularEvents__closure.prototype = {
    call$1: function(_) {
      Y.NgZone_assertNotInAngularZone();
      P.scheduleMicrotask(new D.Testability__watchAngularEvents___closure(this.$this));
    },
    $signature: 16
  };
  D.Testability__watchAngularEvents___closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._isZoneStable = true;
      t1._runCallbacksIfReady$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  D.Testability__runCallbacksIfReady_closure.prototype = {
    call$0: function() {
      var t1, t2, t3;
      for (t1 = this.$this, t2 = t1._callbacks, t3 = J.getInterceptor$asx(t2); H.boolConversionCheck(t3.get$isNotEmpty(t2));)
        t3.removeLast$0(t2).call$1(t1._didWork);
      t1._didWork = false;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  D.TestabilityRegistry.prototype = {
    setTestabilityGetter$1: function(getter) {
      H.interceptedTypeCheck(getter, "$isGetTestability");
      this._testabilityGetter = getter;
      getter.addToWindow$1(this);
    },
    registerApplication$2: function(token, testability) {
      J.$indexSet$ax(this._applications, H.interceptedTypeCheck(token, "$isElement"), H.interceptedTypeCheck(testability, "$isTestability"));
    },
    getTestability$1: function(element) {
      return J.$index$asx(this._applications, H.interceptedTypeCheck(element, "$isElement"));
    },
    getAllTestabilities$0: function() {
      return J.toList$0$ax(J.get$values$x(this._applications));
    },
    findTestabilityInTree$1: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      return this._testabilityGetter.findTestabilityInTree$2(this, element);
    }
  };
  D.GetTestability.prototype = {};
  D._NoopGetTestability.prototype = {
    addToWindow$1: function(registry) {
      H.interceptedTypeCheck(registry, "$isTestabilityRegistry");
    },
    findTestabilityInTree$2: function(registry, elem) {
      H.interceptedTypeCheck(registry, "$isTestabilityRegistry");
      H.interceptedTypeCheck(elem, "$isElement");
      return;
    },
    $isGetTestability: 1
  };
  Y.NgZone.prototype = {
    NgZone$_$0: function() {
      var _this = this;
      _this._outerZone = H.interceptedTypeCheck(P.Zone_current(), "$isZone");
      _this._innerZone = H.interceptedTypeCheck(_this._createInnerZone$2$handleUncaughtError(P.Zone_current(), _this.get$_onErrorWithoutLongStackTrace()), "$isZone");
    },
    NgZone$_debugAsyncStackTraces$0: function() {
      var _this = this;
      _this._outerZone = H.interceptedTypeCheck(P.Zone_current(), "$isZone");
      _this._innerZone = H.interceptedTypeCheck(U.Chain_capture(new Y.NgZone$_debugAsyncStackTraces_closure(_this), _this.get$_onErrorWithLongStackTrace(), P.Zone), "$isZone");
    },
    _createInnerZone$2$handleUncaughtError: function(zone, handleUncaughtError) {
      var _this = this, _null = null;
      return H.interceptedTypeCheck(zone, "$isZone").fork$2$specification$zoneValues(P._ZoneSpecification$(_null, _this.get$_createTimer(), _null, _null, H.functionTypeCheck(handleUncaughtError, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}), _null, _null, _null, _null, _this.get$_run(), _this.get$_runBinary(), _this.get$_runUnary(), _this.get$_ng_zone$_scheduleMicrotask()), P.LinkedHashMap__makeLiteral([_this._thisZoneKey, true, $.$get$NgZone__anyZoneKey(), true]));
    },
    _createInnerZone$1: function(zone) {
      return this._createInnerZone$2$handleUncaughtError(zone, null);
    },
    _ng_zone$_scheduleMicrotask$4: function($self, $parent, zone, fn) {
      var t1, _this = this;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(fn, {func: 1, ret: -1});
      if (H.boolConversionCheck(J.$eq$(_this._pendingMicrotasks, 0)))
        _this._setMicrotask$1(true);
      t1 = _this._pendingMicrotasks;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._pendingMicrotasks = H.intTypeCheck(t1 + 1);
      $parent.scheduleMicrotask$2(zone, new Y.NgZone__scheduleMicrotask_closure(_this, fn));
    },
    _run$1$4: function($self, $parent, zone, fn, $R) {
      H.interceptedTypeCheck($self, "$isZone");
      return H.interceptedTypeCheck($parent, "$isZoneDelegate").run$1$2(H.interceptedTypeCheck(zone, "$isZone"), new Y.NgZone__run_closure(this, H.functionTypeCheck(fn, {func: 1, ret: $R}), $R), $R);
    },
    _run$4: function($self, $parent, zone, fn) {
      return this._run$1$4($self, $parent, zone, fn, null);
    },
    _runUnary$2$5: function($self, $parent, zone, fn, arg, $R, $T) {
      H.interceptedTypeCheck($self, "$isZone");
      return H.interceptedTypeCheck($parent, "$isZoneDelegate").runUnary$2$3(H.interceptedTypeCheck(zone, "$isZone"), new Y.NgZone__runUnary_closure(this, H.functionTypeCheck(fn, {func: 1, ret: $R, args: [$T]}), $T, $R), H.assertSubtypeOfRuntimeType(arg, $T), $R, $T);
    },
    _runUnary$5: function($self, $parent, zone, fn, arg) {
      return this._runUnary$2$5($self, $parent, zone, fn, arg, null, null);
    },
    _runBinary$3$6: function($self, $parent, zone, fn, arg1, arg2, $R, T1, T2) {
      H.interceptedTypeCheck($self, "$isZone");
      return H.interceptedTypeCheck($parent, "$isZoneDelegate").runBinary$3$4(H.interceptedTypeCheck(zone, "$isZone"), new Y.NgZone__runBinary_closure(this, H.functionTypeCheck(fn, {func: 1, ret: $R, args: [T1, T2]}), T1, T2, $R), H.assertSubtypeOfRuntimeType(arg1, T1), H.assertSubtypeOfRuntimeType(arg2, T2), $R, T1, T2);
    },
    _runBinary$6: function($self, $parent, zone, fn, arg1, arg2) {
      return this._runBinary$3$6($self, $parent, zone, fn, arg1, arg2, null, null, null);
    },
    _onEnter$0: function() {
      var _this = this,
        t1 = _this._nesting;
      if (typeof t1 !== "number")
        return t1.$add();
      _this._nesting = H.intTypeCheck(t1 + 1);
      if (H.boolConversionCheck(_this._isStable)) {
        _this._isStable = false;
        J.add$1$ax(_this._onTurnStart, null);
      }
    },
    _onLeave$0: function() {
      var t1 = this._nesting;
      if (typeof t1 !== "number")
        return t1.$sub();
      this._nesting = H.intTypeCheck(t1 - 1);
      this._checkStable$0();
    },
    _onErrorWithLongStackTrace$2: function(error, chain) {
      J.add$1$ax(this._ng_zone$_onError, Y.NgZoneError$(error, J.toList$0$ax(J.map$1$1$ax(H.interceptedTypeCheck(chain, "$isChain").get$terse().get$traces(), new Y.NgZone__onErrorWithLongStackTrace_closure(), P.String))));
    },
    _onErrorWithoutLongStackTrace$5: function($self, $parent, zone, error, trace) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      J.add$1$ax(this._ng_zone$_onError, Y.NgZoneError$(error, H.setRuntimeTypeInfo([J.toString$0$(H.interceptedTypeCheck(trace, "$isStackTrace"))], [P.Object])));
    },
    _createTimer$5: function($self, $parent, zone, duration, fn) {
      var onDone, wrappedTimer, t1 = {};
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(fn, {func: 1, ret: -1});
      t1.wrappedTimer = null;
      onDone = new Y.NgZone__createTimer_closure(t1, this);
      wrappedTimer = Y._WrappedTimer$($parent.createTimer$3(zone, duration, new Y.NgZone__createTimer_closure0(fn, onDone)), duration, onDone);
      t1.wrappedTimer = wrappedTimer;
      J.add$1$ax(this._pendingTimers, wrappedTimer);
      this._setMacrotask$1(true);
      return t1.wrappedTimer;
    },
    _setMicrotask$1: function(hasMicrotasks) {
      this._hasPendingMicrotasks = H.boolTypeCheck(hasMicrotasks);
      this._checkStable$0();
    },
    _setMacrotask$1: function(hasMacrotasks) {
      this._hasPendingMacrotasks = H.boolTypeCheck(hasMacrotasks);
    },
    _checkStable$0: function() {
      var t1, _this = this;
      if (H.boolConversionCheck(J.$eq$(_this._nesting, 0)))
        if (!H.boolConversionCheck(_this._hasPendingMicrotasks) && !H.boolConversionCheck(_this._isStable))
          try {
            t1 = _this._nesting;
            if (typeof t1 !== "number")
              return t1.$add();
            _this._nesting = H.intTypeCheck(t1 + 1);
            J.add$1$ax(_this._onMicrotaskEmpty, null);
          } finally {
            t1 = _this._nesting;
            if (typeof t1 !== "number")
              return t1.$sub();
            _this._nesting = H.intTypeCheck(t1 - 1);
            if (!H.boolConversionCheck(_this._hasPendingMicrotasks))
              try {
                _this.runOutsideAngular$1$1(new Y.NgZone__checkStable_closure(_this), P.Null);
              } finally {
                _this._isStable = true;
              }
          }
    },
    get$hasPendingMacrotasks: function() {
      return this._hasPendingMacrotasks;
    },
    run$1$1: function(callback, $R) {
      H.functionTypeCheck(callback, {func: 1, ret: $R});
      return this._innerZone.run$1$1(callback, $R);
    },
    run$1: function(callback) {
      return this.run$1$1(callback, null);
    },
    runGuarded$1: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      return this._innerZone.runGuarded$1(callback);
    },
    runOutsideAngular$1$1: function(callback, $R) {
      H.functionTypeCheck(callback, {func: 1, ret: $R});
      return this._outerZone.run$1$1(callback, $R);
    },
    runOutsideAngular$1: function(callback) {
      return this.runOutsideAngular$1$1(callback, null);
    },
    get$onError: function(_) {
      return J.get$stream$x(this._ng_zone$_onError);
    },
    get$onMicrotaskEmpty: function() {
      return J.get$stream$x(this._onMicrotaskEmpty);
    },
    get$onTurnStart: function() {
      return J.get$stream$x(this._onTurnStart);
    },
    get$onTurnDone: function() {
      return J.get$stream$x(this._onTurnDone);
    }
  };
  Y.NgZone$_debugAsyncStackTraces_closure.prototype = {
    call$0: function() {
      return this.$this._createInnerZone$1(P.Zone_current());
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 55
  };
  Y.NgZone__scheduleMicrotask_closure.prototype = {
    call$0: function() {
      var t1, t2;
      try {
        this.fn.call$0();
      } finally {
        t1 = this.$this;
        t2 = t1._pendingMicrotasks;
        if (typeof t2 !== "number")
          return t2.$sub();
        t2 = H.intTypeCheck(t2 - 1);
        t1._pendingMicrotasks = t2;
        if (t2 === 0)
          t1._setMicrotask$1(false);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Y.NgZone__run_closure.prototype = {
    call$0: function() {
      try {
        this.$this._onEnter$0();
        var t1 = this.fn.call$0();
        return t1;
      } finally {
        this.$this._onLeave$0();
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  Y.NgZone__runUnary_closure.prototype = {
    call$1: function(arg) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(arg, _this.T);
      try {
        _this.$this._onEnter$0();
        t1 = _this.fn.call$1(arg);
        return t1;
      } finally {
        _this.$this._onLeave$0();
      }
    },
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T]};
    }
  };
  Y.NgZone__runBinary_closure.prototype = {
    call$2: function(arg1, arg2) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(arg1, _this.T1);
      H.assertSubtypeOfRuntimeType(arg2, _this.T2);
      try {
        _this.$this._onEnter$0();
        t1 = _this.fn.call$2(arg1, arg2);
        return t1;
      } finally {
        _this.$this._onLeave$0();
      }
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T1, this.T2]};
    }
  };
  Y.NgZone__onErrorWithLongStackTrace_closure.prototype = {
    call$1: function(t) {
      return J.toString$0$(H.interceptedTypeCheck(t, "$isTrace"));
    },
    $signature: 40
  };
  Y.NgZone__createTimer_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._pendingTimers,
        t3 = J.getInterceptor$ax(t2);
      t3.remove$1(t2, this._box_0.wrappedTimer);
      t1._setMacrotask$1(t3.get$isNotEmpty(t2));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Y.NgZone__createTimer_closure0.prototype = {
    call$0: function() {
      try {
        this.fn.call$0();
      } finally {
        this.onDone.call$0();
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Y.NgZone__checkStable_closure.prototype = {
    call$0: function() {
      J.add$1$ax(this.$this._onTurnDone, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Y._WrappedTimer.prototype = {$isTimer: 1};
  Y.NgZoneError.prototype = {};
  A.InjectionError.prototype = {};
  A.NoProviderError.prototype = {
    toString$0: function(_) {
      var t1 = this.path,
        t2 = J.getInterceptor$asx(t1),
        t3 = this.token;
      return H.boolConversionCheck(t2.get$isEmpty(t1)) ? A._noProviderError(t3) : J.$add$ansx(A._noProviderError(t3), ": " + H.S(t2.join$1(t1, " -> ")) + " -> " + H.S(t3) + '.\n**NOTE**: This path is not exhaustive, and nodes may be missing in between the "->" delimiters. There is ongoing work to improve this error message and include all the nodes where possible. ');
    }
  };
  G.ElementInjector.prototype = {
    provideUntyped$2: function(token, orElse) {
      return this._view.injectorGet$3(token, this._nodeIndex, orElse);
    },
    injectFromAncestryOptional$2: function(token, orElse) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    injectFromSelfOptional$2: function(token, orElse) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  };
  R.EmptyInjector.prototype = {
    injectFromSelfOptional$2: function(token, orElse) {
      return token === C.Type_Injector_aJC ? this : orElse;
    },
    injectFromAncestryOptional$2: function(token, orElse) {
      var t1 = this.parent;
      if (t1 == null)
        return orElse;
      return t1.provideUntyped$2(token, orElse);
    }
  };
  E.HierarchicalInjector.prototype = {
    provideUntyped$2: function(token, orElse) {
      var result;
      A.debugInjectorEnter(token);
      result = this.injectFromSelfOptional$2(token, orElse);
      if (result == null ? orElse == null : result === orElse)
        result = this.injectFromAncestryOptional$2(token, orElse);
      A.debugInjectorLeave(token);
      return result;
    },
    injectFromAncestryOptional$2: function(token, orElse) {
      return this.parent.provideUntyped$2(token, orElse);
    }
  };
  M.Injector.prototype = {
    $get$2: function(_, token, notFoundValue) {
      var result;
      A.debugInjectorEnter(token);
      result = this.provideUntyped$2(token, notFoundValue);
      if (result === C.C_Object)
        return M.throwsNotFound(this, token);
      A.debugInjectorLeave(token);
      return result;
    },
    $get$1: function($receiver, token) {
      return this.$get$2($receiver, token, C.C_Object);
    },
    provideType$1$1: function(token, $T) {
      return X.unsafeCast(this.$get$1(0, H.interceptedTypeCheck(token, "$isType")), $T);
    },
    provideType$1: function(token) {
      return this.provideType$1$1(token, P.Object);
    },
    provideTypeOptional$1$1: function(token, $T) {
      return X.unsafeCast(this.$get$2(0, H.interceptedTypeCheck(token, "$isType"), null), $T);
    },
    provideTypeOptional$1: function(token) {
      return this.provideTypeOptional$1$1(token, P.Object);
    },
    provideToken$1$1: function(token, $T) {
      return X.unsafeCast(this.$get$1(0, H.assertSubtype(token, "$isOpaqueToken", [$T], "$asOpaqueToken")), $T);
    },
    provideToken$1: function(token) {
      return this.provideToken$1$1(token, null);
    }
  };
  M.GenerateInjector.prototype = {};
  A.MapInjector.prototype = {
    injectFromSelfOptional$2: function(token, orElse) {
      var result = J.$index$asx(this._map$_providers, token);
      if (result == null) {
        if (token === C.Type_Injector_aJC)
          return this;
        result = orElse;
      }
      return result;
    }
  };
  B.ReflectiveInjector.prototype = {$isHierarchicalInjector: 1, $isInjector: 1};
  B._RuntimeInjector.prototype = {$isReflectiveInjector: 1, $isRuntimeInjectorBuilder: 1};
  B._FlatProviders.prototype = {};
  G.Module.prototype = {};
  Q.RuntimeInjectorBuilder.prototype = {};
  Q.Provider.prototype = {};
  Q.ClassProvider.prototype = {};
  Q.ExistingProvider.prototype = {};
  Q.FactoryProvider.prototype = {};
  Q.ValueProvider.prototype = {};
  U.ExceptionHandler.prototype = {};
  T.BrowserExceptionHandler.prototype = {
    call$3: function(error, stack, reason) {
      return this.handle$3(error, stack, H.stringTypeCheck(reason));
    },
    call$1: function(error) {
      return this.call$3(error, null, null);
    },
    call$2: function(error, stack) {
      return this.call$3(error, stack, null);
    },
    handle$3: function(exception, stack, reason) {
      H.stringTypeCheck(reason);
      J.error$1$z(J.get$console$x(W.window()), U.ExceptionHandler_exceptionToString(exception, stack, reason));
    },
    $isExceptionHandler: 1
  };
  K.BrowserGetTestability.prototype = {
    addToWindow$1: function(registry) {
      var jsRegistry, getAllAngularTestabilities, whenAllStable,
        _s23_ = "ngTestabilityRegistries",
        _s20_ = "frameworkStabilizers";
      H.interceptedTypeCheck(registry, "$isTestabilityRegistry");
      jsRegistry = P.getProperty(self.self, _s23_);
      if (jsRegistry == null) {
        jsRegistry = [];
        P.setProperty(self.self, _s23_, jsRegistry);
        P.setProperty(self.self, "getAngularTestability", P.allowInterop(new K.BrowserGetTestability_addToWindow_closure(), {func: 1, args: [W.Element], opt: [P.bool]}));
        getAllAngularTestabilities = new K.BrowserGetTestability_addToWindow_closure0();
        P.setProperty(self.self, "getAllAngularTestabilities", P.allowInterop(getAllAngularTestabilities, {func: 1, ret: [P.List,,]}));
        whenAllStable = P.allowInterop(new K.BrowserGetTestability_addToWindow_closure1(getAllAngularTestabilities), {func: 1, ret: P.Null, args: [,]});
        if (!H.boolConversionCheck(P.hasProperty(self.self, _s20_)))
          P.setProperty(self.self, _s20_, []);
        J.add$1$ax(P.getProperty(self.self, _s20_), whenAllStable);
      }
      J.add$1$ax(jsRegistry, this._createRegistry$1(registry));
    },
    findTestabilityInTree$2: function(registry, element) {
      var t1;
      H.interceptedTypeCheck(registry, "$isTestabilityRegistry");
      H.interceptedTypeCheck(element, "$isElement");
      if (element == null)
        return;
      t1 = registry.getTestability$1(element);
      return t1 == null ? this.findTestabilityInTree$2(registry, element.parentElement) : t1;
    },
    _createRegistry$1: function(registry) {
      var object;
      H.interceptedTypeCheck(registry, "$isTestabilityRegistry");
      object = P.newObject();
      P.setProperty(object, "getAngularTestability", P.allowInterop(new K.BrowserGetTestability__createRegistry_closure(registry), {func: 1, ret: U.JsTestability, args: [W.Element]}));
      P.setProperty(object, "getAllAngularTestabilities", P.allowInterop(new K.BrowserGetTestability__createRegistry_closure0(registry), {func: 1, ret: [P.List, U.JsTestability]}));
      return object;
    },
    $isGetTestability: 1
  };
  K.BrowserGetTestability_addToWindow_closure.prototype = {
    call$2: function(elem, findInAncestors) {
      var registry, t1, i, t2, result;
      H.interceptedTypeCheck(elem, "$isElement");
      H.boolTypeCheck(findInAncestors);
      registry = X.unsafeCast(P.getProperty(self.self, "ngTestabilityRegistries"), [P.List,,]);
      t1 = J.getInterceptor$asx(registry);
      i = 0;
      while (true) {
        t2 = t1.get$length(registry);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        result = P.callMethod(t1.$index(registry, i), "getAngularTestability", [elem]);
        if (result != null)
          return result;
        ++i;
      }
      throw H.wrapException(P.StateError$("Could not find testability for element."));
    },
    call$1: function(elem) {
      return this.call$2(elem, true);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [true];
    },
    $signature: 57
  };
  K.BrowserGetTestability_addToWindow_closure0.prototype = {
    call$0: function() {
      var t2, testabilities, testabilityCount, j,
        registry = X.unsafeCast(P.getProperty(self.self, "ngTestabilityRegistries"), [P.List,,]),
        result = [],
        t1 = J.getInterceptor$asx(registry),
        i = 0;
      while (true) {
        t2 = t1.get$length(registry);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        testabilities = P.callMethod(t1.$index(registry, i), "getAllAngularTestabilities", []);
        testabilityCount = H.numTypeCheck(P.getProperty(testabilities, "length"));
        if (typeof testabilityCount !== "number")
          return H.iae(testabilityCount);
        j = 0;
        for (; j < testabilityCount; ++j)
          result.push(P.getProperty(testabilities, j));
        ++i;
      }
      return result;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 58
  };
  K.BrowserGetTestability_addToWindow_closure1.prototype = {
    call$1: function(callback) {
      var decrement, t2, _box_0 = {},
        testabilities = this.getAllAngularTestabilities.call$0(),
        t1 = J.getInterceptor$asx(testabilities);
      _box_0.count = t1.get$length(testabilities);
      _box_0.didWork = false;
      decrement = new K.BrowserGetTestability_addToWindow__closure(_box_0, callback);
      for (t1 = t1.get$iterator(testabilities), t2 = {func: 1, ret: P.Null, args: [P.bool]}; H.boolConversionCheck(t1.moveNext$0());)
        P.callMethod(J.get$current$z(t1), "whenStable", [P.allowInterop(decrement, t2)]);
    },
    $signature: 9
  };
  K.BrowserGetTestability_addToWindow__closure.prototype = {
    call$1: function(didWork_) {
      var t1, t2, count;
      H.boolTypeCheck(didWork_);
      t1 = this._box_0;
      t1.didWork = H.boolConversionCheck(t1.didWork) || H.boolConversionCheck(didWork_);
      t2 = t1.count;
      if (typeof t2 !== "number")
        return t2.$sub();
      count = t2 - 1;
      t1.count = count;
      if (count === 0)
        this.callback.call$1(t1.didWork);
    },
    $signature: 59
  };
  K.BrowserGetTestability__createRegistry_closure.prototype = {
    call$1: function(element) {
      var testability = this.registry.findTestabilityInTree$1(H.interceptedTypeCheck(element, "$isElement"));
      return testability == null ? null : {isStable: P.allowInterop(testability.get$isStable(testability), {func: 1, ret: P.bool}), whenStable: P.allowInterop(testability.get$whenStable(testability), {func: 1, ret: -1, args: [{func: 1, ret: -1, args: [P.bool]}]})};
    },
    $signature: 60
  };
  K.BrowserGetTestability__createRegistry_closure0.prototype = {
    call$0: function() {
      return J.toList$0$ax(J.map$1$1$ax(this.registry.getAllTestabilities$0(), new K.BrowserGetTestability__createRegistry__closure(), U.JsTestability));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 61
  };
  K.BrowserGetTestability__createRegistry__closure.prototype = {
    call$1: function(t) {
      H.interceptedTypeCheck(t, "$isTestability");
      return {isStable: P.allowInterop(t.get$isStable(t), {func: 1, ret: P.bool}), whenStable: P.allowInterop(t.get$whenStable(t), {func: 1, ret: -1, args: [{func: 1, ret: -1, args: [P.bool]}]})};
    },
    $signature: 62
  };
  B.ChangeDetectionPerfRecord.prototype = {};
  B.AngularTools.prototype = {};
  B.AngularProfiler.prototype = {};
  U.UnstableExpressionError.prototype = {};
  U._DevModeEquality0.prototype = {
    $asEquality: function() {
      return [P.Object];
    },
    $asDefaultEquality: function() {
      return [P.Object];
    }
  };
  L.EventManager.prototype = {};
  L._KeyEventsHandler.prototype = {};
  L._ParsedEvent.prototype = {};
  F.Messages.prototype = {};
  V.SafeHtml.prototype = {};
  V.SafeStyle.prototype = {};
  V.SafeUrl.prototype = {};
  V.SafeResourceUrl.prototype = {};
  V.DomSanitizationService.prototype = {$isSanitizationService: 1};
  R.DomSanitizationServiceImpl.prototype = {$isSanitizationService: 1, $isDomSanitizationService: 1};
  R.SafeValueImpl.prototype = {$isSafeValue: 1};
  R.SafeHtmlImpl.prototype = {$isSafeHtml: 1};
  R.SafeStyleImpl.prototype = {$isSafeStyle: 1};
  R.SafeUrlImpl.prototype = {$isSafeUrl: 1};
  R.SafeResourceUrlImpl.prototype = {$isSafeResourceUrl: 1};
  U.JsTestability.prototype = {};
  U.JsTestabilityRegistry.prototype = {};
  K.star.prototype = {
    Render$1: function(ctx) {
      var t1, t2, t3, _this = this;
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
      t1 = _this.bloom;
      t2 = $.$get$star_rand().nextDouble$0();
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = _this.size;
      if (typeof t3 !== "number")
        return t3.$mul();
      t2 = H.numTypeCheck(P.min(t1 + (1 - t2 * 2) * 2, t3 * 10, P.num));
      _this.bloom = t2;
      if (typeof t2 !== "number")
        return H.iae(t2);
      ctx.shadowBlur = 5 + t2;
      (ctx && C.CanvasRenderingContext2D_methods).beginPath$0(ctx);
      t2 = _this.position;
      C.CanvasRenderingContext2D_methods.arc$5(ctx, t2.x, t2.y, t3, 0, 6.283185307179586);
      C.CanvasRenderingContext2D_methods.fill$0(ctx);
    }
  };
  K.Background.prototype = {
    Background$0: function() {
      var amount, i, t3, t4,
        t1 = W.window().innerHeight,
        t2 = W.window().innerWidth;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      amount = C.JSInt_methods._tdivFast$1(t1 + t2, 10);
      for (t1 = this.stars, t2 = J.getInterceptor$ax(t1), i = 0; i < amount; ++i) {
        t3 = V.Vector2_InRect(W.window().innerWidth, W.window().innerHeight);
        t4 = $.$get$star_rand().nextDouble$0();
        if (typeof t4 !== "number")
          return t4.$mul();
        t2.add$1(t1, K.star$(t3, t4 * 5));
      }
    },
    DrawMountains$4: function(ctx, height, amount, floor) {
      var t1, splitWidth, i, t2, t3;
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
      H.numTypeCheck(height);
      H.intTypeCheck(amount);
      H.numTypeCheck(floor);
      (ctx && C.CanvasRenderingContext2D_methods).beginPath$0(ctx);
      t1 = W.window().innerWidth;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof amount !== "number")
        return H.iae(amount);
      splitWidth = t1 / amount;
      for (t1 = splitWidth / 2, i = 0; i < amount;) {
        t2 = i * splitWidth;
        t3 = W.window().innerHeight;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof floor !== "number")
          return H.iae(floor);
        C.CanvasRenderingContext2D_methods.moveTo$2(ctx, t2, t3 - floor);
        t3 = W.window().innerHeight;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof height !== "number")
          return H.iae(height);
        C.CanvasRenderingContext2D_methods.lineTo$2(ctx, t2 + t1, t3 - floor - height);
        ++i;
        t3 = W.window().innerHeight;
        if (typeof t3 !== "number")
          return t3.$sub();
        C.CanvasRenderingContext2D_methods.lineTo$2(ctx, i * splitWidth, t3 - floor);
      }
      t1 = W.window().innerHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof floor !== "number")
        return H.iae(floor);
      C.CanvasRenderingContext2D_methods.lineTo$2(ctx, 0, t1 - floor);
      C.CanvasRenderingContext2D_methods.fill$0(ctx);
    },
    Render$1: function(ctx) {
      var t1, t2, gradient, _this = this;
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
      t1 = W.window().innerWidth;
      if (typeof t1 !== "number")
        return t1.$div();
      t2 = W.window().innerWidth;
      if (typeof t2 !== "number")
        return t2.$div();
      gradient = (ctx && C.CanvasRenderingContext2D_methods).createLinearGradient$4(ctx, t1 / 2, 0, t2 / 2, W.window().innerHeight);
      (gradient && C.CanvasGradient_methods).addColorStop$2(gradient, 0, "#222433");
      C.CanvasGradient_methods.addColorStop$2(gradient, 1, "#323959");
      ctx.fillStyle = gradient;
      C.CanvasRenderingContext2D_methods.fillRect$4(ctx, 0, 0, W.window().innerWidth, W.window().innerHeight);
      ctx.fillStyle = ctx.shadowColor = "#fff";
      J.forEach$1$ax(_this.stars, new K.Background_Render_closure(ctx));
      C.CanvasRenderingContext2D_methods.save$0(ctx);
      ctx.shadowBlur = 20;
      ctx.shadowColor = ctx.fillStyle = "#323959";
      t2 = W.window().innerHeight;
      if (typeof t2 !== "number")
        return t2.$mul();
      t1 = P.num;
      _this.DrawMountains$4(ctx, P.min(t2 * 0.7, 800, t1), 1, 100);
      ctx.shadowColor = ctx.fillStyle = "#353e6d";
      t2 = W.window().innerHeight;
      if (typeof t2 !== "number")
        return t2.$mul();
      _this.DrawMountains$4(ctx, P.min(t2 * 0.5, 500, t1), 2, 100);
      ctx.shadowColor = ctx.fillStyle = "#5661a0";
      t2 = W.window().innerHeight;
      if (typeof t2 !== "number")
        return t2.$mul();
      _this.DrawMountains$4(ctx, P.min(t2 * 0.3, 300, t1), 4, 100);
      ctx.shadowColor = ctx.fillStyle = "#7797d6";
      ctx.shadowBlur = 10;
      t1 = W.window().innerHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      C.CanvasRenderingContext2D_methods.fillRect$4(ctx, 0, t1 - 100, W.window().innerWidth, 100);
      C.CanvasRenderingContext2D_methods.restore$0(ctx);
    }
  };
  K.Background_Render_closure.prototype = {
    call$1: function(s) {
      H.interceptedTypeCheck(s, "$isstar").Render$1(this.ctx);
    },
    $signature: 63
  };
  U.Colors.prototype = {};
  G.CursorData.prototype = {};
  G.Event0.prototype = {
    toString$0: function(_) {
      return this._Game$_name;
    }
  };
  G._GameUpdateEventEmitter.prototype = {};
  G._GameUpdateEventEmitter_SetStream_closure0.prototype = {
    call$1: function(dynamic) {
      return this.t.call$0();
    },
    $signature: 8
  };
  G._GameUpdateEventEmitter_SetStream_closure.prototype = {
    call$1: function(s) {
      var t1 = this.e,
        t2 = J.getInterceptor$(t1);
      t1 = H.boolConversionCheck(t2.$eq(t1, C.Event_6)) || H.boolConversionCheck(t2.$eq(t1, C.Event_7)) || H.boolConversionCheck(t2.$eq(t1, C.Event_8)) || H.boolConversionCheck(t2.$eq(t1, C.Event_9)) || H.boolConversionCheck(t2.$eq(t1, C.Event_10));
      t2 = J.getInterceptor$x(s);
      if (t1)
        return t2.get$stream(s).listen$1(this.t);
      else
        return t2.get$stream(s).listen$1(this.f);
    },
    $signature: 8
  };
  G._GameUpdateEventEmitter_Emit_closure.prototype = {
    call$1: function(stream) {
      J.add$1$ax(stream, this.v);
    },
    $signature: 9
  };
  G.Game.prototype = {
    Game$2: function(canvas, guiCanvas) {
      var exception, _this = this;
      _this.context = H.interceptedTypeCheck(J.getContext$1$x(_this.canvas, "2d"), "$isCanvasRenderingContext2D");
      _this.guiContext = H.interceptedTypeCheck(J.getContext$1$x(_this.guiCanvas, "2d"), "$isCanvasRenderingContext2D");
      A.Input_Initialize();
      try {
        F.main();
      } catch (exception) {
        H.unwrapException(exception);
      }
      G.Game__Emit(C.Event_0, null);
      G.Game__Emit(C.Event_1, null);
      J.requestAnimationFrame$1$x(W.window(), _this.get$Main());
      _this.context.imageSmoothingEnabled = false;
      _this.guiContext.imageSmoothingEnabled = false;
    },
    Main$1: function(time) {
      var t1, _this = this, _null = null;
      N.Time_Update(H.numTypeCheck(time));
      t1 = _this.frame;
      if (typeof t1 !== "number")
        return t1.$add();
      _this.frame = H.intTypeCheck(t1 + 1);
      G.Game__Emit(C.Event_2, _null);
      G.Game__Emit(C.Event_3, _null);
      G.Game__Emit(C.Event_4, _null);
      G.Game__Emit(C.Event_5, _null);
      J.clearRect$4$x(_this.context, 0, 0, W.window().innerWidth, W.window().innerHeight);
      J.save$0$x(_this.context);
      G.Game__Emit(C.Event_6, _this.context);
      G.Game__Emit(C.Event_7, _this.context);
      G.Game__Emit(C.Event_8, _this.context);
      J.restore$0$x(_this.context);
      J.clearRect$4$x(_this.guiContext, 0, 0, W.window().innerWidth, W.window().innerHeight);
      J.save$0$x(_this.guiContext);
      G.Game__Emit(C.Event_9, _this.guiContext);
      J.restore$0$x(_this.guiContext);
      J.requestAnimationFrame$1$x(W.window(), _this.get$Main());
    }
  };
  N.GameObject.prototype = {
    GameObject$0: function() {
      var t1, _this = this;
      Y.Transform$(_this);
      if (_this.get$OnAwake() != null)
        _this._AwakeSubscription = H.interceptedTypeCheck(G.Game_OnAwake(H.interceptedTypeCheck(_this._Wrap$1(_this.get$OnAwake()), "$isFunction")), "$isStreamSubscription");
      t1 = _this.get$OnStart();
      if (t1 != null)
        _this._StartSubscription = H.interceptedTypeCheck(G.Game_OnStart(H.interceptedTypeCheck(_this._Wrap$1(t1), "$isFunction")), "$isStreamSubscription");
      t1 = _this.get$OnEarlyUpdate();
      if (t1 != null)
        _this._EarlyUpdateSubscription = H.interceptedTypeCheck(G.Game_OnEarlyUpdate(H.interceptedTypeCheck(_this._Wrap$1(t1), "$isFunction")), "$isStreamSubscription");
      t1 = _this.get$OnFixedUpdate();
      if (t1 != null)
        _this._FixedUpdateSubscription = H.interceptedTypeCheck(G.Game_OnFixedUpdate(H.interceptedTypeCheck(_this._Wrap$1(t1), "$isFunction")), "$isStreamSubscription");
      if (_this.get$OnUpdate() != null)
        _this._UpdateSubscription = H.interceptedTypeCheck(G.Game_OnUpdate(H.interceptedTypeCheck(_this._Wrap$1(_this.get$OnUpdate()), "$isFunction")), "$isStreamSubscription");
      if (_this.get$OnLateUpdate() != null)
        _this._LateUpdateSubscription = H.interceptedTypeCheck(G.Game_OnLateUpdate(H.interceptedTypeCheck(_this._Wrap$1(_this.get$OnLateUpdate()), "$isFunction")), "$isStreamSubscription");
      t1 = _this.get$OnEarlyRender();
      if (t1 != null)
        _this._EarlyRenderSubscription = H.interceptedTypeCheck(G.Game_OnEarlyRender(H.functionTypeCheck(_this._Wrap$1(t1), {func: 1, args: [W.CanvasRenderingContext2D]})), "$isStreamSubscription");
      if (_this.get$OnRender() != null)
        _this._RenderSubscription = H.interceptedTypeCheck(G.Game_OnRender(H.functionTypeCheck(_this._Wrap$1(_this.get$OnRender()), {func: 1, args: [W.CanvasRenderingContext2D]})), "$isStreamSubscription");
      t1 = _this.get$OnLateRender();
      if (t1 != null)
        _this._LateRenderSubscription = H.interceptedTypeCheck(G.Game_OnLateRender(H.functionTypeCheck(_this._Wrap$1(t1), {func: 1, args: [W.CanvasRenderingContext2D]})), "$isStreamSubscription");
      t1 = _this.get$OnGUI();
      if (t1 != null)
        _this._GUISubscription = H.interceptedTypeCheck(G.Game_OnGUI(H.functionTypeCheck(_this._Wrap$1(t1), {func: 1, args: [W.CanvasRenderingContext2D]})), "$isStreamSubscription");
      t1 = _this.get$OnQuit();
      if (t1 != null)
        _this._QuitSubscription = H.interceptedTypeCheck(G.Game_OnQuit(H.functionTypeCheck(_this._Wrap$1(t1), {func: 1, args: [W.CanvasRenderingContext2D]})), "$isStreamSubscription");
    },
    _Wrap$1: function(func) {
      return new N.GameObject__Wrap_closure(this, func);
    },
    OnAwake$0: function() {
    },
    OnStart$0: function() {
    },
    OnEarlyUpdate$0: function() {
    },
    OnFixedUpdate$0: function() {
    },
    OnUpdate$0: function() {
    },
    OnLateUpdate$0: function() {
    },
    OnEarlyRender$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
    },
    OnRender$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
    },
    OnLateRender$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
    },
    OnGUI$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
    },
    OnQuit$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      return;
    }
  };
  N.GameObject__Wrap_closure.prototype = {
    call$1: function(v) {
      var identifier, t1, exception;
      try {
        this.$this.toString;
        t1 = this.func;
        if (v == null)
          t1.call$0();
        else
          t1.call$1(v);
      } catch (exception) {
        identifier = H.unwrapException(exception);
        N.GameObject_destroy(this.$this);
        throw H.wrapException(identifier);
      }
    },
    call$0: function() {
      return this.call$1(null);
    },
    "call*": "call$1",
    $requiredArgCount: 0,
    $defaultValues: function() {
      return [null];
    },
    $signature: 84
  };
  A.CursorType.prototype = {};
  A._Cursor.prototype = {};
  A.Mouse.prototype = {};
  A.Mouse_Create_closure.prototype = {
    call$1: function(data) {
      return A.Mouse__UpdateMouseButtons(false, H.interceptedTypeCheck(data, "$isMouseEvent"));
    },
    $signature: 18
  };
  A.Mouse_Create_closure0.prototype = {
    call$1: function(data) {
      return A.Mouse__UpdateMouseButtons(true, H.interceptedTypeCheck(data, "$isMouseEvent"));
    },
    $signature: 18
  };
  A.Keyboard.prototype = {
    keyCallback$2: function(state, evt) {
      var t1, t2;
      H.intTypeCheck(state);
      H.interceptedTypeCheck(evt, "$isKeyboardEvent");
      t1 = this._Input$_data;
      t2 = J.getInterceptor$asx(t1);
      if (H.boolConversionCheck(t2.$index(t1, evt.keyCode)) && state === 0)
        J.$indexSet$ax(this.released, evt.keyCode, true);
      else if (!H.boolConversionCheck(t2.$index(t1, evt.keyCode)) && state === 1)
        J.$indexSet$ax(this.pressed, evt.keyCode, true);
      t2.$indexSet(t1, evt.keyCode, state !== 0);
      evt.altKey;
    },
    OnLateUpdate$0: function() {
      if ($.Keyboard_Instance == null)
        return;
      var t1 = P.bool;
      this.set$pressed(0, P.List_List$filled(256, false, t1));
      this.set$released(P.List_List$filled(256, false, t1));
    },
    set$pressed: function(_, pressed) {
      this.pressed = H.assertSubtype(pressed, "$isList", [P.bool], "$asList");
    },
    set$released: function(released) {
      this.released = H.assertSubtype(released, "$isList", [P.bool], "$asList");
    }
  };
  A.Keyboard_CreateKeyboard_closure.prototype = {
    call$1: function(evt) {
      H.interceptedTypeCheck(evt, "$isKeyboardEvent");
      return $.Keyboard_Instance.get$keyCallback().call$2(0, evt);
    },
    $signature: 19
  };
  A.Keyboard_CreateKeyboard_closure0.prototype = {
    call$1: function(evt) {
      H.interceptedTypeCheck(evt, "$isKeyboardEvent");
      return $.Keyboard_Instance.get$keyCallback().call$2(1, evt);
    },
    $signature: 19
  };
  A.Keyboard_CreateKeyboard_closure1.prototype = {
    call$1: function(evt) {
      H.interceptedTypeCheck(evt, "$isKeyboardEvent");
      return $.Keyboard_Instance.get$keyCallback().call$2(2, evt);
    },
    $signature: 19
  };
  A.Input.prototype = {
    Input$_$0: function() {
      H.interceptedTypeCheck(A.Mouse_Create(), "$isMouse");
      this.keyboard = H.interceptedTypeCheck(A.Keyboard_CreateKeyboard(), "$isKeyboard");
      G.Game_OnEarlyUpdate(A.Input_Input__UpdateData$closure());
    }
  };
  A.MouseButton.prototype = {};
  A.KeyCode0.prototype = {
    toString$0: function(_) {
      return this._Input$_name;
    }
  };
  N.Time.prototype = {};
  Y.Transform0.prototype = {};
  V.Vector2.prototype = {
    Vector2$2: function(x, y) {
      var t1, t2, t3, _this = this;
      if (y == null) {
        if (typeof x === "number") {
          _this.y = _this.x = H.doubleTypeCheck(C.JSNumber_methods.toDouble$0(x));
          return;
        } else if (x instanceof V.Vector2) {
          _this.x = H.doubleTypeCheck(x.x);
          _this.y = H.doubleTypeCheck(x.y);
          return;
        } else if (x == null)
          _this.x = _this.y = H.doubleTypeCheck(C.JSInt_methods.toDouble$0(0));
      } else {
        t1 = typeof x === "number" && typeof y === "number";
        t2 = J.getInterceptor$(x);
        t3 = J.getInterceptor$(y);
        if (t1) {
          _this.x = H.doubleTypeCheck(t2.toDouble$0(x));
          _this.y = H.doubleTypeCheck(t3.toDouble$0(y));
          return;
        } else
          throw H.wrapException("Undefined Constructor Arguments (" + H.S(t2.get$runtimeType(x)) + ", " + H.S(t3.get$runtimeType(y)) + ")");
      }
    },
    Vector2$fromPoint$1: function(p) {
      this.x = H.doubleTypeCheck(p.x);
      this.y = H.doubleTypeCheck(p.y);
    },
    $mul: function(_, other) {
      var t2, t3, t4, _this = this,
        t1 = J.getInterceptor$(other);
      if (!!t1.$isVector2) {
        t1 = _this.x;
        t2 = other.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this.y;
        t4 = other.y;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        return V.Vector2$(t1 * t2, t3 * t4);
      }
      if (typeof other === "number") {
        t1 = _this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = _this.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        return V.Vector2$(t1 * other, t2 * other);
      }
      throw H.wrapException("Cannot Multiply Vector3 with " + H.S(t1.get$runtimeType(other)));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isVector2");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return V.Vector2$(t1 + t2, t3 + t4);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isVector2");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return V.Vector2$(t1 - t2, t3 - t4);
    },
    $eq: function(_, other) {
      H.interceptedTypeCheck(other, "$isVector2");
      if (other == null)
        return false;
      return H.boolConversionCheck(J.$eq$(this.x, other.x)) && H.boolConversionCheck(J.$eq$(this.y, other.y));
    },
    $negate: function(_) {
      var _this = this;
      _this.x = H.doubleTypeCheck(J.$negate$in(_this.x));
      _this.y = H.doubleTypeCheck(J.$negate$in(_this.y));
      return _this;
    },
    toString$0: function(_) {
      return "Vector2(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    }
  };
  V.Vector3.prototype = {};
  V.Vector4.prototype = {};
  M.Particle.prototype = {
    get$opacity: function(_) {
      var t1 = this.lifetime,
        t2 = this._startLifetime;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 / t2;
    },
    Particle$4$lifetime$position$size$velocity: function(lifetime, position, size, velocity) {
      this._startLifetime = H.doubleTypeCheck(this.lifetime);
    }
  };
  M.Particles.prototype = {
    Spawn$2: function(position, amount) {
      var t1, t2, t3, i, t4, t5, t6;
      H.interceptedTypeCheck(position, "$isVector2");
      H.intTypeCheck(amount);
      if (typeof amount !== "number")
        return H.iae(amount);
      t1 = this.active;
      t2 = this.rand;
      t3 = J.getInterceptor$ax(t1);
      i = 0;
      for (; i < amount; ++i) {
        t4 = t2.nextDouble$0();
        if (typeof t4 !== "number")
          return t4.$mul();
        t5 = t2.nextDouble$0();
        if (typeof t5 !== "number")
          return t5.$mul();
        t6 = t2.nextDouble$0();
        if (typeof t6 !== "number")
          return H.iae(t6);
        t3.add$1(t1, M.Particle$(t4 * 4, position, V.Vector2$((1 - t5 * 1.5) * 2, -3.5 + t6).$mul(0, 100)));
      }
    },
    Update$0: function() {
      var tbd, ext, exception;
      try {
        tbd = H.setRuntimeTypeInfo([], [M.Particle]);
        J.forEach$1$ax(this.active, new M.Particles_Update_closure(tbd));
        J.forEach$1$ax(tbd, new M.Particles_Update_closure0(this));
      } catch (exception) {
        ext = H.unwrapException(exception);
        P.print(ext);
      }
    },
    Render$1: function(ctx) {
      J.forEach$1$ax(this.active, new M.Particles_Render_closure(H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D")));
    }
  };
  M.Particles_Update_closure.prototype = {
    call$1: function(p) {
      var t1, t2, t3;
      H.interceptedTypeCheck(p, "$isParticle");
      t1 = p.velocity;
      t2 = t1.y;
      t3 = N.Time_DeltaTime();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return t2.$add();
      t1.y = t2 + 980 * t3;
      t3 = p;
      t3.position = H.interceptedTypeCheck(J.$add$ansx(t3.position, J.$mul$ns(p.velocity, N.Time_DeltaTime())), "$isVector2");
      t1 = p.position.y;
      t2 = W.window().innerHeight;
      if (typeof t2 !== "number")
        return t2.$sub();
      p.toString;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > t2 - 100 - 5) {
        t1 = p.position;
        t2 = W.window().innerHeight;
        if (typeof t2 !== "number")
          return t2.$sub();
        p.toString;
        t1.y = t2 - 100 - 5;
        t2 = p;
        t2.velocity = H.interceptedTypeCheck(J.$mul$ns(t2.velocity, J.$add$ansx(J.$negate$in(V.Vector2_up()), V.Vector2_right())), "$isVector2");
      }
      t1 = p;
      t2 = t1.lifetime;
      t3 = N.Time_DeltaTime();
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.lifetime = t2 - t3;
      t1 = p.lifetime;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 0)
        J.add$1$ax(this.tbd, p);
    },
    $signature: 20
  };
  M.Particles_Update_closure0.prototype = {
    call$1: function(p) {
      H.interceptedTypeCheck(p, "$isParticle");
      J.remove$1$ax(this.$this.active, p);
    },
    $signature: 20
  };
  M.Particles_Render_closure.prototype = {
    call$1: function(p) {
      var t1, t2, t3;
      H.interceptedTypeCheck(p, "$isParticle");
      t1 = this.ctx;
      t1.fillStyle = "rgba(255, 255, 255, " + H.S(p.get$opacity(p)) + ")";
      t2 = J.getInterceptor$x(t1);
      t2.beginPath$0(t1);
      t3 = p.position;
      t2.arc$5(t1, t3.x, t3.y, 5, 0, 6.283185307179586);
      t2.fill$0(t1);
    },
    $signature: 20
  };
  Y.Scene.prototype = {
    OnAwake$0: function() {
      this.SpawnStar$0();
    },
    SpawnStar$0: function() {
      var t2, t3, offset,
        star = Q.Star$(),
        t1 = this.rand;
      star.position = H.interceptedTypeCheck(V.Vector2$(t1.nextDouble$0(), -100).$mul(0, V.Vector2$(W.window().innerWidth, 1)), "$isVector2");
      t2 = W.window().innerWidth;
      if (typeof t2 !== "number")
        return t2.$div();
      t3 = star.position.x;
      if (typeof t3 !== "number")
        return H.iae(t3);
      offset = t2 / 2 - t3;
      t3 = W.window().innerWidth;
      if (typeof t3 !== "number")
        return H.iae(t3);
      P.print(offset / t3);
      t3 = t1.nextDouble$0();
      if (typeof t3 !== "number")
        return t3.$mul();
      t2 = W.window().innerWidth;
      if (typeof t2 !== "number")
        return t2.$div();
      star.velocity = V.Vector2$(t3 * 2 + -1 + offset / (t2 / 2), 1);
      J.add$1$ax(this.stars, star);
      t1 = t1.nextInt$1(3);
      if (typeof t1 !== "number")
        return H.iae(t1);
      P.Timer_Timer(P.Duration$(1 + t1), this.get$SpawnStar());
    },
    OnUpdate$0: function() {
      var _this = this,
        tbd = H.setRuntimeTypeInfo([], [Q.Star]);
      J.forEach$1$ax(_this.stars, new Y.Scene_OnUpdate_closure(_this, tbd));
      C.JSArray_methods.forEach$1(tbd, new Y.Scene_OnUpdate_closure0(_this));
      _this.particles.Update$0();
    },
    OnRender$1: function(ctx) {
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
      this.background.Render$1(ctx);
      (ctx && C.CanvasRenderingContext2D_methods).save$0(ctx);
      ctx.fillStyle = ctx.shadowColor = "#fff";
      ctx.shadowBlur = 10;
      J.forEach$1$ax(this.stars, new Y.Scene_OnRender_closure(ctx));
      this.particles.Render$1(ctx);
      C.CanvasRenderingContext2D_methods.restore$0(ctx);
    }
  };
  Y.Scene_OnUpdate_closure.prototype = {
    call$1: function(f) {
      var todo, t1, t2, t3;
      H.interceptedTypeCheck(f, "$isStar");
      todo = f.Update$0();
      if (todo === 2)
        J.add$1$ax(this.tbd, f);
      if (todo === 1) {
        t1 = this.$this;
        t2 = t1.particles;
        t3 = f.position;
        t1 = t1.rand.nextInt$1(4);
        if (typeof t1 !== "number")
          return t1.$add();
        t2.Spawn$2(t3, t1 + 8);
      }
    },
    $signature: 21
  };
  Y.Scene_OnUpdate_closure0.prototype = {
    call$1: function(f) {
      H.interceptedTypeCheck(f, "$isStar");
      J.remove$1$ax(this.$this.stars, f);
    },
    $signature: 21
  };
  Y.Scene_OnRender_closure.prototype = {
    call$1: function(f) {
      H.interceptedTypeCheck(f, "$isStar").Render$1(this.ctx);
    },
    $signature: 21
  };
  Q.Star.prototype = {
    Update$0: function() {
      var code, _this = this,
        t1 = _this.velocity,
        t2 = t1.y,
        t3 = N.Time_DeltaTime();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return t2.$add();
      t1.y = t2 + 9.8 * t3;
      t1 = _this.position.y;
      t2 = W.window().innerHeight;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = _this.size;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > t2 - 100 - t3) {
        t1 = _this.position;
        t2 = W.window().innerHeight;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = _this.size;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t1.y = H.doubleTypeCheck(C.JSNumber_methods.toDouble$0(t2 - 100 - t3));
        t3 = _this.velocity;
        t2 = t3.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        t3.y = -(t2 * 0.6);
        t2 = _this.size;
        if (typeof t2 !== "number")
          return t2.$sub();
        _this.size = t2 - 9;
        code = 1;
      } else
        code = 0;
      _this.position = H.interceptedTypeCheck(J.$add$ansx(_this.position, J.$mul$ns(J.$mul$ns(_this.velocity, 200), N.Time_DeltaTime())), "$isVector2");
      t1 = _this.size;
      if (typeof t1 !== "number")
        return t1.$le();
      return t1 <= 0 ? 2 : code;
    },
    Render$1: function(ctx) {
      var t1;
      H.interceptedTypeCheck(ctx, "$isCanvasRenderingContext2D");
      (ctx && C.CanvasRenderingContext2D_methods).beginPath$0(ctx);
      t1 = this.position;
      C.CanvasRenderingContext2D_methods.arc$5(ctx, t1.x, t1.y, this.size, 0, 6.283185307179586);
      C.CanvasRenderingContext2D_methods.fill$0(ctx);
    }
  };
  Q.AppComponent.prototype = {
    ngOnInit$0: function() {
      var t1, t2, _this = this;
      _this.canvas = H.interceptedTypeCheck(W.querySelector("#GameCanvas"), "$isCanvasElement");
      t1 = H.interceptedTypeCheck(W.querySelector("#GuiCanvas"), "$isCanvasElement");
      _this.guiCanvas = t1;
      t2 = _this.canvas;
      if (t2 == null || t1 == null)
        throw H.wrapException("Canvas Could not be Found");
      t1.width = t2.width = W.window().innerWidth;
      _this.guiCanvas.height = _this.canvas.height = W.window().innerHeight;
      J.get$onResize$x(W.window()).listen$1(new Q.AppComponent_ngOnInit_closure(_this));
      G.Game$(_this.canvas, _this.guiCanvas);
    },
    $isOnInit: 1
  };
  Q.AppComponent_ngOnInit_closure.prototype = {
    call$1: function($Event) {
      var t1;
      H.interceptedTypeCheck($Event, "$isEvent");
      t1 = this.$this;
      t1.guiCanvas.width = t1.canvas.width = W.window().innerWidth;
      t1.guiCanvas.height = t1.canvas.height = W.window().innerHeight;
    },
    $signature: 28
  };
  V.ViewAppComponent0.prototype = {
    ViewAppComponent0$2: function(parentView, parentIndex) {
      this.initComponentStyles$0();
      this.rootElement = H.interceptedTypeCheck(J.createElement$1$x(W.document(), "my-app"), "$isHtmlElement");
    },
    build$0: function() {
      var _el_1, _this = this,
        parentRenderNode = _this.initViewRoot$0(),
        doc = W.document(),
        t1 = H.interceptedTypeCheck(T.appendElement(doc, parentRenderNode, "canvas"), "$isCanvasElement");
      _this._el_0 = t1;
      T.setAttribute(t1, "id", "GameCanvas");
      _this.addShimC$1(_this._el_0);
      _el_1 = T.appendElement(doc, parentRenderNode, "canvas");
      T.setAttribute(_el_1, "id", "GuiCanvas");
      _this.addShimC$1(H.interceptedTypeCheck(_el_1, "$isHtmlElement"));
    },
    detectChangesInternal$0: function() {
      if (H.boolConversionCheck(this.get$firstCheck())) {
        var t1 = this._el_0.style;
        (t1 && C.CssStyleDeclaration_methods).setProperty$2(t1, "background-color", "#3f5f87");
      }
    },
    initComponentStyles$0: function() {
      var styles = $.ViewAppComponent0__componentStyles;
      this.componentStyles = styles == null ? $.ViewAppComponent0__componentStyles = O.ComponentStyles_ComponentStyles$scoped($.styles$AppComponent, V.ViewAppComponent0__debugComponentUrl()) : styles;
    },
    $asComponentView: function() {
      return [Q.AppComponent];
    }
  };
  V._ViewAppComponentHost0.prototype = {
    build$0: function() {
      var _el_0, _this = this;
      _this.set$componentView(V.ViewAppComponent0$(_this, 0));
      _el_0 = _this.componentView.rootElement;
      _this.set$component(Q.AppComponent$());
      _this.initRootNode$1(_el_0);
    },
    detectChangesInternal$0: function() {
      var firstCheck = this.get$firstCheck();
      if (!H.boolConversionCheck(U.debugThrowIfChanged()) && H.boolConversionCheck(firstCheck))
        this.component.ngOnInit$0();
      this.componentView.detectChanges$0();
    },
    $asHostView: function() {
      return [Q.AppComponent];
    }
  };
  M.CanonicalizedMap.prototype = {$isMap: 1,
    $asMap: function($C, $K, $V) {
      return [$K, $V];
    }
  };
  S.CombinedIterableView.prototype = {};
  S._CombinedIterator.prototype = {$isIterator: 1};
  B.CombinedListView.prototype = {$isUnmodifiableListMixin: 1, $isUnmodifiableListBase: 1, $isUnmodifiableListView: 1};
  L.CombinedMapView.prototype = {};
  L._DeduplicatingIterableView.prototype = {};
  L._DeduplicatingIterator.prototype = {$isIterator: 1};
  O.EmptyUnmodifiableSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetView: 1, $isUnmodifiableSetMixin: 1, $is_DelegatingIterableBase: 1, $isDelegatingIterable: 1, $isDelegatingSet: 1, $is_UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin: 1};
  U.Equality.prototype = {};
  U.EqualityBy.prototype = {$isEquality: 1,
    $asEquality: function($E, $F) {
      return [$E];
    }
  };
  U.DefaultEquality.prototype = {$isEquality: 1};
  U.IdentityEquality.prototype = {$isEquality: 1};
  U.IterableEquality.prototype = {$isEquality: 1,
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    }
  };
  U.ListEquality.prototype = {$isEquality: 1,
    $asEquality: function($E) {
      return [[P.List, $E]];
    }
  };
  U._UnorderedEquality.prototype = {$isEquality: 1,
    $asEquality: function($E, $T) {
      return [$T];
    }
  };
  U.UnorderedIterableEquality.prototype = {
    $asEquality: function($E) {
      return [[P.Iterable, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Iterable, $E]];
    }
  };
  U.SetEquality.prototype = {
    $asEquality: function($E) {
      return [[P.Set, $E]];
    },
    $as_UnorderedEquality: function($E) {
      return [$E, [P.Set, $E]];
    }
  };
  U._MapEntry.prototype = {};
  U.MapEquality.prototype = {$isEquality: 1,
    $asEquality: function($K, $V) {
      return [[P.Map, $K, $V]];
    }
  };
  U.MultiEquality.prototype = {$isEquality: 1};
  U.DeepCollectionEquality.prototype = {$isEquality: 1,
    $asEquality: function() {
    }
  };
  U.CaseInsensitiveEquality.prototype = {$isEquality: 1,
    $asEquality: function() {
      return [P.String];
    }
  };
  N.EqualityMap.prototype = {};
  E.EqualitySet.prototype = {};
  A.IterableZip.prototype = {
    $asIterableBase: function($T) {
      return [[P.List, $T]];
    },
    $asIterable: function($T) {
      return [[P.List, $T]];
    }
  };
  A._IteratorZip.prototype = {$isIterator: 1,
    $asIterator: function($T) {
      return [[P.List, $T]];
    }
  };
  Y.PriorityQueue.prototype = {};
  Y.HeapPriorityQueue.prototype = {$isPriorityQueue: 1};
  Q.QueueList.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isQueue: 1, $isIterable: 1, $isList: 1};
  Q._CastQueueList.prototype = {
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $asQueue: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $asList: function($S, $T) {
      return [$T];
    },
    $asQueueList: function($S, $T) {
      return [$T];
    },
    $as_QueueList_Object_ListMixin: function($S, $T) {
      return [$T];
    }
  };
  Q._QueueList_Object_ListMixin.prototype = {$isEfficientLengthIterable: 1, $isListMixin: 1, $isIterable: 1, $isList: 1};
  M.UnionSet.prototype = {$isUnmodifiableSetMixin: 1};
  M._UnionSet_SetBase_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  Y.UnionSetController.prototype = {};
  L.NonGrowableListView.prototype = {$isNonGrowableListMixin: 1};
  L.NonGrowableListMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  L.UnmodifiableSetView.prototype = {$isUnmodifiableSetMixin: 1};
  L.UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  L.UnmodifiableMapMixin.prototype = {$isMap: 1};
  L._NonGrowableListView_DelegatingList_NonGrowableListMixin.prototype = {$isNonGrowableListMixin: 1};
  L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin.prototype = {$isUnmodifiableSetMixin: 1};
  B.Pair.prototype = {};
  M._DelegatingIterableBase.prototype = {$isIterable: 1};
  M.DelegatingIterable.prototype = {};
  M.DelegatingList.prototype = {$isEfficientLengthIterable: 1, $isList: 1};
  M.DelegatingSet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1};
  M.DelegatingQueue.prototype = {$isEfficientLengthIterable: 1, $isQueue: 1};
  M.DelegatingMap.prototype = {$isMap: 1};
  M.MapKeySet.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  M.MapValueSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isSet: 1,
    $asSet: function($K, $V) {
      return [$V];
    },
    $as_DelegatingIterableBase: function($K, $V) {
      return [$V];
    }
  };
  M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin.prototype = {$isEfficientLengthIterable: 1, $isSet: 1, $isUnmodifiableSetMixin: 1};
  B.DateSymbols.prototype = {};
  T.Intl.prototype = {};
  T.BidiFormatter.prototype = {};
  T.TextDirection.prototype = {};
  T.Bidi.prototype = {};
  T._CompactStyleBase.prototype = {};
  T._CompactStyleWithNegative.prototype = {};
  T._CompactStyle.prototype = {};
  T._CompactFormatType.prototype = {};
  T._CompactNumberFormat.prototype = {};
  T.DateFormat.prototype = {};
  T._DateFormatField.prototype = {};
  T._DateFormatLiteralField.prototype = {};
  T._DateFormatQuotedField.prototype = {};
  T._LoosePatternField.prototype = {};
  T._DateFormatPatternField.prototype = {};
  T._DateBuilder.prototype = {};
  T._Stream.prototype = {};
  T.NumberFormat.prototype = {};
  T._NumberParser.prototype = {};
  T._NumberFormatParser.prototype = {};
  T._StringIterable.prototype = {
    $asIterableBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  T._StringIterator.prototype = {$isIterator: 1,
    $asIterator: function() {
      return [P.String];
    }
  };
  T.MicroMoney.prototype = {};
  T._MicroMoney.prototype = {$isMicroMoney: 1};
  B.NumberSymbols.prototype = {};
  B.CompactNumberSymbols.prototype = {};
  X.UninitializedLocaleData.prototype = {$isMessageLookup: 1};
  X.MessageLookup.prototype = {};
  X.LocaleDataException.prototype = {$isException: 1};
  X.LocaleDataReader.prototype = {};
  E.PluralCase.prototype = {};
  Q.JS.prototype = {};
  Q._Anonymous.prototype = {};
  Y.Level.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [Y.Level];
    }
  };
  L.LogRecord.prototype = {};
  F.Logger.prototype = {};
  R._NoInline.prototype = {};
  R._TryInline.prototype = {};
  Q.Immutable.prototype = {};
  Q.Required.prototype = {};
  Q._AlwaysThrows.prototype = {};
  Q._Checked.prototype = {};
  Q._Experimental.prototype = {};
  Q._Factory.prototype = {};
  Q._IsTest.prototype = {};
  Q._IsTestGroup.prototype = {};
  Q._Literal.prototype = {};
  Q._MustCallSuper.prototype = {};
  Q._NonVirtual.prototype = {};
  Q._OptionalTypeArgs.prototype = {};
  Q._Protected.prototype = {};
  Q._Sealed.prototype = {};
  Q._Virtual.prototype = {};
  Q._VisibleForOverriding.prototype = {};
  Q._VisibleForTesting.prototype = {};
  M.Context.prototype = {
    get$current: function(_) {
      var t1 = this._context$_current;
      return t1 != null ? t1 : D.current();
    },
    get$separator: function() {
      return this.style.get$separator();
    },
    absolute$7: function(_, part1, part2, part3, part4, part5, part6, part7) {
      var _this = this;
      H.stringTypeCheck(part1);
      H.stringTypeCheck(part2);
      H.stringTypeCheck(part3);
      H.stringTypeCheck(part4);
      H.stringTypeCheck(part5);
      H.stringTypeCheck(part6);
      H.stringTypeCheck(part7);
      M._validateArgList("absolute", H.setRuntimeTypeInfo([part1, part2, part3, part4, part5, part6, part7], [P.String]));
      if (part2 == null && H.boolConversionCheck(_this.isAbsolute$1(part1)) && !H.boolConversionCheck(_this.isRootRelative$1(part1)))
        return part1;
      return _this.join$8(0, _this.get$current(_this), part1, part2, part3, part4, part5, part6, part7);
    },
    absolute$1: function($receiver, part1) {
      return this.absolute$7($receiver, part1, null, null, null, null, null, null);
    },
    isAbsolute$1: function(path) {
      var t1 = this.style.rootLength$1(H.stringTypeCheck(path));
      if (typeof t1 !== "number")
        return t1.$gt();
      return t1 > 0;
    },
    isRelative$1: function(path) {
      return !H.boolConversionCheck(this.isAbsolute$1(H.stringTypeCheck(path)));
    },
    isRootRelative$1: function(path) {
      return this.style.isRootRelative$1(H.stringTypeCheck(path));
    },
    join$8: function(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H.setRuntimeTypeInfo([H.stringTypeCheck(part1), H.stringTypeCheck(part2), H.stringTypeCheck(part3), H.stringTypeCheck(part4), H.stringTypeCheck(part5), H.stringTypeCheck(part6), H.stringTypeCheck(part7), H.stringTypeCheck(part8)], [P.String]);
      M._validateArgList("join", parts);
      return this.joinAll$1(C.JSArray_methods.where$1(parts, new M.Context_join_closure()));
    },
    join$2: function($receiver, part1, part2) {
      return this.join$8($receiver, part1, part2, null, null, null, null, null, null);
    },
    joinAll$1: function(parts) {
      var buffer, t1, t2, needsSeparator, isAbsoluteAndNotRootRelative, t3, parsed, path, t4, _this = this;
      H.assertSubtype(parts, "$isIterable", [P.String], "$asIterable");
      buffer = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.where$1$ax(parts, new M.Context_joinAll_closure())), t2 = _this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false; H.boolConversionCheck(t1.moveNext$0());) {
        t3 = J.get$current$z(t1);
        if (H.boolConversionCheck(_this.isRootRelative$1(t3)) && isAbsoluteAndNotRootRelative) {
          parsed = _this._parse$1(t3);
          path = buffer.toString$0(0);
          t4 = H.stringTypeCheck(J.substring$2$s(path, 0, t2.rootLength$2$withDrive(path, true)));
          parsed.root = t4;
          if (H.boolConversionCheck(t2.needsSeparator$1(t4)))
            J.$indexSet$ax(parsed.separators, 0, t2.get$separator());
          buffer.clear$0(0);
          buffer.write$1(0, J.toString$0$(parsed));
        } else if (H.boolConversionCheck(_this.isAbsolute$1(t3))) {
          isAbsoluteAndNotRootRelative = !H.boolConversionCheck(_this.isRootRelative$1(t3));
          buffer.clear$0(0);
          buffer.write$1(0, t3);
        } else {
          if (H.boolConversionCheck(J.get$isNotEmpty$asx(t3))) {
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            t4 = H.boolConversionCheck(t2.containsSeparator$1(t3[0]));
          } else
            t4 = false;
          if (!t4)
            if (H.boolConversionCheck(needsSeparator))
              buffer.write$1(0, _this.get$separator());
          buffer.write$1(0, t3);
        }
        needsSeparator = t2.needsSeparator$1(t3);
      }
      return buffer.toString$0(0);
    },
    split$1: function(_, path) {
      var t1,
        parsed = this._parse$1(H.stringTypeCheck(path));
      parsed.set$parts(J.toList$0$ax(J.where$1$ax(parsed.parts, new M.Context_split_closure())));
      t1 = parsed.root;
      if (t1 != null)
        J.insert$2$ax(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1: function(_, path) {
      var parsed;
      H.stringTypeCheck(path);
      if (!H.boolConversionCheck(this._needsNormalization$1(path)))
        return path;
      parsed = this._parse$1(path);
      parsed.normalize$0(0);
      return parsed.toString$0(0);
    },
    _needsNormalization$1: function(path) {
      var codeUnits, t1, root, t2, i, start, previous, t3, previousPrevious, t4, codeUnit;
      H.stringTypeCheck(path);
      codeUnits = J.get$codeUnits$s(path);
      t1 = this.style;
      root = t1.rootLength$1(path);
      if (root !== 0) {
        if (H.boolConversionCheck(J.$eq$(t1, $.$get$Style_windows()))) {
          if (typeof root !== "number")
            return H.iae(root);
          t2 = J.getInterceptor$asx(codeUnits);
          i = 0;
          for (; i < root; ++i)
            if (H.boolConversionCheck(J.$eq$(t2.$index(codeUnits, i), 47)))
              return true;
        }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      t2 = J.getInterceptor$asx(codeUnits);
      t3 = J.getInterceptor$(t1);
      i = start;
      previousPrevious = null;
      while (true) {
        t4 = t2.get$length(codeUnits);
        if (typeof i !== "number")
          return i.$lt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        codeUnit = t2.$index(codeUnits, i);
        if (H.boolConversionCheck(t1.isSeparator$1(codeUnit))) {
          if (H.boolConversionCheck(t3.$eq(t1, $.$get$Style_windows())) && codeUnit === 47)
            return true;
          if (previous != null && H.boolConversionCheck(t1.isSeparator$1(previous)))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || H.boolConversionCheck(t1.isSeparator$1(previousPrevious));
          else
            t4 = false;
          if (t4)
            return true;
        }
        ++i;
        previousPrevious = previous;
        previous = codeUnit;
      }
      if (previous == null)
        return true;
      if (H.boolConversionCheck(t1.isSeparator$1(previous)))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || H.boolConversionCheck(t1.isSeparator$1(previousPrevious)) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1: function(path) {
      var t1, from, fromParsed, pathParsed, t2, t3, _this = this,
        _s26_ = 'Unable to find a path to "';
      H.stringTypeCheck(path);
      t1 = H.boolConversionCheck(_this.isRelative$1(path));
      if (t1)
        return _this.normalize$1(0, path);
      from = _this.get$current(_this);
      if (H.boolConversionCheck(_this.isRelative$1(from)) && H.boolConversionCheck(_this.isAbsolute$1(path)))
        return _this.normalize$1(0, path);
      if (H.boolConversionCheck(_this.isRelative$1(path)) || H.boolConversionCheck(_this.isRootRelative$1(path)))
        path = _this.absolute$1(0, path);
      if (H.boolConversionCheck(_this.isRelative$1(path)) && H.boolConversionCheck(_this.isAbsolute$1(from)))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      fromParsed = _this._parse$1(from);
      J.normalize$0$z(fromParsed);
      pathParsed = _this._parse$1(path);
      t1 = J.getInterceptor$z(pathParsed);
      t1.normalize$0(pathParsed);
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && H.boolConversionCheck(J.$eq$(J.$index$asx(fromParsed.parts, 0), ".")))
        return t1.toString$0(pathParsed);
      if (!H.boolConversionCheck(J.$eq$(fromParsed.root, pathParsed.root))) {
        t2 = fromParsed.root;
        if (t2 != null) {
          t3 = pathParsed.root;
          t2 = t3 == null || !H.boolConversionCheck(_this.style.pathsEqual$2(t2, t3));
        } else
          t2 = true;
      } else
        t2 = false;
      if (t2)
        return t1.toString$0(pathParsed);
      t2 = _this.style;
      while (true) {
        if (!(H.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && H.boolConversionCheck(J.get$isNotEmpty$asx(pathParsed.parts)) && H.boolConversionCheck(t2.pathsEqual$2(J.$index$asx(fromParsed.parts, 0), J.$index$asx(pathParsed.parts, 0)))))
          break;
        J.removeAt$1$ax(fromParsed.parts, 0);
        J.removeAt$1$ax(fromParsed.separators, 1);
        J.removeAt$1$ax(pathParsed.parts, 0);
        J.removeAt$1$ax(pathParsed.separators, 1);
      }
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(fromParsed.parts)) && H.boolConversionCheck(J.$eq$(J.$index$asx(fromParsed.parts, 0), "..")))
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      t3 = P.String;
      J.insertAll$2$ax(pathParsed.parts, 0, P.List_List$filled(J.get$length$asx(fromParsed.parts), "..", t3));
      J.$indexSet$ax(pathParsed.separators, 0, "");
      J.insertAll$2$ax(pathParsed.separators, 1, P.List_List$filled(J.get$length$asx(fromParsed.parts), t2.get$separator(), t3));
      if (H.boolConversionCheck(J.get$isEmpty$asx(pathParsed.parts)))
        return ".";
      t2 = J.get$length$asx(pathParsed.parts);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 1 && H.boolConversionCheck(J.$eq$(J.get$last$ax(pathParsed.parts), "."))) {
        J.removeLast$0$ax(pathParsed.parts);
        t2 = pathParsed.separators;
        t3 = J.getInterceptor$ax(t2);
        t3.removeLast$0(t2);
        t3.removeLast$0(t2);
        t3.add$1(t2, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return t1.toString$0(pathParsed);
    },
    fromUri$1: function(uri) {
      return this.style.pathFromUri$1(M._parseUri(uri));
    },
    toUri$1: function(path) {
      var t1, _this = this;
      H.stringTypeCheck(path);
      t1 = _this.style;
      if (H.boolConversionCheck(_this.isRelative$1(path)))
        return t1.relativePathToUri$1(path);
      else
        return t1.absolutePathToUri$1(_this.join$2(0, _this.get$current(_this), path));
    },
    prettyUri$1: function(uri) {
      var path, rel, t1, t2, _this = this,
        typedUri = M._parseUri(uri);
      if (H.boolConversionCheck(J.$eq$(typedUri.get$scheme(), "file")) && H.boolConversionCheck(J.$eq$(_this.style, $.$get$Style_url())))
        return typedUri.toString$0(0);
      else if (!H.boolConversionCheck(J.$eq$(typedUri.get$scheme(), "file")) && !H.boolConversionCheck(J.$eq$(typedUri.get$scheme(), "")) && !H.boolConversionCheck(J.$eq$(_this.style, $.$get$Style_url())))
        return typedUri.toString$0(0);
      path = _this.normalize$1(0, _this.fromUri$1(typedUri));
      rel = _this.relative$1(path);
      t1 = J.get$length$asx(_this.split$1(0, rel));
      t2 = J.get$length$asx(_this.split$1(0, path));
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 > t2 ? path : rel;
    },
    _parse$1: function(path) {
      return X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this.style);
    }
  };
  M.Context_join_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) != null;
    },
    $signature: 3
  };
  M.Context_joinAll_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 3
  };
  M.Context_split_closure.prototype = {
    call$1: function(part) {
      return J.get$isNotEmpty$asx(H.stringTypeCheck(part));
    },
    $signature: 3
  };
  M._validateArgList_closure.prototype = {
    call$1: function(arg) {
      H.stringTypeCheck(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 14
  };
  M._PathDirection.prototype = {};
  M._PathRelation.prototype = {};
  B.InternalStyle.prototype = {
    getRoot$1: function(path) {
      var $length, t1;
      H.stringTypeCheck(path);
      $length = this.rootLength$1(path);
      if (typeof $length !== "number")
        return $length.$gt();
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (H.boolConversionCheck(this.isRootRelative$1(path))) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1: function(path) {
      var segments;
      H.stringTypeCheck(path);
      segments = J.split$1$s(this.get$context(this), path);
      if (H.boolConversionCheck(this.isSeparator$1(J.codeUnitAt$1$s(path, path.length - 1))))
        J.add$1$ax(segments, "");
      return P._Uri__Uri(null, null, segments, null);
    },
    pathsEqual$2: function(path1, path2) {
      return H.stringTypeCheck(path1) == H.stringTypeCheck(path2);
    }
  };
  X.ParsedPath.prototype = {
    get$isAbsolute: function() {
      return this.root != null;
    },
    get$hasTrailingSeparator: function() {
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(this.parts)))
        var t1 = H.boolConversionCheck(J.$eq$(J.get$last$ax(this.parts), "")) || !H.boolConversionCheck(J.$eq$(J.get$last$ax(this.separators), ""));
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0: function() {
      var t1, t2, t3, _this = this;
      while (true) {
        if (!(H.boolConversionCheck(J.get$isNotEmpty$asx(_this.parts)) && H.boolConversionCheck(J.$eq$(J.get$last$ax(_this.parts), ""))))
          break;
        J.removeLast$0$ax(_this.parts);
        J.removeLast$0$ax(_this.separators);
      }
      if (H.boolConversionCheck(J.get$isNotEmpty$asx(_this.separators))) {
        t1 = _this.separators;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$sub();
        t2.$indexSet(t1, t3 - 1, "");
      }
    },
    normalize$0: function(_) {
      var t2, leadingDoubles, t3, newSeparators, _this = this,
        t1 = P.String,
        newParts = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(_this.parts), leadingDoubles = 0; H.boolConversionCheck(t2.moveNext$0());) {
        t3 = J.get$current$z(t2);
        if (!(t3 === "." || t3 === ""))
          if (t3 === "..")
            if (H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(newParts))) {
              if (0 >= newParts.length)
                return H.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          else
            C.JSArray_methods.add$1(newParts, t3);
      }
      if (!H.boolConversionCheck(_this.get$isAbsolute()))
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", t1));
      if (H.boolConversionCheck(C.JSArray_methods.get$isEmpty(newParts)) && !H.boolConversionCheck(_this.get$isAbsolute()))
        C.JSArray_methods.add$1(newParts, ".");
      newSeparators = P.List_List$generate(newParts.length, new X.ParsedPath_normalize_closure(_this), true, t1);
      J.insert$2$ax(newSeparators, 0, H.boolConversionCheck(_this.get$isAbsolute()) && H.boolConversionCheck(C.JSArray_methods.get$isNotEmpty(newParts)) && H.boolConversionCheck(_this.style.needsSeparator$1(_this.root)) ? _this.style.get$separator() : "");
      _this.set$parts(newParts);
      _this.set$separators(newSeparators);
      if (_this.root != null && H.boolConversionCheck(J.$eq$(_this.style, $.$get$Style_windows())))
        _this.root = H.stringTypeCheck(J.replaceAll$2$s(_this.root, "/", "\\"));
      _this.removeTrailingSeparators$0();
    },
    toString$0: function(_) {
      var i, _this = this,
        builder = P.StringBuffer$(""),
        t1 = _this.root;
      if (t1 != null)
        builder.write$1(0, t1);
      i = 0;
      while (true) {
        t1 = J.get$length$asx(_this.parts);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        builder.write$1(0, J.$index$asx(_this.separators, i));
        builder.write$1(0, J.$index$asx(_this.parts, i));
        ++i;
      }
      builder.write$1(0, J.get$last$ax(_this.separators));
      return builder.toString$0(0);
    },
    set$parts: function(parts) {
      this.parts = H.assertSubtype(parts, "$isList", [P.String], "$asList");
    },
    set$separators: function(separators) {
      this.separators = H.assertSubtype(separators, "$isList", [P.String], "$asList");
    }
  };
  X.ParsedPath_normalize_closure.prototype = {
    call$1: function(_) {
      H.intTypeCheck(_);
      return this.$this.style.get$separator();
    },
    $signature: 13
  };
  X.PathException.prototype = {
    toString$0: function(_) {
      return "PathException: " + H.S(this.message);
    },
    $isException: 1
  };
  K.PathMap.prototype = {
    $asMapView: function($V) {
      return [P.String, $V];
    },
    $asMap: function($V) {
      return [P.String, $V];
    }
  };
  B.PathSet.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asIterableBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    },
    $isSet: 1,
    $asSet: function() {
      return [P.String];
    }
  };
  O.Style.prototype = {
    get$context: function(_) {
      return M.Context_Context(this);
    },
    toString$0: function(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      return H.boolConversionCheck(J.getInterceptor$asx(path).get$isNotEmpty(path)) && !H.boolConversionCheck(this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1)));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (H.boolConversionCheck(J.getInterceptor$asx(path).get$isNotEmpty(path)) && H.boolConversionCheck(this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))))
        return 1;
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return false;
    },
    pathFromUri$1: function(uri) {
      H.interceptedTypeCheck(uri, "$isUri");
      if (H.boolConversionCheck(J.$eq$(uri.get$scheme(), "")) || H.boolConversionCheck(J.$eq$(uri.get$scheme(), "file")))
        return P.Uri_decodeComponent(uri.get$path(uri));
      throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
    },
    absolutePathToUri$1: function(path) {
      var parsed = X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this);
      if (H.boolConversionCheck(J.get$isEmpty$asx(parsed.parts)))
        J.addAll$1$ax(parsed.parts, H.setRuntimeTypeInfo(["", ""], [P.String]));
      else if (H.boolConversionCheck(parsed.get$hasTrailingSeparator()))
        J.add$1$ax(parsed.parts, "");
      return P._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name: function() {
      return "posix";
    },
    get$separator: function() {
      return "/";
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      return H.intTypeCheck(codeUnit) === 47;
    },
    needsSeparator$1: function(path) {
      var t1;
      H.stringTypeCheck(path);
      if (H.boolConversionCheck(J.getInterceptor$asx(path).get$isEmpty(path)))
        return false;
      t1 = path.length;
      if (!H.boolConversionCheck(this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, t1 - 1))))
        return true;
      return H.boolConversionCheck(C.JSString_methods.endsWith$1(path, "://")) && H.boolConversionCheck(J.$eq$(this.rootLength$1(path), t1));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, i, codeUnit, index, t2;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (H.boolConversionCheck(J.getInterceptor$asx(path).get$isEmpty(path)))
        return 0;
      if (H.boolConversionCheck(this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))))
        return 1;
      for (t1 = path.length, i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (H.boolConversionCheck(this.isSeparator$1(codeUnit)))
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", H.boolConversionCheck(C.JSString_methods.startsWith$2(path, "//", i + 1)) ? i + 3 : i);
          if (typeof index !== "number")
            return index.$le();
          if (index <= 0)
            return t1;
          if (!H.boolConversionCheck(withDrive) || t1 < index + 3)
            return index;
          if (!H.boolConversionCheck(C.JSString_methods.startsWith$1(path, "file://")))
            return index;
          if (!H.boolConversionCheck(B.isDriveLetter(path, index + 1)))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      H.stringTypeCheck(path);
      return H.boolConversionCheck(J.getInterceptor$asx(path).get$isNotEmpty(path)) && H.boolConversionCheck(this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0)));
    },
    pathFromUri$1: function(uri) {
      return J.toString$0$(H.interceptedTypeCheck(uri, "$isUri"));
    },
    relativePathToUri$1: function(path) {
      return P.Uri_parse(H.stringTypeCheck(path));
    },
    absolutePathToUri$1: function(path) {
      return P.Uri_parse(H.stringTypeCheck(path));
    },
    get$name: function() {
      return "url";
    },
    get$separator: function() {
      return "/";
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1: function(path) {
      return J.contains$1$asx(H.stringTypeCheck(path), "/");
    },
    isSeparator$1: function(codeUnit) {
      H.intTypeCheck(codeUnit);
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1: function(path) {
      H.stringTypeCheck(path);
      if (H.boolConversionCheck(J.getInterceptor$asx(path).get$isEmpty(path)))
        return false;
      return !H.boolConversionCheck(this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1)));
    },
    rootLength$2$withDrive: function(path, withDrive) {
      var t1, t2, index;
      H.stringTypeCheck(path);
      H.boolTypeCheck(withDrive);
      if (H.boolConversionCheck(J.getInterceptor$asx(path).get$isEmpty(path)))
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 0);
      t2 = J.getInterceptor$(t1);
      if (H.boolConversionCheck(t2.$eq(t1, 47)))
        return 1;
      if (H.boolConversionCheck(t2.$eq(t1, 92))) {
        t1 = path.length;
        if (t1 < 2 || !H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 92)))
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (typeof index !== "number")
          return index.$gt();
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (typeof index !== "number")
            return index.$gt();
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (path.length < 3)
        return 0;
      if (!H.boolConversionCheck(B.isAlphabetic(t1)))
        return 0;
      if (!H.boolConversionCheck(J.$eq$(C.JSString_methods._codeUnitAt$1(path, 1), 58)))
        return 0;
      if (!H.boolConversionCheck(this.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 2))))
        return 0;
      return 3;
    },
    rootLength$1: function(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1: function(path) {
      return J.$eq$(this.rootLength$1(H.stringTypeCheck(path)), 1);
    },
    pathFromUri$1: function(uri) {
      var path;
      H.interceptedTypeCheck(uri, "$isUri");
      if (!H.boolConversionCheck(J.$eq$(uri.get$scheme(), "")) && !H.boolConversionCheck(J.$eq$(uri.get$scheme(), "file")))
        throw H.wrapException(P.ArgumentError$("Uri " + H.S(uri) + " must have scheme 'file:'."));
      path = uri.get$path(uri);
      if (H.boolConversionCheck(J.$eq$(uri.get$host(uri), ""))) {
        if (path.length >= 3 && H.boolConversionCheck(J.startsWith$1$s(path, "/")) && H.boolConversionCheck(B.isDriveLetter(path, 1)))
          path = J.replaceFirst$2$s(path, "/", "");
      } else
        path = "\\\\" + H.S(uri.get$host(uri)) + H.S(path);
      return P.Uri_decodeComponent(J.replaceAll$2$s(path, "/", "\\"));
    },
    absolutePathToUri$1: function(path) {
      var rootParts, t1,
        parsed = X.ParsedPath_ParsedPath$parse(H.stringTypeCheck(path), this);
      if (H.boolConversionCheck(J.startsWith$1$s(parsed.root, "\\\\"))) {
        rootParts = J.where$1$ax(J.split$1$s(parsed.root, "\\"), new L.WindowsStyle_absolutePathToUri_closure());
        t1 = J.getInterceptor$ax(rootParts);
        J.insert$2$ax(parsed.parts, 0, t1.get$last(rootParts));
        if (H.boolConversionCheck(parsed.get$hasTrailingSeparator()))
          J.add$1$ax(parsed.parts, "");
        return P._Uri__Uri(t1.get$first(rootParts), null, parsed.parts, "file");
      } else {
        if (H.boolConversionCheck(J.get$isEmpty$asx(parsed.parts)) || H.boolConversionCheck(parsed.get$hasTrailingSeparator()))
          J.add$1$ax(parsed.parts, "");
        J.insert$2$ax(parsed.parts, 0, J.replaceAll$2$s(J.replaceAll$2$s(parsed.root, "/", ""), "\\", ""));
        return P._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2: function(codeUnit1, codeUnit2) {
      var upperCase1;
      H.intTypeCheck(codeUnit1);
      H.intTypeCheck(codeUnit2);
      if (codeUnit1 == codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if (typeof codeUnit1 !== "number")
        return codeUnit1.$xor();
      if (typeof codeUnit2 !== "number")
        return H.iae(codeUnit2);
      if ((codeUnit1 ^ codeUnit2) >>> 0 !== 32)
        return false;
      upperCase1 = (codeUnit1 | 32) >>> 0;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2: function(path1, path2) {
      var t1, t2, i;
      H.stringTypeCheck(path1);
      H.stringTypeCheck(path2);
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!H.boolConversionCheck(this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i))))
          return false;
      return true;
    },
    get$name: function() {
      return "windows";
    },
    get$separator: function() {
      return "\\";
    }
  };
  L.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1: function(part) {
      return H.stringTypeCheck(part) !== "";
    },
    $signature: 3
  };
  U.Chain.prototype = {
    get$terse: function() {
      return this.foldFrames$2$terse(new U.Chain_terse_closure(), true);
    },
    foldFrames$2$terse: function(predicate, terse) {
      var t1, foldedTraces, t2, nonEmptyTraces;
      H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [A.Frame]});
      H.boolTypeCheck(terse);
      t1 = Y.Trace;
      foldedTraces = J.map$1$1$ax(this.traces, new U.Chain_foldFrames_closure(predicate, terse), t1);
      t2 = J.getInterceptor$ax(foldedTraces);
      nonEmptyTraces = t2.where$1(foldedTraces, new U.Chain_foldFrames_closure0(terse));
      if (H.boolConversionCheck(J.get$isEmpty$asx(nonEmptyTraces)) && H.boolConversionCheck(t2.get$isNotEmpty(foldedTraces)))
        return U.Chain$(H.setRuntimeTypeInfo([t2.get$last(foldedTraces)], [t1]));
      return U.Chain$(nonEmptyTraces);
    },
    toTrace$0: function() {
      return Y.Trace$(J.expand$1$1$ax(this.traces, new U.Chain_toTrace_closure(), A.Frame), null);
    },
    toString$0: function(_) {
      var t1 = this.traces,
        t2 = P.int,
        t3 = J.getInterceptor$ax(t1);
      return J.join$1$ax(t3.map$1$1(t1, new U.Chain_toString_closure(J.fold$1$2$ax(t3.map$1$1(t1, new U.Chain_toString_closure0(), t2), 0, H.instantiate1(P.math__max$closure(), t2), t2)), P.String), "===== asynchronous gap ===========================\n");
    },
    $isStackTrace: 1,
    get$traces: function() {
      return this.traces;
    }
  };
  U.Chain_capture_closure0.prototype = {$signature: 4};
  U.Chain_capture_closure.prototype = {
    call$0: function() {
      var error, stackTrace, t1, exception;
      try {
        t1 = this.callback.call$0();
        return t1;
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        P.Zone_current().handleUncaughtError$2(error, stackTrace);
        return;
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.T};
    }
  };
  U.Chain_Chain$current_closure.prototype = {$signature: 22};
  U.Chain_Chain$forTrace_closure.prototype = {$signature: 22};
  U.Chain_Chain$parse_closure.prototype = {
    call$1: function(trace) {
      return Y.Trace$parseVM(H.stringTypeCheck(trace));
    },
    $signature: 33
  };
  U.Chain_Chain$parse_closure0.prototype = {
    call$1: function(trace) {
      return Y.Trace$parseFriendly(H.stringTypeCheck(trace));
    },
    $signature: 33
  };
  U.Chain_terse_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isFrame");
      return false;
    },
    $signature: 32
  };
  U.Chain_foldFrames_closure.prototype = {
    call$1: function(trace) {
      return H.interceptedTypeCheck(trace, "$isTrace").foldFrames$2$terse(this.predicate, this.terse);
    },
    $signature: 76
  };
  U.Chain_foldFrames_closure0.prototype = {
    call$1: function(trace) {
      var t1;
      H.interceptedTypeCheck(trace, "$isTrace");
      t1 = J.get$length$asx(trace.get$frames());
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 1)
        return true;
      if (H.boolConversionCheck(J.get$isEmpty$asx(trace.get$frames())))
        return false;
      if (!H.boolConversionCheck(this.terse))
        return false;
      return J.get$line$z(J.get$single$ax(trace.get$frames())) != null;
    },
    $signature: 77
  };
  U.Chain_toTrace_closure.prototype = {
    call$1: function(trace) {
      return H.interceptedTypeCheck(trace, "$isTrace").get$frames();
    },
    $signature: 78
  };
  U.Chain_toString_closure0.prototype = {
    call$1: function(trace) {
      var t1 = P.int;
      return J.fold$1$2$ax(J.map$1$1$ax(H.interceptedTypeCheck(trace, "$isTrace").get$frames(), new U.Chain_toString__closure0(), t1), 0, H.instantiate1(P.math__max$closure(), t1), t1);
    },
    $signature: 79
  };
  U.Chain_toString__closure0.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      return J.get$length$asx(frame.get$location(frame));
    },
    $signature: 45
  };
  U.Chain_toString_closure.prototype = {
    call$1: function(trace) {
      return J.join$0$ax(J.map$1$1$ax(H.interceptedTypeCheck(trace, "$isTrace").get$frames(), new U.Chain_toString__closure(this.longest), P.String));
    },
    $signature: 40
  };
  U.Chain_toString__closure.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      return H.S(J.padRight$1$s(frame.get$location(frame), this.longest)) + "  " + H.S(frame.get$member()) + "\n";
    },
    $signature: 41
  };
  A.Frame.prototype = {
    get$isCore: function() {
      return J.$eq$(this.uri.get$scheme(), "dart");
    },
    get$library: function() {
      var t1 = this.uri;
      if (H.boolConversionCheck(J.$eq$(t1.get$scheme(), "data")))
        return "data:...";
      return D.prettyUri(t1);
    },
    get$$package: function() {
      var t1 = this.uri;
      if (!H.boolConversionCheck(J.$eq$(t1.get$scheme(), "package")))
        return;
      return J.get$first$ax(J.split$1$s(J.get$path$z(t1), "/"));
    },
    get$location: function(_) {
      var t2, _this = this,
        t1 = _this.line;
      if (t1 == null)
        return _this.get$library();
      t2 = _this.column;
      if (t2 == null)
        return H.S(_this.get$library()) + " " + H.S(t1);
      return H.S(_this.get$library()) + " " + H.S(t1) + ":" + H.S(t2);
    },
    toString$0: function(_) {
      return H.S(this.get$location(this)) + " in " + H.S(this.member);
    },
    get$uri: function() {
      return this.uri;
    },
    get$line: function(receiver) {
      return this.line;
    },
    get$column: function() {
      return this.column;
    },
    get$member: function() {
      return this.member;
    }
  };
  A.Frame_Frame$parseVM_closure.prototype = {
    call$0: function() {
      var match, member, uri, lineAndColumn, t2, line, _null = null,
        t1 = this.frame;
      if (H.boolConversionCheck(J.$eq$(t1, "...")))
        return A.Frame$(P._Uri__Uri(_null, _null, _null, _null), _null, _null, "...");
      match = $.$get$_vmFrame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      member = J.replaceAll$2$s(J.replaceAll$2$s(match.$index(0, 1), $.$get$_asyncBody(), "<async>"), "<anonymous closure>", "<fn>");
      uri = P.Uri_parse(match.$index(0, 2));
      lineAndColumn = J.split$1$s(match.$index(0, 3), ":");
      t1 = J.getInterceptor$asx(lineAndColumn);
      t2 = t1.get$length(lineAndColumn);
      if (typeof t2 !== "number")
        return t2.$gt();
      line = t2 > 1 ? P.int_parse(t1.$index(lineAndColumn, 1), _null, _null) : _null;
      t2 = t1.get$length(lineAndColumn);
      if (typeof t2 !== "number")
        return t2.$gt();
      return A.Frame$(uri, line, t2 > 2 ? P.int_parse(t1.$index(lineAndColumn, 2), _null, _null) : _null, member);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 10
  };
  A.Frame_Frame$parseV8_closure.prototype = {
    call$0: function() {
      var _s4_ = "<fn>",
        t1 = this.frame,
        match = $.$get$_v8Frame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      t1 = new A.Frame_Frame$parseV8_closure_parseLocation(t1);
      if (match.$index(0, 2) != null)
        return t1.call$2(match.$index(0, 2), J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(match.$index(0, 1), "<anonymous>", _s4_), "Anonymous function", _s4_), "(anonymous function)", _s4_));
      else
        return t1.call$2(match.$index(0, 3), _s4_);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 10
  };
  A.Frame_Frame$parseV8_closure_parseLocation.prototype = {
    call$2: function($location, member) {
      var evalMatch, urlMatch, _null = null,
        t1 = $.$get$_v8EvalLocation();
      H.stringTypeCheck($location);
      evalMatch = t1.firstMatch$1($location);
      for (; evalMatch != null;) {
        $location = H.stringTypeCheck(evalMatch.$index(0, 1));
        evalMatch = t1.firstMatch$1($location);
      }
      if ($location === "native")
        return A.Frame$(P.Uri_parse("native"), _null, _null, H.stringTypeCheck(member));
      urlMatch = $.$get$_v8UrlLocation().firstMatch$1($location);
      if (urlMatch == null)
        return N.UnparsedFrame$(this.frame);
      return A.Frame$(A.Frame__uriOrPathToUri(urlMatch.$index(0, 1)), P.int_parse(urlMatch.$index(0, 2), _null, _null), P.int_parse(urlMatch.$index(0, 3), _null, _null), H.stringTypeCheck(member));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 83
  };
  A.Frame_Frame$parseFirefox_closure.prototype = {
    call$0: function() {
      var uri, member, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_firefoxSafariFrame().firstMatch$1(t1);
      if (match == null)
        return N.UnparsedFrame$(t1);
      uri = A.Frame__uriOrPathToUri(match.$index(0, 3));
      if (match.$index(0, 1) != null) {
        member = J.$add$ansx(match.$index(0, 1), J.join$0$ax(P.List_List$filled(J.get$length$asx(C.JSString_methods.allMatches$1("/", match.$index(0, 2))), ".<fn>", P.String)));
        if (H.boolConversionCheck(J.$eq$(member, "")))
          member = "<fn>";
        member = J.replaceFirst$2$s(member, $.$get$_initialDot(), "");
      } else
        member = "<fn>";
      line = H.boolConversionCheck(J.$eq$(match.$index(0, 4), "")) ? _null : P.int_parse(match.$index(0, 4), _null, _null);
      column = match.$index(0, 5) == null || H.boolConversionCheck(J.$eq$(match.$index(0, 5), "")) ? _null : P.int_parse(match.$index(0, 5), _null, _null);
      return A.Frame$(uri, line, column, H.stringTypeCheck(member));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 10
  };
  A.Frame_Frame$parseFriendly_closure.prototype = {
    call$0: function() {
      var uri, line, column, _null = null,
        t1 = this.frame,
        match = $.$get$_friendlyFrame().firstMatch$1(t1);
      if (match == null)
        throw H.wrapException(P.FormatException$("Couldn't parse package:stack_trace stack trace line '" + H.S(t1) + "'.", _null, _null));
      uri = H.boolConversionCheck(J.$eq$(match.$index(0, 1), "data:...")) ? P.Uri_Uri$dataFromString("") : P.Uri_parse(match.$index(0, 1));
      if (H.boolConversionCheck(J.$eq$(uri.get$scheme(), "")))
        uri = D.toUri(D.absolute(D.fromUri(uri)));
      line = match.$index(0, 2) == null ? _null : P.int_parse(match.$index(0, 2), _null, _null);
      column = match.$index(0, 3) == null ? _null : P.int_parse(match.$index(0, 3), _null, _null);
      return A.Frame$(uri, line, column, match.$index(0, 4));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 10
  };
  X.LazyChain.prototype = {
    get$_chain: function() {
      var t1 = this._lazy_chain$_inner;
      return t1 == null ? this._lazy_chain$_inner = H.interceptedTypeCheck(this._lazy_chain$_thunk.call$0(), "$isChain") : t1;
    },
    get$traces: function() {
      return this.get$_chain().get$traces();
    },
    get$terse: function() {
      return this.get$_chain().get$terse();
    },
    toTrace$0: function() {
      return T.LazyTrace$(new X.LazyChain_toTrace_closure(this));
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_chain());
    },
    $isStackTrace: 1,
    $isChain: 1
  };
  X.LazyChain_toTrace_closure.prototype = {
    call$0: function() {
      return this.$this.get$_chain().toTrace$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  T.LazyTrace.prototype = {
    get$_lazy_trace$_trace: function() {
      var t1 = this._inner;
      return t1 == null ? this._inner = H.interceptedTypeCheck(this._thunk.call$0(), "$isTrace") : t1;
    },
    get$frames: function() {
      return this.get$_lazy_trace$_trace().get$frames();
    },
    foldFrames$2$terse: function(predicate, terse) {
      return T.LazyTrace$(new T.LazyTrace_foldFrames_closure(this, H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [A.Frame]}), H.boolTypeCheck(terse)));
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_lazy_trace$_trace());
    },
    $isStackTrace: 1,
    $isTrace: 1
  };
  T.LazyTrace_foldFrames_closure.prototype = {
    call$0: function() {
      return this.$this.get$_lazy_trace$_trace().foldFrames$2$terse(this.predicate, this.terse);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  O.StackZoneSpecification.prototype = {
    get$_disabled: function() {
      return J.$eq$(J.$index$asx(P.Zone_current(), $.$get$StackZoneSpecification_disableKey()), true);
    },
    toSpec$0: function() {
      var _this = this, _null = null,
        t1 = H.boolConversionCheck(_this._errorZone) ? _this.get$_stack_zone_specification$_handleUncaughtError() : _null;
      return P._ZoneSpecification$(_null, _null, _this.get$_stack_zone_specification$_errorCallback(), _null, t1, _null, _this.get$_stack_zone_specification$_registerBinaryCallback(), _this.get$_stack_zone_specification$_registerCallback(), _this.get$_stack_zone_specification$_registerUnaryCallback(), _null, _null, _null, _null);
    },
    chainFor$1: function(trace) {
      var t2, previous, t1 = {};
      t1.trace = trace;
      H.interceptedTypeCheck(trace, "$isStackTrace");
      if (!!J.getInterceptor$(trace).$isChain)
        return trace;
      if (trace == null) {
        trace = P.StackTrace_current();
        t1.trace = trace;
        t2 = trace;
      } else
        t2 = trace;
      previous = J.$index$asx(this._chains, t2);
      if (previous == null)
        previous = this._currentNode;
      if (previous == null) {
        if (!!J.getInterceptor$(t2).$isTrace)
          return U.Chain$(H.setRuntimeTypeInfo([t2], [Y.Trace]));
        return X.LazyChain$(new O.StackZoneSpecification_chainFor_closure(t1));
      } else
        return O._Node$(!J.getInterceptor$(t2).$isTrace ? t1.trace = T.LazyTrace$(new O.StackZoneSpecification_chainFor_closure0(this, t2)) : t2, previous).toChain$0();
    },
    _stack_zone_specification$_registerCallback$1$4: function($self, $parent, zone, f, $R) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if (f == null || H.boolConversionCheck(this.get$_disabled()))
        return $parent.registerCallback$1$2(zone, f, $R);
      return $parent.registerCallback$1$2(zone, new O.StackZoneSpecification__registerCallback_closure(this, f, this._createNode$1(1), $R), $R);
    },
    _stack_zone_specification$_registerCallback$4: function($self, $parent, zone, f) {
      return this._stack_zone_specification$_registerCallback$1$4($self, $parent, zone, f, null);
    },
    _stack_zone_specification$_registerUnaryCallback$2$4: function($self, $parent, zone, f, $R, $T) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      if (f == null || H.boolConversionCheck(this.get$_disabled()))
        return $parent.registerUnaryCallback$2$2(zone, f, $R, $T);
      return $parent.registerUnaryCallback$2$2(zone, new O.StackZoneSpecification__registerUnaryCallback_closure(this, f, this._createNode$1(1), $T, $R), $R, $T);
    },
    _stack_zone_specification$_registerUnaryCallback$4: function($self, $parent, zone, f) {
      return this._stack_zone_specification$_registerUnaryCallback$2$4($self, $parent, zone, f, null, null);
    },
    _stack_zone_specification$_registerBinaryCallback$3$4: function($self, $parent, zone, f, $R, T1, T2) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(f, "$isFunction");
      if (f == null || H.boolConversionCheck(this.get$_disabled()))
        return $parent.registerBinaryCallback$3$2(zone, H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]}), $R, T1, T2);
      return $parent.registerBinaryCallback$3$2(zone, new O.StackZoneSpecification__registerBinaryCallback_closure(this, f, this._createNode$1(1), T1, T2, $R), $R, T1, T2);
    },
    _stack_zone_specification$_registerBinaryCallback$4: function($self, $parent, zone, f) {
      return this._stack_zone_specification$_registerBinaryCallback$3$4($self, $parent, zone, f, null, null, null);
    },
    _stack_zone_specification$_handleUncaughtError$5: function($self, $parent, zone, error, stackTrace) {
      var stackChain, newError, newStackTrace, t1, exception;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (H.boolConversionCheck(this.get$_disabled())) {
        $parent.handleUncaughtError$3(zone, error, stackTrace);
        return;
      }
      stackChain = this.chainFor$1(stackTrace);
      t1 = this._stack_zone_specification$_onError;
      if (t1 == null) {
        $parent.handleUncaughtError$3(zone, error, stackChain);
        return;
      }
      try {
        J.get$parent$x($self).runBinary$3$3(t1, error, stackChain, -1, null, U.Chain);
      } catch (exception) {
        newError = H.unwrapException(exception);
        newStackTrace = H.getTraceFromException(exception);
        t1 = newError;
        if (t1 == null ? error == null : t1 === error)
          $parent.handleUncaughtError$3(zone, error, stackChain);
        else
          $parent.handleUncaughtError$3(zone, newError, newStackTrace);
      }
    },
    _stack_zone_specification$_errorCallback$5: function($self, $parent, zone, error, stackTrace) {
      var t1, t2, asyncError, _this = this;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (H.boolConversionCheck(_this.get$_disabled()))
        return $parent.errorCallback$3(zone, error, stackTrace);
      if (stackTrace == null)
        stackTrace = _this._createNode$1(2).toChain$0();
      else {
        t1 = _this._chains;
        t2 = J.getInterceptor$asx(t1);
        if (t2.$index(t1, stackTrace) == null)
          t2.$indexSet(t1, stackTrace, _this._createNode$1(2));
      }
      asyncError = $parent.errorCallback$3(zone, error, stackTrace);
      return asyncError == null ? P.AsyncError$(error, stackTrace) : asyncError;
    },
    _createNode$1: function(level) {
      H.intTypeCheck(level);
      if (typeof level !== "number")
        return level.$add();
      return O._Node$(this._currentTrace$1(level + 1), this._currentNode);
    },
    _stack_zone_specification$_run$1$2: function(f, node, $T) {
      var previousNode, stackTrace, t1, exception, t2, t3, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: $T});
      H.interceptedTypeCheck(node, "$is_Node");
      previousNode = _this._currentNode;
      _this._currentNode = H.interceptedTypeCheck(node, "$is_Node");
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1 = _this._chains;
        t2 = stackTrace;
        t3 = J.getInterceptor$asx(t1);
        if (t3.$index(t1, t2) == null)
          t3.$indexSet(t1, t2, node);
        throw exception;
      } finally {
        _this._currentNode = H.interceptedTypeCheck(previousNode, "$is_Node");
      }
    },
    _stack_zone_specification$_run$2: function(f, node) {
      return this._stack_zone_specification$_run$1$2(f, node, null);
    },
    _currentTrace$1: function(level) {
      var t1 = {};
      t1.level = level;
      if (H.intTypeCheck(level) == null)
        t1.level = 0;
      return T.LazyTrace$(new O.StackZoneSpecification__currentTrace_closure(t1, this, P.StackTrace_current()));
    },
    _trimVMChain$1: function(trace) {
      var text = J.toString$0$(H.interceptedTypeCheck(trace, "$isStackTrace")),
        index = J.getInterceptor$s(text).indexOf$1(text, "<asynchronous suspension>\n");
      return index === -1 ? text : C.JSString_methods.substring$2(text, 0, index);
    }
  };
  O.StackZoneSpecification_chainFor_closure.prototype = {
    call$0: function() {
      return U.Chain_Chain$parse(J.toString$0$(this._box_0.trace));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 22
  };
  O.StackZoneSpecification_chainFor_closure0.prototype = {
    call$0: function() {
      return Y.Trace_Trace$parse(this.$this._trimVMChain$1(this.original));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  O.StackZoneSpecification__registerCallback_closure.prototype = {
    call$0: function() {
      var _this = this;
      return _this.$this._stack_zone_specification$_run$1$2(_this.f, _this.node, _this.R);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  O.StackZoneSpecification__registerUnaryCallback_closure.prototype = {
    call$1: function(arg) {
      var _this = this,
        t1 = _this.R;
      return _this.$this._stack_zone_specification$_run$1$2(new O.StackZoneSpecification__registerUnaryCallback__closure(_this.f, H.assertSubtypeOfRuntimeType(arg, _this.T), t1), _this.node, t1);
    },
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T]};
    }
  };
  O.StackZoneSpecification__registerUnaryCallback__closure.prototype = {
    call$0: function() {
      return this.f.call$1(this.arg);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  O.StackZoneSpecification__registerBinaryCallback_closure.prototype = {
    call$2: function(arg1, arg2) {
      var _this = this,
        t1 = _this.R;
      return _this.$this._stack_zone_specification$_run$1$2(new O.StackZoneSpecification__registerBinaryCallback__closure(_this.f, H.assertSubtypeOfRuntimeType(arg1, _this.T1), H.assertSubtypeOfRuntimeType(arg2, _this.T2), t1), _this.node, t1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: function() {
      return {func: 1, ret: this.R, args: [this.T1, this.T2]};
    }
  };
  O.StackZoneSpecification__registerBinaryCallback__closure.prototype = {
    call$0: function() {
      var _this = this;
      return H.assertSubtypeOfRuntimeType(_this.f.call$2(_this.arg1, _this.arg2), _this.R);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  O.StackZoneSpecification__currentTrace_closure.prototype = {
    call$0: function() {
      var text = this.$this._trimVMChain$1(this.stackTrace),
        t1 = Y.Trace_Trace$parse(text).get$frames(),
        t2 = this._box_0.level,
        t3 = H.boolConversionCheck($.$get$inJS()) ? 2 : 1;
      if (typeof t2 !== "number")
        return t2.$add();
      return Y.Trace$(J.skip$1$ax(t1, t2 + t3), text);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  O._Node.prototype = {
    toChain$0: function() {
      var node,
        nodes = H.setRuntimeTypeInfo([], [Y.Trace]);
      for (node = this; node != null;) {
        C.JSArray_methods.add$1(nodes, node.trace);
        node = node.previous;
      }
      return U.Chain$(nodes);
    }
  };
  Y.Trace.prototype = {
    foldFrames$2$terse: function(predicate, terse) {
      var t1, newFrames, t2, t3, _box_0 = {};
      _box_0.predicate = predicate;
      H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [A.Frame]});
      terse = H.boolConversionCheck(H.boolTypeCheck(terse));
      if (terse)
        _box_0.predicate = new Y.Trace_foldFrames_closure(predicate);
      t1 = A.Frame;
      newFrames = H.setRuntimeTypeInfo([], [t1]);
      for (t2 = J.get$iterator$ax(J.get$reversed$ax(this.frames)); H.boolConversionCheck(t2.moveNext$0());) {
        t3 = J.get$current$z(t2);
        if (t3 instanceof N.UnparsedFrame || !H.boolConversionCheck(_box_0.predicate.call$1(t3)))
          C.JSArray_methods.add$1(newFrames, t3);
        else if (H.boolConversionCheck(C.JSArray_methods.get$isEmpty(newFrames)) || !H.boolConversionCheck(_box_0.predicate.call$1(C.JSArray_methods.get$last(newFrames))))
          C.JSArray_methods.add$1(newFrames, A.Frame$(t3.get$uri(), t3.get$line(t3), t3.get$column(), t3.get$member()));
      }
      if (terse) {
        newFrames = J.toList$0$ax(C.JSArray_methods.map$1$1(newFrames, new Y.Trace_foldFrames_closure0(_box_0), t1));
        t1 = J.getInterceptor$asx(newFrames);
        t2 = t1.get$length(newFrames);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 1 && H.boolConversionCheck(_box_0.predicate.call$1(t1.get$first(newFrames))))
          t1.removeAt$1(newFrames, 0);
      }
      return Y.Trace$(J.get$reversed$ax(newFrames), J.toString$0$(this.original));
    },
    toString$0: function(_) {
      var t1 = this.frames,
        t2 = P.int,
        t3 = J.getInterceptor$ax(t1);
      return J.join$0$ax(t3.map$1$1(t1, new Y.Trace_toString_closure(J.fold$1$2$ax(t3.map$1$1(t1, new Y.Trace_toString_closure0(), t2), 0, H.instantiate1(P.math__max$closure(), t2), t2)), P.String));
    },
    $isStackTrace: 1,
    get$frames: function() {
      return this.frames;
    }
  };
  Y.Trace_Trace$from_closure.prototype = {
    call$0: function() {
      return Y.Trace_Trace$parse(J.toString$0$(this.trace));
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 6
  };
  Y.Trace__parseVM_closure.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseVM(H.stringTypeCheck(line));
    },
    $signature: 7
  };
  Y.Trace$parseV8_closure.prototype = {
    call$1: function(line) {
      return !H.boolConversionCheck(J.startsWith$1$s(H.stringTypeCheck(line), $.$get$_v8TraceLine()));
    },
    $signature: 3
  };
  Y.Trace$parseV8_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseV8(H.stringTypeCheck(line));
    },
    $signature: 7
  };
  Y.Trace$parseJSCore_closure.prototype = {
    call$1: function(line) {
      return H.stringTypeCheck(line) !== "\tat ";
    },
    $signature: 3
  };
  Y.Trace$parseJSCore_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseV8(H.stringTypeCheck(line));
    },
    $signature: 7
  };
  Y.Trace$parseFirefox_closure.prototype = {
    call$1: function(line) {
      H.stringTypeCheck(line);
      return H.boolConversionCheck(J.get$isNotEmpty$asx(line)) && line !== "[native code]";
    },
    $signature: 3
  };
  Y.Trace$parseFirefox_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseFirefox(H.stringTypeCheck(line));
    },
    $signature: 7
  };
  Y.Trace$parseFriendly_closure.prototype = {
    call$1: function(line) {
      return !H.boolConversionCheck(J.startsWith$1$s(H.stringTypeCheck(line), "====="));
    },
    $signature: 3
  };
  Y.Trace$parseFriendly_closure0.prototype = {
    call$1: function(line) {
      return A.Frame_Frame$parseFriendly(H.stringTypeCheck(line));
    },
    $signature: 7
  };
  Y.Trace_foldFrames_closure.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      if (H.boolConversionCheck(this.oldPredicate.call$1(frame)))
        return true;
      if (H.boolConversionCheck(frame.get$isCore()))
        return true;
      if (H.boolConversionCheck(J.$eq$(frame.get$$package(), "stack_trace")))
        return true;
      if (!H.boolConversionCheck(J.contains$1$asx(frame.get$member(), "<async>")))
        return false;
      return frame.get$line(frame) == null;
    },
    $signature: 32
  };
  Y.Trace_foldFrames_closure0.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      if (frame instanceof N.UnparsedFrame || !H.boolConversionCheck(this._box_0.predicate.call$1(frame)))
        return frame;
      return A.Frame$(P.Uri_parse(J.replaceAll$2$s(frame.get$library(), $.$get$_terseRegExp(), "")), null, null, frame.get$member());
    },
    $signature: 90
  };
  Y.Trace_toString_closure0.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      return J.get$length$asx(frame.get$location(frame));
    },
    $signature: 45
  };
  Y.Trace_toString_closure.prototype = {
    call$1: function(frame) {
      H.interceptedTypeCheck(frame, "$isFrame");
      if (frame instanceof N.UnparsedFrame)
        return H.S(frame) + "\n";
      return H.S(J.padRight$1$s(frame.get$location(frame), this.longest)) + "  " + H.S(frame.get$member()) + "\n";
    },
    $signature: 41
  };
  N.UnparsedFrame.prototype = {
    toString$0: function(_) {
      return this.member;
    },
    $isFrame: 1,
    get$uri: function() {
      return this.uri;
    },
    get$line: function() {
      return null;
    },
    get$column: function() {
      return null;
    },
    get$isCore: function() {
      return false;
    },
    get$library: function() {
      return "unparsed";
    },
    get$$package: function() {
      return null;
    },
    get$location: function() {
      return "unparsed";
    },
    get$member: function() {
      return this.member;
    }
  };
  Q.VMTrace.prototype = {$isStackTrace: 1};
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P._BroadcastStreamController.prototype;
    _.super$_BroadcastStreamController$_addEventError = _._addEventError$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Converter.prototype;
    _.super$Converter$fuse = _.fuse$1$1;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _.super$Iterable$skipWhile = _.skipWhile$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 11);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 92);
    _static(P, "async___nullErrorHandler$closure", 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 12, 0);
    _static_0(P, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    _static(P, "async___rootHandleUncaughtError$closure", 5, null, ["call$5"], ["_rootHandleUncaughtError"], 17, 0);
    _static(P, "async___rootRun$closure", 4, null, ["call$1$4", "call$4"], ["_rootRun", function($self, $parent, zone, f) {
      return P._rootRun($self, $parent, zone, f, null);
    }], 24, 1);
    _static(P, "async___rootRunUnary$closure", 5, null, ["call$2$5", "call$5"], ["_rootRunUnary", function($self, $parent, zone, f, arg) {
      return P._rootRunUnary($self, $parent, zone, f, arg, null, null);
    }], 23, 1);
    _static(P, "async___rootRunBinary$closure", 6, null, ["call$3$6", "call$6"], ["_rootRunBinary", function($self, $parent, zone, f, arg1, arg2) {
      return P._rootRunBinary($self, $parent, zone, f, arg1, arg2, null, null, null);
    }], 43, 1);
    _static(P, "async___rootRegisterCallback$closure", 4, null, ["call$1$4", "call$4"], ["_rootRegisterCallback", function($self, $parent, zone, f) {
      return P._rootRegisterCallback($self, $parent, zone, f, null);
    }], 35, 1);
    _static(P, "async___rootRegisterUnaryCallback$closure", 4, null, ["call$2$4", "call$4"], ["_rootRegisterUnaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterUnaryCallback($self, $parent, zone, f, null, null);
    }], 34, 1);
    _static(P, "async___rootRegisterBinaryCallback$closure", 4, null, ["call$3$4", "call$4"], ["_rootRegisterBinaryCallback", function($self, $parent, zone, f) {
      return P._rootRegisterBinaryCallback($self, $parent, zone, f, null, null, null);
    }], 93, 1);
    _static(P, "async___rootErrorCallback$closure", 5, null, ["call$5"], ["_rootErrorCallback"], 36, 0);
    _static(P, "async___rootScheduleMicrotask$closure", 4, null, ["call$4"], ["_rootScheduleMicrotask"], 44, 0);
    _static(P, "async___rootCreateTimer$closure", 5, null, ["call$5"], ["_rootCreateTimer"], 42, 0);
    _static(P, "async___rootCreatePeriodicTimer$closure", 5, null, ["call$5"], ["_rootCreatePeriodicTimer"], 94, 0);
    _static(P, "async___rootPrint$closure", 4, null, ["call$4"], ["_rootPrint"], 95, 0);
    _static_1(P, "async___printToZone$closure", "_printToZone", 96);
    _static(P, "async___rootFork$closure", 5, null, ["call$5"], ["_rootFork"], 97, 0);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 12, 0);
    _instance(P._Future.prototype, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 12, 0);
    _instance_0_u(P._DoneStreamSubscription.prototype, "get$_sendDone", "_sendDone$0", 0);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 14);
    _instance(W.MediaRecorder.prototype, "get$start", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["start$1", "start$0"], 88, 0);
    _instance_0_i(W.PresentationRequest.prototype, "get$start", "start$0", 85);
    _instance_0_i(W.Sensor.prototype, "get$start", "start$0", 0);
    _instance_0_i(W.SpeechRecognition.prototype, "get$start", "start$0", 0);
    var _;
    _instance_1_i(_ = W.TimeRanges.prototype, "get$end", "end$1", 26);
    _instance_1_i(_, "get$start", "start$1", 26);
    _instance_1_i(W.UnderlyingSourceBase.prototype, "get$start", "start$1", 81);
    _instance_0_i(W.VRSession.prototype, "get$end", "end$0", 80);
    _static(P, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return P.max(a, b, P.num);
    }], 98, 1);
    _instance(P.AudioBufferSourceNode.prototype, "get$start", 1, 0, function() {
      return [null, null, null];
    }, ["call$3", "call$1", "call$0", "call$2"], ["start$3", "start$1", "start$0", "start$2"], 73, 0);
    _static(Y, "modules_template__minimalApp$Injector$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["minimalApp$Injector", function() {
      return Y.minimalApp$Injector(null);
    }], 37, 0);
    _static_0(G, "run___createNgZone$closure", "_createNgZone", 30);
    _static(G, "run___identityInjector$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_identityInjector", function() {
      return G._identityInjector(null);
    }], 37, 0);
    _instance_0_u(M.ChangeDetectionHost.prototype, "get$tick", "tick$0", 0);
    _instance_0_i(_ = D.Testability.prototype, "get$isStable", "isStable$0", 46);
    _instance_1_i(_, "get$whenStable", "whenStable$1", 47);
    _instance(_ = Y.NgZone.prototype, "get$_ng_zone$_scheduleMicrotask", 0, 4, null, ["call$4"], ["_ng_zone$_scheduleMicrotask$4"], 44, 0);
    _instance(_, "get$_run", 0, 4, null, ["call$1$4", "call$4"], ["_run$1$4", "_run$4"], 24, 1);
    _instance(_, "get$_runUnary", 0, 5, null, ["call$2$5", "call$5"], ["_runUnary$2$5", "_runUnary$5"], 23, 1);
    _instance(_, "get$_runBinary", 0, 6, null, ["call$3$6", "call$6"], ["_runBinary$3$6", "_runBinary$6"], 43, 1);
    _instance_2_u(_, "get$_onErrorWithLongStackTrace", "_onErrorWithLongStackTrace$2", 52);
    _instance(_, "get$_onErrorWithoutLongStackTrace", 0, 5, null, ["call$5"], ["_onErrorWithoutLongStackTrace$5"], 17, 0);
    _instance(_, "get$_createTimer", 0, 5, null, ["call$5"], ["_createTimer$5"], 42, 0);
    _instance_1_u(G.Game.prototype, "get$Main", "Main$1", 64);
    _instance_0_u(_ = N.GameObject.prototype, "get$OnAwake", "OnAwake$0", 0);
    _instance_0_u(_, "get$OnStart", "OnStart$0", 0);
    _instance_0_u(_, "get$OnEarlyUpdate", "OnEarlyUpdate$0", 0);
    _instance_0_u(_, "get$OnFixedUpdate", "OnFixedUpdate$0", 0);
    _instance_0_u(_, "get$OnUpdate", "OnUpdate$0", 0);
    _instance_0_u(_, "get$OnLateUpdate", "OnLateUpdate$0", 0);
    _instance_1_u(_, "get$OnEarlyRender", "OnEarlyRender$1", 5);
    _instance_1_u(_, "get$OnRender", "OnRender$1", 5);
    _instance_1_u(_, "get$OnLateRender", "OnLateRender$1", 5);
    _instance_1_u(_, "get$OnGUI", "OnGUI$1", 5);
    _instance_1_u(_, "get$OnQuit", "OnQuit$1", 5);
    _static_0(A, "Input_Mouse__Clear$closure", "Mouse__Clear", 0);
    _static_1(A, "Input_Mouse__UpdateMousePosition$closure", "Mouse__UpdateMousePosition", 18);
    _static_0(A, "Input_Input__UpdateData$closure", "Input__UpdateData", 0);
    _instance_2_u(_ = A.Keyboard.prototype, "get$keyCallback", "keyCallback$2", 68);
    _instance_0_u(_, "get$OnLateUpdate", "OnLateUpdate$0", 0);
    _instance_0_u(_ = Y.Scene.prototype, "get$OnAwake", "OnAwake$0", 0);
    _instance_0_u(_, "get$SpawnStar", "SpawnStar$0", 0);
    _instance_0_u(_, "get$OnUpdate", "OnUpdate$0", 0);
    _instance_1_u(_, "get$OnRender", "OnRender$1", 5);
    _static_1(V, "app_component_template__viewFactory_AppComponentHost0$closure", "viewFactory_AppComponentHost0", 66);
    _instance(_ = O.StackZoneSpecification.prototype, "get$_stack_zone_specification$_registerCallback", 0, 4, null, ["call$1$4", "call$4"], ["_stack_zone_specification$_registerCallback$1$4", "_stack_zone_specification$_registerCallback$4"], 35, 1);
    _instance(_, "get$_stack_zone_specification$_registerUnaryCallback", 0, 4, null, ["call$2$4", "call$4"], ["_stack_zone_specification$_registerUnaryCallback$2$4", "_stack_zone_specification$_registerUnaryCallback$4"], 34, 1);
    _instance(_, "get$_stack_zone_specification$_registerBinaryCallback", 0, 4, null, ["call$3$4", "call$4"], ["_stack_zone_specification$_registerBinaryCallback$3$4", "_stack_zone_specification$_registerBinaryCallback$4"], 87, 1);
    _instance(_, "get$_stack_zone_specification$_handleUncaughtError", 0, 5, null, ["call$5"], ["_stack_zone_specification$_handleUncaughtError$5"], 17, 0);
    _instance(_, "get$_stack_zone_specification$_errorCallback", 0, 5, null, ["call$5"], ["_stack_zone_specification$_errorCallback$5"], 36, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, H._CryptoUtils, H._HashBase, H.HttpServer, H.HttpConnectionsInfo, H.HttpHeaders, H.HeaderValue, H.HttpSession, H.ContentType, H.Cookie, H.HttpRequest, H.HttpResponse, H.HttpClient, H.HttpClientRequest, H.HttpClientResponse, H.HttpClientResponseCompressionState, H.HttpClientCredentials, H.HttpConnectionInfo, H.RedirectInfo, H.DetachedSocket, H.HttpException, H.RedirectException, H.HttpDate, H._HttpHeaders, H._HeaderValue, H._Cookie, H._ServiceObject, H._CopyingBytesBuilder, P.Stream, P.StreamTransformerBase, H._Uint8ListConversionSink, H._StreamSinkImpl, P.ChunkedConversionSink, H._HttpOutgoing, H._HttpClientConnection, H._ConnectionInfo, H._ConnectionTarget, H._HttpClient, P.LinkedListEntry, H._ProxyConfiguration, H._Proxy, H._HttpConnectionInfo, H._AuthenticationScheme, H._Credentials, H._HttpClientCredentials, H._RedirectInfo, H._Const, H._CharCode, H._State, H._HttpVersion, H._MessageType, H._HttpDetachedStreamSubscription, H._HttpSession, H._HttpSessionManager, H.HttpOverrides, H.WebSocketStatus, H.CompressionOptions, H.WebSocketTransformer, H.WebSocket, H.WebSocketException, H._WebSocketMessageType, H._WebSocketOpcode, H._EncodedString, H._CompressionMaxWindowBits, H._WebSocketPing, H._WebSocketPong, H._WebSocketPerMessageDeflate, H._WebSocketConsumer, J.Interceptor, J.JSIndexable, J.JSObject, J._Growable, J.ArrayIterator, H.CastStreamSubscription, P.Iterable, H.CastIterator, P.MapMixin, P._ListBase_Object_ListMixin, H.ExternalName, H.Since, H.HttpStatus, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FollowedByIterator, H.WhereTypeIterator, H.IterableElementError, H.LinkedListEntry0, H._LinkedListIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.UnmodifiableListError, H.NonGrowableListError, H.Sort, H.Symbol, H.JsGetName, H.JsBuiltin, H.RtiUniverseFieldNames, H.Native, H._Patch, P.MapView, H.ConstantMap, H.Closure, H.InternalMap, H.JSInvocationMirror, H.Primitives, H.JsCache, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.Creates, H.Returns, H.JSName, H.TypeImpl, H.TypeVariable, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, H._LazyMangledNamesMap, H._LazyReflectiveNamesMap, H.SupportedBrowser, H.Experimental, H.DomName, H.DocsEditable, H.Unstable, H._NativeFloat32x4List_Object_ListMixin, H._NativeInt32x4List_Object_ListMixin, H._NativeFloat64x2List_Object_ListMixin, H.NativeFloat32x4, H.NativeInt32x4, H.NativeFloat64x2, H.Recipe, H.Rti, H._FunctionParameters, H._Type, H._Universe, H._Parser, H.TypeRule, H._Utils, P._TimerImpl, P._AsyncAwaitCompleter, P._AsyncStarStreamController, P._IterationMarker, P._SyncStarIterator, P._BufferingStreamSubscription, P._BroadcastStreamController, P.DeferredLibrary, P.DeferredLoadException, P.FutureOr, P.Future, P.TimeoutException, P.Completer, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P._AsyncRun, P.StreamSubscription, P.EventSink, P.StreamConsumer, P.StreamSink, P.StreamTransformer, P.StreamIterator, P._ControllerEventSinkWrapper, P.StreamController, P.SynchronousStreamController, P._StreamControllerLifecycle, P._StreamControllerBase, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._StreamSinkWrapper, P._AddStreamState, P._EventSink, P._EventDispatch, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._DoneStreamSubscription, P._BroadcastSubscriptionWrapper, P._StreamIterator, P._EventSinkWrapper, P._HandlerEventSink, P.Timer, P.AsyncError, P._ZoneFunction, P.ZoneSpecification, P._ZoneSpecification, P.ZoneDelegate, P.Zone, P._ZoneDelegate, P._Zone, P._HashMapKeyIterator, P._Es6MapIterator, P._SetBase, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.HashMap, P.HashSet, P.IterableMixin, P.HasNextIterator, P.LinkedHashMap, P.LinkedHashSet, P._LinkedListIterator0, P.ListMixin, P._MapBaseValueIterator, P._UnmodifiableMapMixin, P.Queue, P._DoubleLink, P._DoubleLinkedQueueIterator, P._ListQueueIterator, P.SetMixin, P._SetBase_Object_SetMixin, P._SplayTreeNode, P._SplayTree, P._TypeTest, P._SplayTreeIterator, P.StringConversionSinkMixin, P.Codec, P._Base64Encoder, P._Base64Decoder, P._ConverterStreamEventSink, P.HtmlEscapeMode, P._JsonStringifier, P._JsonPrettyPrintMixin, P.StringSink, P._ClosableStringSink, P._StringConversionSinkAsStringSinkAdapter, P._Utf8Encoder, P._Utf8Decoder, P._BigIntImpl, P._BigIntReduction, P._BigIntClassic, P.Deprecated, P._Override, P.Provisional, P._Proxy0, P.pragma, P.BigInt, P.bool, P.Comparable, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P.Exception, P._Exception, P.FormatException, P.IntegerDivisionByZeroException, P.Expando, P.Function, P.Invocation, P._Invocation, P.BidirectionalIterator, P.List, P.Map, P.MapEntry, P.Null, P.Pattern, P.Match, P.RegExp, P.RegExpMatch, P.Sink, P.StackTrace, P._StringStackTrace, P.Stopwatch, P.String, P.RuneIterator, P.StringBuffer, P.Symbol0, P.Type, P.Uri, P._Uri, P.UriData, P._SimpleUri, P._FakeUserTag, P.ServiceExtensionResponse, P.UserTag, P.Metric, P.Metrics, P.ServiceProtocolInfo, P.Service, P.Flow, P.Timeline, P.TimelineTask, P._AsyncBlock, P._SyncBlock, W.CanvasRenderingContext, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase, W.CssStyleDeclarationBase, W._ElementFactoryProvider, W.ScrollAlignment, W.Events, W._GeopositionWrapper, W.GlobalEventHandlers, W.InputElementBase, W.HiddenInputElement, W.TextInputElementBase, W.SearchInputElement, W.TextInputElement, W.UrlInputElement, W.TelephoneInputElement, W.EmailInputElement, W.PasswordInputElement, W.RangeInputElementBase, W.DateInputElement, W.MonthInputElement, W.WeekInputElement, W.TimeInputElement, W.LocalDateTimeInputElement, W.NumberInputElement, W.RangeInputElement, W.CheckboxInputElement, W.RadioButtonInputElement, W.FileUploadInputElement, W.SubmitButtonInputElement, W.ImageButtonInputElement, W.ResetButtonInputElement, W.ButtonInputElement, W._WrappedEvent, W._BeforeUnloadEventStreamProvider, W._JenkinsSmiHash, W.CanvasImageSource, W.WindowBase, W.LocationBase, W.HistoryBase, W.CssClassSet, W.CssRect, W.Dimension, W.EventStreamProvider, W.ElementStream, W.CustomStream, W._StreamPool, W._CustomEventStreamProvider, W._Html5NodeValidator, W.ImmutableListMixin, W.KeyCode, W.KeyLocation, W._KeyName, W.KeyboardEventStream, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.ReadyState, W._WrappedIterator, W._HttpRequestUtils, W.FixedSizeListIterator, W._VariableSizeListIterator, W.Console, W._JSElementUpgrader, W._DOMWindowCrossFrame, W._LocationCrossFrame, W._HistoryCrossFrame, W.Platform, W.ElementUpgrader, W.NodeValidator, W.NodeTreeSanitizer, W._TrustedHtmlTreeSanitizer, W.UriPolicy, W._SameOriginUriPolicy, W._ThrowsNodeValidator, W._ValidatingTreeSanitizer, P._StructuredClone, P._AcceptStructuredClone, P.ContextAttributes, P._TypedImageData, P.Device, P.Lists, P.NodeListWrapper, P._KeyRangeFactoryProvider, P.BytesBuilder, P._CopyingBytesBuilder0, P._BytesBuilder, P.IOException, P.OSError, P._BufferAndStart, P._IOCrypto, P.ZLibOption, P.RawZLibFilter, P.Directory, P.FileSystemEntity, P._AsyncDirectoryListerOps, P._AsyncDirectoryLister, P._EmbedderConfig, P._EventHandler, P.FileMode, P.FileLock, P.File0, P.RandomAccessFile, P.FileSystemException, P._RandomAccessFileOps, P._RandomAccessFile, P.FileSystemEntityType, P.FileStat, P.FileSystemEvent, P._FileSystemWatcher, P._IOResourceInfo, P._IOService, P.IOSink, P._StreamSinkImpl0, P.Link, P._Namespace, P._NetworkProfiling, P._HttpProfile, P._SocketProfile, P.IOOverrides, P.Platform0, P._Platform, P._ProcessUtils, P.ProcessInfo, P.ProcessStartMode, P.Process, P.ProcessResult, P.ProcessSignal, P.SignalException, P.ProcessException, P.SecureSocket, P.RawSecureSocket, P.X509Certificate, P._FilterStatus, P._ExternalBuffer, P._SecureFilter, P.TlsException, P.SecurityContext, P._ServiceObject0, P.InternetAddressType, P.InternetAddress, P.NetworkInterface, P.RawServerSocket, P.ServerSocket, P.SocketDirection, P.SocketOption, P._RawSocketOptions, P.RawSocketOption, P.RawSocketEvent, P.ConnectionTask, P.RawSocket, P.Socket, P.Datagram, P.SocketException, P._StdSink, P.StdoutException, P.StdinException, P._StdConsumer, P.StdioType, P._StdIOUtils, P.RawSynchronousSocket, P.Capability, P.IsolateSpawnException, P.Isolate, P.SendPort, P.ReceivePort, P.RawReceivePort, P.RemoteError, P.TransferableTypedData, P.JsObject, P._JSRandom, P._Random, P._JSSecureRandom, P._JenkinsSmiHash0, P.Point, P.Random, P._RectangleBase, P.MirrorSystem, P.Mirror, P.IsolateMirror, P.DeclarationMirror, P.ObjectMirror, P.InstanceMirror, P.ClosureMirror, P.LibraryMirror, P.LibraryDependencyMirror, P.CombinatorMirror, P.TypeMirror, P.ClassMirror, P.FunctionTypeMirror, P.TypedefMirror, P.MethodMirror, P.VariableMirror, P.ParameterMirror, P.SourceLocation, P.Comment0, P.MirrorsUsed, P._SvgElementFactoryProvider, P.ByteBuffer, P.TypedData, P.Endian, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Int64List, P.Uint64List, P.Float32List, P.Float64List, P.Float32x4List, P.Int32x4List, P.Float64x2List, P.Float32x4, P.Int32x4, P.Float64x2, P.UnmodifiableByteBufferView, P.UnmodifiableByteDataView, P._UnmodifiableListMixin, G.ThrowingSlowComponentLoader, M.Injector, Y.NgClass, R.NgFor, R._RecordViewTuple, K.NgIf, X.NgStyle, V.SwitchView, V.NgSwitch, V.NgSwitchWhen, V.NgSwitchDefault, L.NgTemplateOutlet, B._ObservableStrategy, B._PromiseStrategy, B.AsyncPipe, R.DatePipe, L.JsonPipe, Y.LowerCasePipe, D._NumberPipe, D._NumberFormatStyle, M.ReplacePipe, T.SlicePipe, B.UpperCasePipe, K.TransitionalAppHost, M.ChangeDetectionHost, U.DefaultEquality, A.SimpleChange, S.ChangeDetectorRef, N.ComponentState, A.ChangeDetectorState, A.ChangeDetectionStrategy, A.ChangeDetectionCheckedState, R.DefaultIterableDiffer, R.CollectionChangeRecord, R._DuplicateItemRecordList, R._DuplicateMap, N.DefaultKeyValueDiffer, N.KeyValueChangeRecord, E.PipeTransform, B.Inject, B.Injectable, B.Optional, B.Self, B.SkipSelf, B.Host, S.OpaqueToken, Q.AppViewUtils, D.ComponentRef, D.ComponentFactory, M.ComponentLoader, L.SlowComponentLoader, Z.ElementRef, O.ComponentStyles, D.TemplateRef, R.ViewContainerRef, D.ViewFragment, L.ViewRef, L.EmbeddedViewRef, A.View, E._ComponentViewData, B.DynamicView, B.DynamicViewData, E._EmbeddedViewData, G._HostViewData, A.RenderViewData, A.ViewData, O.Directive, O.Pipe, O.Attribute, O._Query, O.Input0, O.Output, O.HostBinding, O.HostListener, N.AfterChanges, N.OnInit, N.OnDestroy, N.DoCheck, N.AfterContentInit, N.AfterContentChecked, N.AfterViewInit, N.AfterViewChecked, M.Typed, A.ViewEncapsulation, L.Visibility, E.TemplateSecurityContext, E.SanitizationService, E.SafeValue, D.Testability, D.TestabilityRegistry, D.GetTestability, D._NoopGetTestability, Y.NgZone, Y._WrappedTimer, Y.NgZoneError, M.GenerateInjector, B.ReflectiveInjector, B._FlatProviders, G.Module, Q.RuntimeInjectorBuilder, Q.Provider, U.ExceptionHandler, T.BrowserExceptionHandler, K.BrowserGetTestability, B.ChangeDetectionPerfRecord, B.AngularTools, B.AngularProfiler, L.EventManager, L._KeyEventsHandler, L._ParsedEvent, F.Messages, V.DomSanitizationService, R.DomSanitizationServiceImpl, R.SafeValueImpl, K.star, K.Background, U.Colors, G.CursorData, G.Event0, G._GameUpdateEventEmitter, N.GameObject, A.CursorType, A.Input, A.MouseButton, A.KeyCode0, N.Time, Y.Transform0, V.Vector2, V.Vector3, V.Vector4, M.Particle, M.Particles, Q.Star, Q.AppComponent, M.CanonicalizedMap, S._CombinedIterator, L._DeduplicatingIterator, U.Equality, U.EqualityBy, U.IdentityEquality, U.IterableEquality, U.ListEquality, U._UnorderedEquality, U._MapEntry, U.MapEquality, U.MultiEquality, U.DeepCollectionEquality, U.CaseInsensitiveEquality, M.DelegatingMap, M._DelegatingIterableBase, A._IteratorZip, Y.PriorityQueue, Y.HeapPriorityQueue, Q._QueueList_Object_ListMixin, Y.UnionSetController, L.NonGrowableListMixin, L.UnmodifiableSetMixin, L.UnmodifiableMapMixin, B.Pair, B.DateSymbols, T.Intl, T.BidiFormatter, T.TextDirection, T.Bidi, T._CompactStyleBase, T._CompactFormatType, T.NumberFormat, T.DateFormat, T._DateFormatField, T._DateBuilder, T._Stream, T._NumberParser, T._NumberFormatParser, T._StringIterator, T.MicroMoney, T._MicroMoney, B.NumberSymbols, B.CompactNumberSymbols, X.UninitializedLocaleData, X.MessageLookup, X.LocaleDataException, X.LocaleDataReader, E.PluralCase, Q.JS, Q._Anonymous, Y.Level, L.LogRecord, F.Logger, R._NoInline, R._TryInline, Q.Immutable, Q.Required, Q._AlwaysThrows, Q._Checked, Q._Experimental, Q._Factory, Q._IsTest, Q._IsTestGroup, Q._Literal, Q._MustCallSuper, Q._NonVirtual, Q._OptionalTypeArgs, Q._Protected, Q._Sealed, Q._Virtual, Q._VisibleForOverriding, Q._VisibleForTesting, M.Context, M._PathDirection, M._PathRelation, O.Style, X.ParsedPath, X.PathException, U.Chain, A.Frame, X.LazyChain, T.LazyTrace, O.StackZoneSpecification, O._Node, Y.Trace, N.UnparsedFrame, Q.VMTrace]);
    _inheritMany(H._HashBase, [H._MD5, H._SHA1]);
    _inheritMany(H.HttpClientCredentials, [H.HttpClientBasicCredentials, H.HttpClientDigestCredentials]);
    _inherit(H._ContentType, H._HeaderValue);
    _inheritMany(P.Stream, [H._HttpIncoming, H._HttpInboundMessageListInt, H._HttpInboundMessage, H.__HttpServer_Stream__ServiceObject, H._DetachedSocket, H._HttpDetachedIncoming, H._HttpParser, H.__WebSocketImpl_Stream__ServiceObject, H.CastStream, P._StreamImpl, P.StreamView, P._AsBroadcastStream, P._EmptyStream, P._ForwardingStream, P._BoundSinkStream, P._BoundSubscriptionStream, W._EventStream, W._ElementListEventStreamImpl, W._CustomEventStreamImpl, P._FileStream, P.SecureServerSocket, P.RawSecureServerSocket, P._RawSecureSocket, P.RawDatagramSocket, P._StdStream, P._ReceivePortImpl]);
    _inherit(H._HttpRequest, H._HttpInboundMessage);
    _inherit(H._HttpClientResponse, H._HttpInboundMessageListInt);
    _inheritMany(P.StreamTransformerBase, [P.Converter, H._WebSocketProtocolTransformer, H._WebSocketTransformerImpl, H._WebSocketOutgoingTransformer, H.CastStreamTransformer, P._StreamSinkTransformer, P._StreamBindTransformer, P._StreamSubscriptionTransformer, P.LineSplitter]);
    _inheritMany(P.Converter, [H._ToUint8List, H.CastConverter, P._UnicodeSubsetEncoder, P._UnicodeSubsetDecoder, P.Base64Encoder, P.Base64Decoder, P._FusedConverter, P.HtmlEscape, P.JsonEncoder, P.JsonUtf8Encoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder, P.ZLibEncoder, P.ZLibDecoder, P._WindowsCodePageEncoder, P._WindowsCodePageDecoder]);
    _inherit(H._IOSinkImpl, H._StreamSinkImpl);
    _inherit(H._HttpOutboundMessage, H._IOSinkImpl);
    _inheritMany(H._HttpOutboundMessage, [H._HttpResponse, H._HttpClientRequest]);
    _inheritMany(P.ChunkedConversionSink, [P.ByteConversionSink, P._SimpleCallbackSink, P._JsonEncoderSink, P._JsonUtf8EncoderSink, P.StringConversionSink]);
    _inheritMany(P.ByteConversionSink, [H._HttpGZipSink, P.ByteConversionSinkBase, P._Utf8StringSinkAdapter, P._Utf8ConversionSink, P._BufferSink, P._FilterSink]);
    _inherit(H.__HttpConnection_LinkedListEntry__ServiceObject, P.LinkedListEntry);
    _inherit(H._HttpConnection, H.__HttpConnection_LinkedListEntry__ServiceObject);
    _inherit(H._HttpServer, H.__HttpServer_Stream__ServiceObject);
    _inheritMany(H._Credentials, [H._SiteCredentials, H._ProxyCredentials]);
    _inheritMany(H._HttpClientCredentials, [H._HttpClientBasicCredentials, H._HttpClientDigestCredentials]);
    _inherit(H._HttpOverridesScope, H.HttpOverrides);
    _inherit(H._WebSocketImpl, H.__WebSocketImpl_Stream__ServiceObject);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.Event, W.AbstractWorker, W.AccessibleNodeList, W.AnimationEffectReadOnly, W.AnimationEffectTimingReadOnly, W.AnimationTimeline, W.WorkletGlobalScope, W.AuthenticatorResponse, W.BackgroundFetchFetch, W.BackgroundFetchManager, W.BarProp, W.BarcodeDetector, W.Blob, W.BluetoothRemoteGattDescriptor, W.Body, W.BudgetState, W.CacheStorage, W.CanvasGradient, W.CanvasPattern, W.CanvasRenderingContext2D, W.ChildNode, W.Client, W.Clients, W.CookieStore, W.Coordinates, W.Credential, W.CredentialUserData, W.CredentialsContainer, W.Crypto, W.CryptoKey, W.Css, W.CssRule, W.CssStyleValue, W.CssTransformComponent, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.StyleSheet, W.CssVariableReferenceValue, W.CustomElementRegistry, W.DataTransfer, W.DataTransferItem, W.DataTransferItemList, W.DeprecatedStorageInfo, W.DeprecatedStorageQuota, W.ReportBody, W.DetectedBarcode, W.DetectedFace, W.DetectedText, W.DeviceAcceleration, W.DeviceRotationRate, W.Entry, W.DirectoryReader, W.DocumentOrShadowRoot, W.DomError, W.DomException, W.DomImplementation, W.DomIterator, W.DomMatrixReadOnly, W.DomParser, W.DomPointReadOnly, W.DomQuad, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomStringMap, W.DomTokenList, W.External, W.FaceDetector, W._FileList_Interceptor_ListMixin, W.FileSystem, W.FontFace, W.FontFaceSource, W.FormData, W.Gamepad, W.GamepadButton, W.GamepadPose, W.Geolocation, W.Geoposition, W.Headers, W.History, W._HtmlCollection_Interceptor_ListMixin, W.HtmlHyperlinkElementUtils, W.IdleDeadline, W.ImageBitmap, W.ImageBitmapRenderingContext, W.ImageCapture, W.ImageData, W.InputDeviceCapabilities, W.IntersectionObserver, W.IntersectionObserverEntry, W.Location, W.MediaCapabilities, W.MediaCapabilitiesInfo, W.MediaDeviceInfo, W.MediaError, W.MediaKeyStatusMap, W.MediaKeySystemAccess, W.MediaKeys, W.MediaKeysPolicy, W.MediaList, W.MediaMetadata, W.MediaSession, W.MediaSettingsRange, W.MemoryInfo, W.MessageChannel, W.Metadata, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.MutationObserver, W.MutationRecord, W.NavigationPreloadManager, W.NavigatorConcurrentHardware, W.NavigatorAutomationInformation, W.NavigatorCookies, W.NavigatorID, W.NavigatorLanguage, W.NavigatorOnLine, W.NavigatorUserMediaError, W.NodeFilter, W.NodeIterator, W._NodeList_Interceptor_ListMixin, W.NonDocumentTypeChildNode, W.NonElementParentNode, W.NoncedElement, W.OffscreenCanvasRenderingContext2D, W.OverconstrainedError, W.PaintRenderingContext2D, W.PaintSize, W.ParentNode, W.Path2D, W.PaymentAddress, W.PaymentInstruments, W.PaymentManager, W.PaymentResponse, W.PerformanceEntry, W.PerformanceNavigation, W.PerformanceObserver, W.PerformanceObserverEntryList, W.PerformanceServerTiming, W.PerformanceTiming, W.Permissions, W.PhotoCapabilities, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.PositionError, W.Presentation, W.PresentationReceiver, W.PushManager, W.PushMessageData, W.PushSubscription, W.PushSubscriptionOptions, W.Range, W.RelatedApplication, W.ReportingObserver, W.ResizeObserver, W.ResizeObserverEntry, W.RtcCertificate, W.RtcIceCandidate, W.RtcLegacyStatsReport, W.RtcRtpContributingSource, W.RtcRtpReceiver, W.RtcRtpSender, W.RtcSessionDescription, W._RtcStatsReport_Interceptor_MapMixin, W.RtcStatsResponse, W.Screen, W.ScrollState, W.Selection, W.SharedArrayBuffer, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionAlternative, W.SpeechRecognitionResult, W.SpeechSynthesisVoice, W.StaticRange, W._Storage_Interceptor_MapMixin, W.StorageManager, W.StyleMedia, W.StylePropertyMapReadonly, W.SyncManager, W.TextDetector, W.TextMetrics, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefault, W.TrackDefaultList, W.TreeWalker, W.TrustedHtml, W.TrustedScriptUrl, W.TrustedUrl, W.UnderlyingSourceBase, W.Url, W.UrlSearchParams, W.UrlUtilsReadOnly, W.VRCoordinateSystem, W.VRDisplayCapabilities, W.VREyeParameters, W.VRFrameData, W.VRPose, W.VRStageBounds, W.VRStageBoundsPoint, W.VRStageParameters, W.ValidityState, W.VideoPlaybackQuality, W.VideoTrack, W.VttRegion, W.WindowBase64, W.WorkletAnimation, W.XPathEvaluator, W.XPathExpression, W.XPathNSResolver, W.XPathResult, W.XmlSerializer, W.XsltProcessor, W._Bluetooth, W._BluetoothCharacteristicProperties, W._BluetoothRemoteGATTServer, W._BluetoothRemoteGATTService, W._BluetoothUUID, W._BudgetService, W._Cache, W._CanvasPath, W.__CssRuleList_Interceptor_ListMixin, W._DOMFileSystemSync, W._EntrySync, W._DirectoryReaderSync, W._FileReaderSync, W._FileWriterSync, W.__GamepadList_Interceptor_ListMixin, W._HTMLAllCollection, W._Mojo, W._MojoHandle, W._MojoWatcher, W._NFC, W.__NamedNodeMap_Interceptor_ListMixin, W._PagePopupController, W._Report, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, W._SubtleCrypto, W._USBAlternateInterface, W._USBConfiguration, W._USBDevice, W._USBEndpoint, W._USBInTransferResult, W._USBInterface, W._USBIsochronousInTransferPacket, W._USBIsochronousInTransferResult, W._USBIsochronousOutTransferPacket, W._USBIsochronousOutTransferResult, W._USBOutTransferResult, W._WindowTimers, W._WorkerLocation, W._Worklet, P.Cursor, P.IdbFactory, P.Index, P.KeyRange, P.ObjectStore, P.Observation, P.Observer, P.ObserverChanges, P.Angle, P.AnimatedAngle, P.AnimatedBoolean, P.AnimatedEnumeration, P.AnimatedInteger, P.AnimatedLength, P.AnimatedLengthList, P.AnimatedNumber, P.AnimatedNumberList, P.AnimatedPreserveAspectRatio, P.AnimatedRect, P.AnimatedString, P.AnimatedTransformList, P.FilterPrimitiveStandardAttributes, P.FitToViewBox, P.Length, P._LengthList_Interceptor_ListMixin, P.Matrix, P.Number, P._NumberList_Interceptor_ListMixin, P.Point0, P.PointList, P.PreserveAspectRatio, P.Rect, P._StringList_Interceptor_ListMixin, P.Tests, P.Transform, P._TransformList_Interceptor_ListMixin, P.UnitTypes, P.UriReference, P.ZoomAndPan, P.AudioBuffer, P.AudioListener, P.AudioParam, P._AudioParamMap_Interceptor_MapMixin, P.AudioTrack, P.AudioWorkletProcessor, P.PeriodicWave, P.ActiveInfo, P.AngleInstancedArrays, P.Buffer, P.Canvas, P.ColorBufferFloat, P.CompressedTextureAstc, P.CompressedTextureAtc, P.CompressedTextureETC1, P.CompressedTextureEtc, P.CompressedTexturePvrtc, P.CompressedTextureS3TC, P.CompressedTextureS3TCsRgb, P.DebugRendererInfo, P.DebugShaders, P.DepthTexture, P.DrawBuffers, P.EXTsRgb, P.ExtBlendMinMax, P.ExtColorBufferFloat, P.ExtColorBufferHalfFloat, P.ExtDisjointTimerQuery, P.ExtDisjointTimerQueryWebGL2, P.ExtFragDepth, P.ExtShaderTextureLod, P.ExtTextureFilterAnisotropic, P.Framebuffer, P.GetBufferSubDataAsync, P.LoseContext, P.OesElementIndexUint, P.OesStandardDerivatives, P.OesTextureFloat, P.OesTextureFloatLinear, P.OesTextureHalfFloat, P.OesTextureHalfFloatLinear, P.OesVertexArrayObject, P.Program, P.Query, P.Renderbuffer, P.RenderingContext, P.RenderingContext2, P.Sampler, P.Shader, P.ShaderPrecisionFormat, P.Sync, P.Texture, P.TimerQueryExt, P.TransformFeedback, P.UniformLocation, P.VertexArrayObject, P.VertexArrayObjectOes, P.WebGL, P._WebGL2RenderingContextBase, P._WebGLRenderingContextBase, P.SqlDatabase, P.SqlError, P.SqlResultSet, P._SqlResultSetRowList_Interceptor_ListMixin, P.SqlTransaction]);
    _inherit(J.JSMutableIndexable, J.JSIndexable);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, U.JsTestability, U.JsTestabilityRegistry]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeIterable, H.TakeWhileIterable, H.SkipIterable, H.SkipWhileIterable, H.FollowedByIterable, H.WhereTypeIterable, P.IterableBase, H._ConstantMapKeyIterable, H._StringAllMatchesIterable, P.LinkedList0, P.DoubleLinkedQueue, P.Runes]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin, H.CastSet, H.CastQueue]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.CastMap, P.UnmodifiableMapBase, H.JsLinkedHashMap, P._HashMap, P._JsonMap, W._AttributeMap, W._DataAttributeMap, P._CaseInsensitiveStringMap]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, H.FixedLengthListBase, W._ChildrenElementList, W.ElementList, W._FrozenElementList, W._ChildNodeListLazy, W._WrappedList, P.FilteredElementList, B.CombinedListView]);
    _inheritMany(H.UnmodifiableListBase, [H.CodeUnits, P.UnmodifiableListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P._Es6MapIterable, P._MapBaseValueIterable, P._SplayTreeKeyIterable, P._SplayTreeValueIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H._ListIndicesIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable, P._GeneratorIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.TakeWhileIterator, H.SkipIterator, H.SkipWhileIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(H.EfficientLengthFollowedByIterable, H.FollowedByIterable);
    _inheritMany(P.IterableBase, [H.LinkedList, H._AllMatchesIterable, P._SyncStarIterable, S.CombinedIterableView, L._DeduplicatingIterableView, O.EmptyUnmodifiableSet, A.IterableZip, T._StringIterable, B.PathSet]);
    _inheritMany(P.UnmodifiableMapBase, [H.ListMapView, L.CombinedMapView]);
    _inheritMany(P.MapView, [P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, K.PathMap]);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inheritMany(H.Closure, [H.ConstantStringMap_values_closure, H.Instantiation, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.Closure_fromTearOff_closure, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._TimerImpl$periodic_closure, P._SyncBroadcastStreamController__sendData_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._PendingEvents_schedule_closure, P._CustomZone_bindCallback_closure, P._CustomZone_bindUnaryCallback_closure, P._CustomZone_bindCallbackGuarded_closure, P._CustomZone_bindUnaryCallbackGuarded_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindUnaryCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.runZoned_closure, P._HashMap_values_closure, P._CustomHashMap_closure, P._LinkedCustomHashSet_closure, P.HashMap_HashMap$from_closure, P.MapBase_mapToString_closure, P._symbolMapToStringMap_closure, P.NoSuchMethodError_toString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__checkNonWindowsPathReservedCharacters_closure, P._Uri__makePath_closure, P._Uri__makeQuery_writeParameter, P._Uri__makeQuery_closure, P.UriData__writeUri_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.MidiInputMap_keys_closure, W.MidiInputMap_values_closure, W.MidiOutputMap_keys_closure, W.MidiOutputMap_values_closure, W.RtcStatsReport_keys_closure, W.RtcStatsReport_values_closure, W.Storage_keys_closure, W.Storage_values_closure, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.convertDartToNative_Dictionary_closure, P.CssClassSetImpl_add_closure, P._completeRequest_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, P.AudioParamMap_keys_closure, P.AudioParamMap_values_closure, G.createRandomAppId_char, G.appInjector_closure0, G.appInjector_closure1, G.appInjector_closure2, G.appInjector_closure3, G.appInjector_closure, Y.ApplicationRef$__closure, Y.ApplicationRef$__closure0, Y.ApplicationRef_bootstrap_closure, Y.ApplicationRef__loadedRootComponent_closure, M.ChangeDetectionHost_run_closure, M.ChangeDetectionHost_run__closure, M.ChangeDetectionHost_run__closure0, D.Testability__watchAngularEvents_closure, D.Testability__watchAngularEvents_closure0, D.Testability__watchAngularEvents__closure, D.Testability__watchAngularEvents___closure, D.Testability__runCallbacksIfReady_closure, Y.NgZone$_debugAsyncStackTraces_closure, Y.NgZone__scheduleMicrotask_closure, Y.NgZone__run_closure, Y.NgZone__runUnary_closure, Y.NgZone__runBinary_closure, Y.NgZone__onErrorWithLongStackTrace_closure, Y.NgZone__createTimer_closure, Y.NgZone__createTimer_closure0, Y.NgZone__checkStable_closure, K.BrowserGetTestability_addToWindow_closure, K.BrowserGetTestability_addToWindow_closure0, K.BrowserGetTestability_addToWindow_closure1, K.BrowserGetTestability_addToWindow__closure, K.BrowserGetTestability__createRegistry_closure, K.BrowserGetTestability__createRegistry_closure0, K.BrowserGetTestability__createRegistry__closure, K.Background_Render_closure, G._GameUpdateEventEmitter_SetStream_closure0, G._GameUpdateEventEmitter_SetStream_closure, G._GameUpdateEventEmitter_Emit_closure, N.GameObject__Wrap_closure, A.Mouse_Create_closure, A.Mouse_Create_closure0, A.Keyboard_CreateKeyboard_closure, A.Keyboard_CreateKeyboard_closure0, A.Keyboard_CreateKeyboard_closure1, M.Particles_Update_closure, M.Particles_Update_closure0, M.Particles_Render_closure, Y.Scene_OnUpdate_closure, Y.Scene_OnUpdate_closure0, Y.Scene_OnRender_closure, Q.AppComponent_ngOnInit_closure, M.Context_join_closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, X.ParsedPath_normalize_closure, L.WindowsStyle_absolutePathToUri_closure, U.Chain_capture_closure0, U.Chain_capture_closure, U.Chain_Chain$current_closure, U.Chain_Chain$forTrace_closure, U.Chain_Chain$parse_closure, U.Chain_Chain$parse_closure0, U.Chain_terse_closure, U.Chain_foldFrames_closure, U.Chain_foldFrames_closure0, U.Chain_toTrace_closure, U.Chain_toString_closure0, U.Chain_toString__closure0, U.Chain_toString_closure, U.Chain_toString__closure, A.Frame_Frame$parseVM_closure, A.Frame_Frame$parseV8_closure, A.Frame_Frame$parseV8_closure_parseLocation, A.Frame_Frame$parseFirefox_closure, A.Frame_Frame$parseFriendly_closure, X.LazyChain_toTrace_closure, T.LazyTrace_foldFrames_closure, O.StackZoneSpecification_chainFor_closure, O.StackZoneSpecification_chainFor_closure0, O.StackZoneSpecification__registerCallback_closure, O.StackZoneSpecification__registerUnaryCallback_closure, O.StackZoneSpecification__registerUnaryCallback__closure, O.StackZoneSpecification__registerBinaryCallback_closure, O.StackZoneSpecification__registerBinaryCallback__closure, O.StackZoneSpecification__currentTrace_closure, Y.Trace_Trace$from_closure, Y.Trace__parseVM_closure, Y.Trace$parseV8_closure, Y.Trace$parseV8_closure0, Y.Trace$parseJSCore_closure, Y.Trace$parseJSCore_closure0, Y.Trace$parseFirefox_closure, Y.Trace$parseFirefox_closure0, Y.Trace$parseFriendly_closure, Y.Trace$parseFriendly_closure0, Y.Trace_foldFrames_closure, Y.Trace_foldFrames_closure0, Y.Trace_toString_closure0, Y.Trace_toString_closure]);
    _inherit(H.ConstantProtoMap, H.ConstantStringMap);
    _inheritMany(H.Instantiation, [H.Instantiation1, H.Instantiation2, H.Instantiation3, H.Instantiation4, H.Instantiation5, H.Instantiation6, H.Instantiation7, H.Instantiation8, H.Instantiation9, H.Instantiation10, H.Instantiation11, H.Instantiation12, H.Instantiation13, H.Instantiation14, H.Instantiation15, H.Instantiation16, H.Instantiation17, H.Instantiation18, H.Instantiation19, H.Instantiation20]);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, P.FallThroughError, H.RuntimeError, H.DeferredNotLoadedError, H.UnimplementedNoSuchMethodError, H.MainError, P.AssertionError, H._Error, P.JsonUnsupportedObjectError, P._CompileTimeError, P._DuplicatedFieldInitializerError, P.CastError, P.NullThrownError, P.ArgumentError, P.AbstractClassInstantiationError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, P.LateInitializationError, U.UnstableExpressionError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H.JavaScriptIndexingBehavior, J.JSMutableIndexable);
    _inherit(H.FallThroughErrorImplementation, P.FallThroughError);
    _inheritMany(P.AssertionError, [H._AssertionError, H._UnreachableError, P.TypeError, A.InjectionError]);
    _inheritMany(H.JsLinkedHashMap, [H.Es6LinkedHashMap, P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inherit(H._LazyMangledInstanceNamesMap, H._LazyMangledNamesMap);
    _inherit(H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat32x4List_Object_ListMixin);
    _inherit(H.NativeFloat32x4List, H._NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin, H._NativeInt32x4List_Object_ListMixin);
    _inherit(H.NativeInt32x4List, H._NativeInt32x4List_Object_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin, H._NativeFloat64x2List_Object_ListMixin);
    _inherit(H.NativeFloat64x2List, H._NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inheritMany(H._Error, [H._CastError, H._TypeError]);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inherit(P._BroadcastStream, P._ControllerStream);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription, P._SinkTransformerStreamSubscription]);
    _inherit(P._BroadcastSubscription, P._ControllerSubscription);
    _inheritMany(P._BroadcastStreamController, [P._SyncBroadcastStreamController, P._AsyncBroadcastStreamController]);
    _inherit(P._AsBroadcastStreamController, P._SyncBroadcastStreamController);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inherit(P._StreamControllerAddStreamState, P._AddStreamState);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inheritMany(P._ForwardingStream, [P._WhereStream, P._MapStream, P._ExpandStream, P._HandleErrorStream, P._TakeStream, P._TakeWhileStream, P._SkipStream, P._SkipWhileStream, P._DistinctStream]);
    _inherit(P._StateStreamSubscription, P._ForwardingStreamSubscription);
    _inherit(P._StreamHandlerTransformer, P._StreamSinkTransformer);
    _inheritMany(P._Zone, [P._CustomZone, P._RootZone]);
    _inheritMany(P._HashMap, [P._IdentityHashMap, P._CustomHashMap]);
    _inherit(P._Es6LinkedIdentityHashMap, P._LinkedIdentityHashMap);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet, P._UnmodifiableSet]);
    _inheritMany(P._HashSet, [P._IdentityHashSet, P._CustomHashSet]);
    _inheritMany(P._LinkedHashSet, [P._LinkedIdentityHashSet, P._LinkedCustomHashSet]);
    _inherit(P.DoubleLinkedQueueEntry, P._DoubleLink);
    _inherit(P._DoubleLinkedQueueEntry, P.DoubleLinkedQueueEntry);
    _inheritMany(P._DoubleLinkedQueueEntry, [P._DoubleLinkedQueueElement, P._DoubleLinkedQueueSentinel]);
    _inherit(P.SetBase, P._SetBase_Object_SetMixin);
    _inherit(P._SplayTreeMapNode, P._SplayTreeNode);
    _inheritMany(P._SplayTree, [P._SplayTreeMap__SplayTree_MapMixin, P._SplayTreeSet__SplayTree_IterableMixin]);
    _inherit(P.SplayTreeMap, P._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(P._SplayTreeIterator, [P._SplayTreeKeyIterator, P._SplayTreeValueIterator, P._SplayTreeNodeIterator]);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inherit(P.StringConversionSinkBase, P.StringConversionSinkMixin);
    _inheritMany(P.StringConversionSinkBase, [P._StringSinkConversionSink, P._UnicodeSubsetEncoderSink, P._Base64DecoderSink, P._HtmlEscapeSink, P._LineSplitterSink, P._StringAdapterSink, P._WindowsCodePageEncoderSink]);
    _inheritMany(P._StringSinkConversionSink, [P._JsonDecoderSink, P._StringCallbackSink]);
    _inheritMany(P.Codec, [P.Encoding, P.Base64Codec, P._FusedCodec, P._InvertedCodec, P.JsonCodec, P.ZLibCodec, P.GZipCodec]);
    _inheritMany(P.Encoding, [P.AsciiCodec, P.Latin1Codec, P.Utf8Codec, P.SystemEncoding]);
    _inheritMany(P._UnicodeSubsetEncoder, [P.AsciiEncoder, P.Latin1Encoder]);
    _inheritMany(P._UnicodeSubsetDecoder, [P.AsciiDecoder, P.Latin1Decoder]);
    _inheritMany(P.ByteConversionSinkBase, [P._ErrorHandlingAsciiDecoderSink, P._SimpleAsciiDecoderSink, P._Base64EncoderSink, P._ByteAdapterSink, P._ByteCallbackSink, P._Latin1DecoderSink, P._WindowsCodePageDecoderSink]);
    _inherit(P._BufferCachingBase64Encoder, P._Base64Encoder);
    _inheritMany(P._Base64EncoderSink, [P._AsciiBase64EncoderSink, P._Utf8Base64EncoderSink]);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inheritMany(P._JsonStringifier, [P._JsonStringStringifier, P._JsonUtf8Stringifier]);
    _inherit(P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin, P._JsonStringStringifier);
    _inherit(P._JsonStringStringifierPretty, P.__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin);
    _inherit(P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin, P._JsonUtf8Stringifier);
    _inherit(P._JsonUtf8StringifierPretty, P.__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin);
    _inherit(P._Latin1AllowInvalidDecoderSink, P._Latin1DecoderSink);
    _inherit(P._LineSplitterEventSink, P._LineSplitterSink);
    _inherit(P.ClosableStringSink, P.StringSink);
    _inherit(P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin, P._Utf8Encoder);
    _inherit(P._Utf8EncoderSink, P.__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(P.Metric, [P.Gauge, P.Counter]);
    _inheritMany(W.EventTarget, [W.Node, W.Sensor, W.AccessibleNode, W.Animation, W.ApplicationCache, W.BackgroundFetchRegistration, W.BatteryManager, W.BroadcastChannel, W.MediaStreamTrack, W.WorkerGlobalScope, W.EventSource, W.FileReader, W.FileWriter, W.FontFaceSet, W.HttpRequestEventTarget, W.MediaDevices, W.MediaKeySession, W.MediaQueryList, W.MediaRecorder, W.MediaSource, W.MediaStream, W.MessagePort, W.MidiAccess, W.MidiPort, W.NetworkInformation, W.Notification, W.OffscreenCanvas, W.PaymentRequest, W.Performance, W.PermissionStatus, W.PresentationAvailability, W.PresentationConnection, W.PresentationConnectionList, W.PresentationRequest, W.RemotePlayback, W.RtcDataChannel, W.RtcDtmfSender, W.RtcPeerConnection, W.ScreenOrientation, W.ServiceWorker, W.ServiceWorkerContainer, W.ServiceWorkerRegistration, W.SharedWorker, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.SpeechRecognition, W.SpeechSynthesis, W.SpeechSynthesisUtterance, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VR, W.VRDevice, W.VRDisplay, W.VRSession, W.VideoTrackList, W.VisualViewport, W.WebSocket0, W.Window, W.WindowEventHandlers, W.Worker, W.WorkerPerformance, W._BluetoothDevice, W._BluetoothRemoteGATTCharacteristic, W._Clipboard, W._MojoInterfaceInterceptor, W._USB, P.Database, P.Request, P.Transaction, P.AudioNode, P.BaseAudioContext, P.AudioTrackList]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W.Document, W.DocumentFragment, W._Attr, W._DocumentType]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.Event, [W.ExtendableEvent, W.AnimationEvent, W.AnimationPlaybackEvent, W.ApplicationCacheErrorEvent, W.BeforeInstallPromptEvent, W.BeforeUnloadEvent, W.BlobEvent, W.ClipboardEvent, W.CloseEvent, W.UIEvent, W.CustomEvent, W.DeviceMotionEvent, W.DeviceOrientationEvent, W.ErrorEvent, W.FontFaceSetLoadEvent, W.GamepadEvent, W.HashChangeEvent, W.MediaEncryptedEvent, W.MediaKeyMessageEvent, W.MediaQueryListEvent, W.MediaStreamEvent, W.MediaStreamTrackEvent, W.MessageEvent, W.MidiConnectionEvent, W.MidiMessageEvent, W.MutationEvent, W.PageTransitionEvent, W.PaymentRequestUpdateEvent, W.PopStateEvent, W.PresentationConnectionAvailableEvent, W.PresentationConnectionCloseEvent, W.ProgressEvent, W.PromiseRejectionEvent, W.RtcDataChannelEvent, W.RtcDtmfToneChangeEvent, W.RtcPeerConnectionIceEvent, W.RtcTrackEvent, W.SecurityPolicyViolationEvent, W.SensorErrorEvent, W.SpeechRecognitionError, W.SpeechRecognitionEvent, W.SpeechSynthesisEvent, W.StorageEvent, W.TrackEvent, W.TransitionEvent, W.VRDeviceEvent, W.VRDisplayEvent, W.VRSessionEvent, W._MojoInterfaceRequestEvent, W._USBConnectionEvent, P.VersionChangeEvent, P.AudioProcessingEvent, P.OfflineAudioCompletionEvent, P.ContextEvent]);
    _inheritMany(W.ExtendableEvent, [W.AbortPaymentEvent, W.BackgroundFetchEvent, W.CanMakePaymentEvent, W.ExtendableMessageEvent, W.FetchEvent, W.ForeignFetchEvent, W.InstallEvent, W.NotificationEvent, W.PaymentRequestEvent, W.PushEvent, W.SyncEvent]);
    _inheritMany(W.Sensor, [W.OrientationSensor, W.Accelerometer, W.AmbientLightSensor, W.Gyroscope, W.Magnetometer]);
    _inheritMany(W.OrientationSensor, [W.AbsoluteOrientationSensor, W.RelativeOrientationSensor]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.MediaElement, W.BRElement, W.BaseElement, W.BodyElement, W.ButtonElement, W.CanvasElement, W.ContentElement, W.DListElement, W.DataElement, W.DataListElement, W.DetailsElement, W.DialogElement, W.DivElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.HRElement, W.HeadElement, W.HeadingElement, W.HtmlHtmlElement, W.IFrameElement, W.ImageElement, W.InputElement, W.LIElement, W.LabelElement, W.LegendElement, W.LinkElement, W.MapElement, W.MenuElement, W.MetaElement, W.MeterElement, W.ModElement, W.OListElement, W.ObjectElement, W.OptGroupElement, W.OptionElement, W.OutputElement, W.ParagraphElement, W.ParamElement, W.PictureElement, W.PreElement, W.ProgressElement, W.QuoteElement, W.ScriptElement, W.SelectElement, W.ShadowElement, W.SlotElement, W.SourceElement, W.SpanElement, W.StyleElement, W.TableCaptionElement, W.TableCellElement, W.TableColElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement, W.TimeElement, W.TitleElement, W.TrackElement, W.UListElement, W.UnknownElement, W._HTMLDirectoryElement, W._HTMLFontElement, W._HTMLFrameElement, W._HTMLFrameSetElement, W._HTMLMarqueeElement]);
    _inherit(W.AnimationEffectTiming, W.AnimationEffectTimingReadOnly);
    _inheritMany(W.WorkletGlobalScope, [W.AnimationWorkletGlobalScope, W.PaintWorkletGlobalScope, P.AudioWorkletGlobalScope]);
    _inheritMany(W.MediaElement, [W.AudioElement, W.VideoElement]);
    _inheritMany(W.AuthenticatorResponse, [W.AuthenticatorAssertionResponse, W.AuthenticatorAttestationResponse]);
    _inheritMany(W.BackgroundFetchEvent, [W.BackgroundFetchClickEvent, W.BackgroundFetchFailEvent, W.BackgroundFetchedEvent]);
    _inherit(W.BackgroundFetchSettledFetch, W.BackgroundFetchFetch);
    _inheritMany(W.CharacterData, [W.Text, W.Comment, W.ProcessingInstruction]);
    _inherit(W.CDataSection, W.Text);
    _inherit(W.CanvasCaptureMediaStreamTrack, W.MediaStreamTrack);
    _inheritMany(W.UIEvent, [W.CompositionEvent, W.FocusEvent, W.KeyboardEvent, W.MouseEvent, W.TextEvent, W.TouchEvent]);
    _inheritMany(W.CssRule, [W.CssCharsetRule, W.CssGroupingRule, W.CssFontFaceRule, W.CssImportRule, W.CssKeyframeRule, W.CssKeyframesRule, W.CssNamespaceRule, W.CssPageRule, W.CssStyleRule, W.CssViewportRule]);
    _inherit(W.CssConditionRule, W.CssGroupingRule);
    _inheritMany(W.CssStyleValue, [W.CssResourceValue, W.CssKeywordValue, W.CssNumericValue, W.CssPositionValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssImageValue, W.CssResourceValue);
    _inheritMany(W.CssTransformComponent, [W.CssMatrixComponent, W.CssPerspective, W.CssRotation, W.CssScale, W.CssSkew, W.CssTranslation]);
    _inheritMany(W.CssConditionRule, [W.CssMediaRule, W.CssSupportsRule]);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W._CssStyleDeclarationSet, W.__CssStyleDeclarationSet_Object_CssStyleDeclarationBase);
    _inherit(W.CssStyleSheet, W.StyleSheet);
    _inherit(W.CssUnitValue, W.CssNumericValue);
    _inherit(W.CssurlImageValue, W.CssImageValue);
    _inheritMany(W.WorkerGlobalScope, [W.DedicatedWorkerGlobalScope, W.ServiceWorkerGlobalScope, W.SharedWorkerGlobalScope]);
    _inheritMany(W.ReportBody, [W.DeprecationReport, W.InterventionReport]);
    _inheritMany(W.Entry, [W.DirectoryEntry, W.FileEntry]);
    _inheritMany(W.AnimationTimeline, [W.DocumentTimeline, W.ScrollTimeline]);
    _inherit(W.DomMatrix, W.DomMatrixReadOnly);
    _inherit(W.DomPoint, W.DomPointReadOnly);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.ElementEvents, W.Events);
    _inheritMany(W.Credential, [W.FederatedCredential, W.PasswordCredential, W.PublicKeyCredential]);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Document, [W.HtmlDocument, W.XmlDocument]);
    _inheritMany(W.HtmlCollection, [W.HtmlFormControlsCollection, W.HtmlOptionsCollection]);
    _inheritMany(W.HttpRequestEventTarget, [W.HttpRequest0, W.HttpRequestUpload]);
    _inherit(W.KeyframeEffectReadOnly, W.AnimationEffectReadOnly);
    _inherit(W.KeyframeEffect, W.KeyframeEffectReadOnly);
    _inherit(W.LinearAccelerationSensor, W.Accelerometer);
    _inheritMany(W.MidiPort, [W.MidiInput, W.MidiOutput]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.NavigatorConcurrentHardware, [W.Navigator, W._WorkerNavigator]);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.PerformanceEntry, [W.PerformanceLongTaskTiming, W.PerformanceMark, W.PerformanceMeasure, W.PerformanceResourceTiming, W.PerformancePaintTiming, W.TaskAttributionTiming]);
    _inherit(W.PerformanceNavigationTiming, W.PerformanceResourceTiming);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.MouseEvent, [W.PointerEvent, W.WheelEvent]);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W.ShadowRoot, W.DocumentFragment);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W.StylePropertyMap, W.StylePropertyMapReadonly);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.VRFrameOfReference, W.VRCoordinateSystem);
    _inherit(W.VttCue, W.TextTrackCue);
    _inheritMany(W._WrappedEvent, [W._BeforeUnloadEvent, W.KeyEvent]);
    _inherit(W.WindowClient, W.Client);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._EntrySync, [W._DirectoryEntrySync, W._FileEntrySync]);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Body, [W._Request, W._Response]);
    _inherit(W._ResourceProgressEvent, W.ProgressEvent);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W._AttributeMap, [W._ElementAttributeMap, W._NamespacedAttributeMap]);
    _inheritMany(W.CssRect, [W._ContentCssRect, W._PaddingCssRect, W._BorderCssRect, W._MarginCssRect]);
    _inherit(W._ContentCssListRect, W._ContentCssRect);
    _inheritMany(P.SetBase, [P.CssClassSetImpl, M._UnionSet_SetBase_UnmodifiableSetMixin]);
    _inheritMany(P.CssClassSetImpl, [W._MultiElementCssClassSet, W._ElementCssClassSet, P.AttributeClassSet]);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._CustomKeyEventStreamImpl, W._CustomEventStreamImpl);
    _inherit(W._KeyboardEventHandler, W.EventStreamProvider);
    _inheritMany(W._SimpleNodeValidator, [W._CustomElementNodeValidator, W._TemplatingNodeValidator]);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.CursorWithValue, P.Cursor);
    _inherit(P.OpenDBRequest, P.Request);
    _inheritMany(P._FilterSink, [P._ZLibEncoderSink, P._ZLibDecoderSink]);
    _inheritMany(P.FileSystemEntity, [P._Directory, P._File, P._Link]);
    _inherit(P._FileStreamConsumer, P.StreamConsumer);
    _inheritMany(P.FileSystemEvent, [P.FileSystemCreateEvent, P.FileSystemModifyEvent, P.FileSystemDeleteEvent, P.FileSystemMoveEvent]);
    _inheritMany(P._IOResourceInfo, [P._ReadWriteResourceInfo, P._ProcessResourceInfo]);
    _inheritMany(P._ReadWriteResourceInfo, [P._FileResourceInfo, P._SocketResourceInfo]);
    _inherit(P._IOSinkImpl0, P._StreamSinkImpl0);
    _inherit(P._IOOverridesScope, P.IOOverrides);
    _inheritMany(P.TlsException, [P.HandshakeException, P.CertificateException]);
    _inherit(P.Stdin, P._StdStream);
    _inherit(P.Stdout, P._StdSink);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inheritMany(P._RectangleBase, [P.Rectangle, P.MutableRectangle]);
    _inherit(P.TypeVariableMirror, P.TypeMirror);
    _inheritMany(P.SvgElement, [P.GraphicsElement, P.AnimationElement, P.DescElement, P.DiscardElement, P.FEBlendElement, P.FEColorMatrixElement, P.FEComponentTransferElement, P.FECompositeElement, P.FEConvolveMatrixElement, P.FEDiffuseLightingElement, P.FEDisplacementMapElement, P.FEDistantLightElement, P.FEFloodElement, P._SVGComponentTransferFunctionElement, P.FEGaussianBlurElement, P.FEImageElement, P.FEMergeElement, P.FEMergeNodeElement, P.FEMorphologyElement, P.FEOffsetElement, P.FEPointLightElement, P.FESpecularLightingElement, P.FESpotLightElement, P.FETileElement, P.FETurbulenceElement, P.FilterElement, P._GradientElement, P.MarkerElement, P.MaskElement, P.MetadataElement, P.PatternElement, P.ScriptElement0, P.StopElement, P.StyleElement0, P.SymbolElement, P.TitleElement0, P.ViewElement, P._SVGFEDropShadowElement, P._SVGMPathElement]);
    _inheritMany(P.GraphicsElement, [P.AElement, P.GeometryElement, P.ClipPathElement, P.DefsElement, P.ForeignObjectElement, P.GElement, P.ImageElement0, P.SvgSvgElement, P.SwitchElement, P.TextContentElement, P.UseElement]);
    _inheritMany(P.AnimationElement, [P.AnimateElement, P.AnimateMotionElement, P.AnimateTransformElement, P.SetElement]);
    _inheritMany(P.GeometryElement, [P.CircleElement, P.EllipseElement, P.LineElement, P.PathElement, P.PolygonElement, P.PolylineElement, P.RectElement]);
    _inheritMany(P._SVGComponentTransferFunctionElement, [P.FEFuncAElement, P.FEFuncBElement, P.FEFuncGElement, P.FEFuncRElement]);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P._GradientElement, [P.LinearGradientElement, P.RadialGradientElement]);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TextContentElement, [P.TextPositioningElement, P.TextPathElement]);
    _inheritMany(P.TextPositioningElement, [P.TSpanElement, P.TextElement]);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(P.TypedData, [P._TypedIntList, P._TypedFloatList]);
    _inherit(P.UnmodifiableUint8ListView, P._UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt8ListView, P._UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint8ClampedListView, P._UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint16ListView, P._UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt16ListView, P._UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint32ListView, P._UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32ListView, P._UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableUint64ListView, P._UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt64ListView, P._UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableInt32x4ListView, P._UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32x4ListView, P._UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64x2ListView, P._UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat32ListView, P._UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inherit(P.UnmodifiableFloat64ListView, P._UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin);
    _inheritMany(P.AudioNode, [P.AnalyserNode, P.AudioScheduledSourceNode, P.AudioDestinationNode, P.AudioWorkletNode, P.BiquadFilterNode, P.ChannelMergerNode, P.ChannelSplitterNode, P.ConvolverNode, P.DelayNode, P.DynamicsCompressorNode, P.GainNode, P.IirFilterNode, P.MediaElementAudioSourceNode, P.MediaStreamAudioDestinationNode, P.MediaStreamAudioSourceNode, P.PannerNode, P.ScriptProcessorNode, P.StereoPannerNode, P.WaveShaperNode]);
    _inheritMany(P.AudioScheduledSourceNode, [P.AudioBufferSourceNode, P.ConstantSourceNode, P.OscillatorNode]);
    _inheritMany(P.BaseAudioContext, [P.AudioContext, P.OfflineAudioContext]);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(E.HierarchicalInjector, M.Injector);
    _inheritMany(E.HierarchicalInjector, [Y._Injector$minimalApp, G._LazyInjector, G.ElementInjector, R.EmptyInjector, A.MapInjector, B._RuntimeInjector]);
    _inherit(K.InvalidPipeArgumentException, P.FormatException);
    _inheritMany(D._NumberPipe, [D.DecimalPipe, D.PercentPipe, D.CurrencyPipe]);
    _inherit(Y.ApplicationRef, M.ChangeDetectionHost);
    _inheritMany(U.DefaultEquality, [A._DevModeEquality, U._DevModeEquality0]);
    _inherit(S.MultiToken, S.OpaqueToken);
    _inherit(O._UnscopedComponentStyles, O.ComponentStyles);
    _inherit(V.ViewContainer, M.ComponentLoader);
    _inheritMany(A.View, [A.RenderView, G.HostView]);
    _inheritMany(A.RenderView, [E.ComponentView, E.EmbeddedView]);
    _inherit(O.Component, O.Directive);
    _inheritMany(O._Query, [O.ContentChildren, O.ContentChild, O._ViewQuery]);
    _inheritMany(O._ViewQuery, [O.ViewChildren, O.ViewChild]);
    _inherit(A.NoProviderError, A.InjectionError);
    _inheritMany(Q.Provider, [Q.ClassProvider, Q.ExistingProvider, Q.FactoryProvider, Q.ValueProvider]);
    _inheritMany(E.SafeValue, [V.SafeHtml, V.SafeStyle, V.SafeUrl, V.SafeResourceUrl]);
    _inheritMany(R.SafeValueImpl, [R.SafeHtmlImpl, R.SafeStyleImpl, R.SafeUrlImpl, R.SafeResourceUrlImpl]);
    _inherit(G.Game, G._GameUpdateEventEmitter);
    _inheritMany(N.GameObject, [A._Cursor, A.Mouse, A.Keyboard, Y.Scene]);
    _inherit(V.ViewAppComponent0, E.ComponentView);
    _inherit(V._ViewAppComponentHost0, G.HostView);
    _inheritMany(U._UnorderedEquality, [U.UnorderedIterableEquality, U.SetEquality]);
    _inherit(N.EqualityMap, M.DelegatingMap);
    _inheritMany(M._DelegatingIterableBase, [M.DelegatingIterable, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin, M.MapValueSet]);
    _inheritMany(M.DelegatingIterable, [M.DelegatingSet, M.DelegatingList, M.DelegatingQueue]);
    _inheritMany(M.DelegatingSet, [E.EqualitySet, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin]);
    _inherit(Q.QueueList, Q._QueueList_Object_ListMixin);
    _inherit(Q._CastQueueList, Q.QueueList);
    _inherit(M.UnionSet, M._UnionSet_SetBase_UnmodifiableSetMixin);
    _inherit(L._NonGrowableListView_DelegatingList_NonGrowableListMixin, M.DelegatingList);
    _inherit(L.NonGrowableListView, L._NonGrowableListView_DelegatingList_NonGrowableListMixin);
    _inherit(L.UnmodifiableSetView, L._UnmodifiableSetView_DelegatingSet_UnmodifiableSetMixin);
    _inherit(M.MapKeySet, M._MapKeySet__DelegatingIterableBase_UnmodifiableSetMixin);
    _inheritMany(T._CompactStyleBase, [T._CompactStyleWithNegative, T._CompactStyle]);
    _inherit(T._CompactNumberFormat, T.NumberFormat);
    _inheritMany(T._DateFormatField, [T._DateFormatLiteralField, T._DateFormatQuotedField, T._DateFormatPatternField]);
    _inherit(T._LoosePatternField, T._DateFormatPatternField);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SetBase_Object_SetMixin, P.SetMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: -1}, {func: 1, ret: P.Null}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: -1, args: [W.CanvasRenderingContext2D]}, {func: 1, ret: Y.Trace}, {func: 1, ret: A.Frame, args: [P.String]}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: A.Frame}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: P.Null, args: [-1]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone,, P.StackTrace]}, {func: 1, ret: -1, args: [W.MouseEvent]}, {func: 1, ret: -1, args: [W.KeyboardEvent]}, {func: 1, ret: P.Null, args: [M.Particle]}, {func: 1, ret: P.Null, args: [Q.Star]}, {func: 1, ret: U.Chain}, {func: 1, bounds: [P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}, 1]}, {func: 1, bounds: [P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}, {func: 1, ret: -1, args: [P.Uint8List, P.String, P.int]}, {func: 1, ret: P.double, args: [P.int]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: Y.NgZone}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.bool, args: [A.Frame]}, {func: 1, ret: Y.Trace, args: [P.String]}, {func: 1, bounds: [P.Object, P.Object], ret: {func: 1, ret: 0, args: [1]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1]}]}, {func: 1, bounds: [P.Object], ret: {func: 1, ret: 0}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0}]}, {func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, ret: M.Injector, opt: [M.Injector]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.String, args: [Y.Trace]}, {func: 1, ret: P.String, args: [A.Frame]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: 0, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}, 1, 2]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}, {func: 1, ret: P.int, args: [A.Frame]}, {func: 1, ret: P.bool}, {func: 1, ret: -1, args: [P.Function]}, {func: 1, ret: P.Null, args: [Y.NgZoneError]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, ret: P.bool, args: [[P.Set, P.String]]}, {func: 1, ret: M.Injector}, {func: 1, ret: -1, args: [, U.Chain]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: D.Testability}, {func: 1, ret: P.Zone}, {func: 1, ret: Q.AppViewUtils}, {func: 1, args: [W.Element], opt: [P.bool]}, {func: 1, ret: [P.List,,]}, {func: 1, ret: P.Null, args: [P.bool]}, {func: 1, ret: U.JsTestability, args: [W.Element]}, {func: 1, ret: [P.List, U.JsTestability]}, {func: 1, ret: U.JsTestability, args: [D.Testability]}, {func: 1, ret: P.Null, args: [K.star]}, {func: 1, ret: -1, args: [P.num]}, {func: 1, ret: Y.ApplicationRef}, {func: 1, ret: [G.HostView, Q.AppComponent], args: [M.Injector]}, {func: 1, args: [P.String]}, {func: 1, ret: -1, args: [P.int, W.KeyboardEvent]}, {func: 1, args: [, P.String]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.String}, {func: 1, ret: -1, opt: [P.num, P.num, P.num]}, {func: 1, args: [,,]}, {func: 1, args: [W.Event]}, {func: 1, ret: Y.Trace, args: [Y.Trace]}, {func: 1, ret: P.bool, args: [Y.Trace]}, {func: 1, ret: [P.List, A.Frame], args: [Y.Trace]}, {func: 1, ret: P.int, args: [Y.Trace]}, {func: 1, ret: [P.Future,,]}, {func: 1, ret: [P.Future,,], args: [P.Object]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: A.Frame, args: [,,]}, {func: 1, ret: P.Null, opt: [,]}, {func: 1, ret: [P.Future, W.PresentationConnection]}, {func: 1, ret: P.Null, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Function]}, {func: 1, ret: -1, opt: [P.int]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: A.Frame, args: [A.Frame]}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, bounds: [P.Object, P.Object, P.Object], ret: {func: 1, ret: 0, args: [1, 2]}, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: 0, args: [1, 2]}]}, {func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}, {func: 1, ret: -1, args: [P.String]}, {func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}, {func: 1, bounds: [P.num], ret: 0, args: [0, 0]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: -1, args: [P.String, P.int]}], interceptorsByTag: null, leafTags: null};
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.CanvasGradient_methods = W.CanvasGradient.prototype;
    C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
    C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AsciiDecoder_false_127 = new P.AsciiDecoder(false, 127);
    C.AsciiEncoder_127 = new P.AsciiEncoder(127);
    C.C_AsciiCodec = new P.AsciiCodec();
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_Base64Decoder = new P.Base64Decoder();
    C.C_ComponentFactory = new D.ComponentFactory([Q.AppComponent]);
    C.C_Console = new W.Console();
    C.C_DomSanitizationServiceImpl = new R.DomSanitizationServiceImpl();
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_JS_CONST6 = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST5 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST1 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST2 = function(hooks) { return hooks; }
;
    C.C_Latin1Codec = new P.Latin1Codec();
    C.C_Object = new P.Object();
    C.C_OpaqueToken = new S.OpaqueToken([P.String]);
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__JSRandom = new P._JSRandom();
    C.C__RootZone = new P._RootZone();
    C.Duration_0 = new P.Duration(0);
    C.EmptyInjector_null = new R.EmptyInjector(null);
    C.EventStreamProvider_error = new W.EventStreamProvider("error", [W.Event]);
    C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown", [W.KeyboardEvent]);
    C.EventStreamProvider_keypress = new W.EventStreamProvider("keypress", [W.KeyboardEvent]);
    C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup", [W.KeyboardEvent]);
    C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown", [W.MouseEvent]);
    C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove", [W.MouseEvent]);
    C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup", [W.MouseEvent]);
    C.EventStreamProvider_resize = new W.EventStreamProvider("resize", [W.Event]);
    C.EventStreamProvider_success = new W.EventStreamProvider("success", [W.Event]);
    C.Event_0 = new G.Event0("Event.awake");
    C.Event_1 = new G.Event0("Event.start");
    C.Event_10 = new G.Event0("Event.quit");
    C.Event_2 = new G.Event0("Event.earlyUpdate");
    C.Event_3 = new G.Event0("Event.fixedUpdate");
    C.Event_4 = new G.Event0("Event.update");
    C.Event_5 = new G.Event0("Event.lateUpdate");
    C.Event_6 = new G.Event0("Event.earlyRender");
    C.Event_7 = new G.Event0("Event.render");
    C.Event_8 = new G.Event0("Event.lateRender");
    C.Event_9 = new G.Event0("Event.gui");
    C.KeyCode_31 = new A.KeyCode0(31, "KeyCode.a");
    C.KeyCode_34 = new A.KeyCode0(34, "KeyCode.d");
    C.KeyCode_49 = new A.KeyCode0(49, "KeyCode.s");
    C.KeyCode_53 = new A.KeyCode0(53, "KeyCode.w");
    C.Latin1Decoder_false_255 = new P.Latin1Decoder(false, 255);
    C.Latin1Encoder_255 = new P.Latin1Encoder(255);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [[P.List, P.Object]]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [P.Object]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty1 = makeConstList([]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qFt = H.setRuntimeTypeInfo(makeConstList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767]), [P.int]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty3, [P.Symbol0, null]);
    C.Symbol_call = new H.Symbol("call");
    C.Type_AppViewUtils_NWH = H.createRuntimeType(Q.AppViewUtils);
    C.Type_ApplicationRef_Aij = H.createRuntimeType(Y.ApplicationRef);
    C.Type_ByteBuffer_RkP = H.createRuntimeType(P.ByteBuffer);
    C.Type_ByteData_zNC = H.createRuntimeType(P.ByteData);
    C.Type_ComponentLoader_7xV = H.createRuntimeType(M.ComponentLoader);
    C.Type_DomSanitizationService_cKo = H.createRuntimeType(V.DomSanitizationService);
    C.Type_ExceptionHandler_qBE = H.createRuntimeType(U.ExceptionHandler);
    C.Type_Float32List_LB7 = H.createRuntimeType(P.Float32List);
    C.Type_Float64List_LB7 = H.createRuntimeType(P.Float64List);
    C.Type_Injector_aJC = H.createRuntimeType(M.Injector);
    C.Type_Int16List_uXf = H.createRuntimeType(P.Int16List);
    C.Type_Int32List_O50 = H.createRuntimeType(P.Int32List);
    C.Type_Int8List_ekJ = H.createRuntimeType(P.Int8List);
    C.Type_JSObject_8k0 = H.createRuntimeType(J.JSObject);
    C.Type_NgZone_6ty = H.createRuntimeType(Y.NgZone);
    C.Type_Null_Yyn = H.createRuntimeType(P.Null);
    C.Type_SanitizationService_bRS = H.createRuntimeType(E.SanitizationService);
    C.Type_SlowComponentLoader_qxe = H.createRuntimeType(L.SlowComponentLoader);
    C.Type_String_k8F = H.createRuntimeType(P.String);
    C.Type_TestabilityRegistry_IMm = H.createRuntimeType(D.TestabilityRegistry);
    C.Type_Testability_h8g = H.createRuntimeType(D.Testability);
    C.Type_Uint16List_2bx = H.createRuntimeType(P.Uint16List);
    C.Type_Uint32List_2bx = H.createRuntimeType(P.Uint32List);
    C.Type_Uint8ClampedList_Jik = H.createRuntimeType(P.Uint8ClampedList);
    C.Type_Uint8List_WLA = H.createRuntimeType(P.Uint8List);
    C.Type_bool_lhE = H.createRuntimeType(P.bool);
    C.Type_double_K1J = H.createRuntimeType(P.double);
    C.Type_int_tHn = H.createRuntimeType(P.int);
    C.Type_num_cv7 = H.createRuntimeType(P.num);
    C._ZoneFunction_3bB = new P._ZoneFunction(C.C__RootZone, P.async___rootCreatePeriodicTimer$closure(), [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1, args: [P.Timer]}]}]);
    C._ZoneFunction_7G2 = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterBinaryCallback$closure(), [P.Function]);
    C._ZoneFunction_Eeh = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterUnaryCallback$closure(), [P.Function]);
    C._ZoneFunction_NMc = new P._ZoneFunction(C.C__RootZone, P.async___rootHandleUncaughtError$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}]);
    C._ZoneFunction__RootZone__rootCreateTimer = new P._ZoneFunction(C.C__RootZone, P.async___rootCreateTimer$closure(), [{func: 1, ret: P.Timer, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Duration, {func: 1, ret: -1}]}]);
    C._ZoneFunction__RootZone__rootErrorCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootErrorCallback$closure(), [{func: 1, ret: P.AsyncError, args: [P.Zone, P.ZoneDelegate, P.Zone, P.Object, P.StackTrace]}]);
    C._ZoneFunction__RootZone__rootFork = new P._ZoneFunction(C.C__RootZone, P.async___rootFork$closure(), [{func: 1, ret: P.Zone, args: [P.Zone, P.ZoneDelegate, P.Zone, P.ZoneSpecification, [P.Map,,,]]}]);
    C._ZoneFunction__RootZone__rootPrint = new P._ZoneFunction(C.C__RootZone, P.async___rootPrint$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, P.String]}]);
    C._ZoneFunction__RootZone__rootRegisterCallback = new P._ZoneFunction(C.C__RootZone, P.async___rootRegisterCallback$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRun = new P._ZoneFunction(C.C__RootZone, P.async___rootRun$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRunBinary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunBinary$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootRunUnary = new P._ZoneFunction(C.C__RootZone, P.async___rootRunUnary$closure(), [P.Function]);
    C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P.async___rootScheduleMicrotask$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}]);
    C._ZoneSpecification_ALf = new P._ZoneSpecification(null, null, null, null, null, null, null, null, null, null, null, null, null);
  })();
  (function staticFields() {
    $.printToZone = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._RootZone__rootDelegate = null;
    $._toStringVisiting = [];
    $.Encoding__nameToEncoding = P.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", C.C_Latin1Codec, "iso-ir-100", C.C_Latin1Codec, "iso_8859-1", C.C_Latin1Codec, "iso-8859-1", C.C_Latin1Codec, "latin1", C.C_Latin1Codec, "l1", C.C_Latin1Codec, "ibm819", C.C_Latin1Codec, "cp819", C.C_Latin1Codec, "csisolatin1", C.C_Latin1Codec, "iso-ir-6", C.C_AsciiCodec, "ansi_x3.4-1968", C.C_AsciiCodec, "ansi_x3.4-1986", C.C_AsciiCodec, "iso_646.irv:1991", C.C_AsciiCodec, "iso646-us", C.C_AsciiCodec, "us-ascii", C.C_AsciiCodec, "us", C.C_AsciiCodec, "ibm367", C.C_AsciiCodec, "cp367", C.C_AsciiCodec, "csascii", C.C_AsciiCodec, "ascii", C.C_AsciiCodec, "csutf8", C.C_Utf8Codec, "utf-8", C.C_Utf8Codec], P.String, P.Encoding);
    $.Expando__keyCount = 0;
    $.Device__isOpera = null;
    $.Device__isIE = null;
    $.Device__isFirefox = null;
    $.Device__cachedCssPrefix = null;
    $.ChangeDetectionHost__current = null;
    $.appViewUtils = null;
    $.ComponentStyles__nextUniqueId = 0;
    $._tokenStack = null;
    $._debugThrowIfChanged = false;
    $.Mouse__Instance = null;
    $.Keyboard_Instance = null;
    $.KeyExtention_codes = H.setRuntimeTypeInfo([8, 9, 13, 16, 17, 18, 19, 20, 27, 33, 32, 34, 35, 36, 37, 38, 39, 40, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 144, 145, 182, 183, 186, 187, 188, 189, 190, 191, 219, 220, 221, 222], [P.int]);
    $.Time__lastTime = 0;
    $.Time__deltaTime = 0;
    $.Time__totalTime = 0;
    $.Time__scaledTotal = 0;
    $.styles$AppComponent = ["canvas._ngcontent-%ID%{position:absolute;top:0px;left:0px}"];
    $.ViewAppComponent0__componentStyles = null;
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)), "$isTypeErrorDecoder");
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()), "$isTypeErrorDecoder");
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return P._Future$zoneValue(null, C.C__RootZone, P.Null);
    });
    _lazy($, "_RootZone__rootMap", "$get$_RootZone__rootMap", function() {
      return P.HashMap_HashMap(null, null);
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List_NativeInt8List$fromList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int]));
    });
    _lazy($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", false);
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
      return {};
    });
    _lazy($, "CssClassSetImpl__validTokenRE", "$get$CssClassSetImpl__validTokenRE", function() {
      return P.RegExp_RegExp("^\\S+$", false);
    });
    _lazy($, "appGlobals", "$get$appGlobals", function() {
      return K.TransitionalAppHost$_();
    });
    _lazy($, "_idPlaceholder", "$get$_idPlaceholder", function() {
      return P.RegExp_RegExp("%ID%", false);
    });
    _lazy($, "NgZone__anyZoneKey", "$get$NgZone__anyZoneKey", function() {
      return P.Object$();
    });
    _lazy($, "star_rand", "$get$star_rand", function() {
      return P.Random_Random();
    });
    _lazy($, "_GameUpdateEventEmitter__awakeStream", "$get$_GameUpdateEventEmitter__awakeStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__startStream", "$get$_GameUpdateEventEmitter__startStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__earlyUpdateStream", "$get$_GameUpdateEventEmitter__earlyUpdateStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__fixedUpdateStream", "$get$_GameUpdateEventEmitter__fixedUpdateStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__updateStream", "$get$_GameUpdateEventEmitter__updateStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__lateUpdateStream", "$get$_GameUpdateEventEmitter__lateUpdateStream", function() {
      return P.StreamController_StreamController$broadcast(false, -1);
    });
    _lazy($, "_GameUpdateEventEmitter__earlyRenderStream", "$get$_GameUpdateEventEmitter__earlyRenderStream", function() {
      return P.StreamController_StreamController$broadcast(false, W.CanvasRenderingContext2D);
    });
    _lazy($, "_GameUpdateEventEmitter__renderStream", "$get$_GameUpdateEventEmitter__renderStream", function() {
      return P.StreamController_StreamController$broadcast(false, W.CanvasRenderingContext2D);
    });
    _lazy($, "_GameUpdateEventEmitter__lateRenderStream", "$get$_GameUpdateEventEmitter__lateRenderStream", function() {
      return P.StreamController_StreamController$broadcast(false, W.CanvasRenderingContext2D);
    });
    _lazy($, "_GameUpdateEventEmitter__guiStream", "$get$_GameUpdateEventEmitter__guiStream", function() {
      return P.StreamController_StreamController$broadcast(false, W.CanvasRenderingContext2D);
    });
    _lazy($, "_GameUpdateEventEmitter__quitStream", "$get$_GameUpdateEventEmitter__quitStream", function() {
      return P.StreamController_StreamController$broadcast(false, W.CanvasRenderingContext2D);
    });
    _lazy($, "Mouse__buttons", "$get$Mouse__buttons", function() {
      return P.List_List$filled(5, false, P.bool);
    });
    _lazy($, "Mouse__pressed", "$get$Mouse__pressed", function() {
      return P.List_List$filled(5, false, P.bool);
    });
    _lazy($, "Mouse__released", "$get$Mouse__released", function() {
      return P.List_List$filled(5, false, P.bool);
    });
    _lazy($, "Input__instance", "$get$Input__instance", function() {
      return A.Input$_();
    });
    _lazy($, "_rand", "$get$_rand", function() {
      return P.Random_Random();
    });
    _lazy($, "windows", "$get$windows", function() {
      return M.Context_Context($.$get$Style_windows());
    });
    _lazy($, "context", "$get$context", function() {
      return M.createInternal();
    });
    _lazy($, "Style_posix", "$get$Style_posix", function() {
      return E.PosixStyle$();
    });
    _lazy($, "Style_windows", "$get$Style_windows", function() {
      return L.WindowsStyle$();
    });
    _lazy($, "Style_url", "$get$Style_url", function() {
      return F.UrlStyle$();
    });
    _lazy($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazy($, "_specKey", "$get$_specKey", function() {
      return P.Object$();
    });
    _lazy($, "_vmFrame", "$get$_vmFrame", function() {
      return P.RegExp_RegExp("^#\\d+\\s+(\\S.*) \\((.+?)((?::\\d+){0,2})\\)$", false);
    });
    _lazy($, "_v8Frame", "$get$_v8Frame", function() {
      return P.RegExp_RegExp("^\\s*at (?:(\\S.*?)(?: \\[as [^\\]]+\\])? \\((.*)\\)|(.*))$", false);
    });
    _lazy($, "_v8UrlLocation", "$get$_v8UrlLocation", function() {
      return P.RegExp_RegExp("^(.*):(\\d+):(\\d+)|native$", false);
    });
    _lazy($, "_v8EvalLocation", "$get$_v8EvalLocation", function() {
      return P.RegExp_RegExp("^eval at (?:\\S.*?) \\((.*)\\)(?:, .*?:\\d+:\\d+)?$", false);
    });
    _lazy($, "_firefoxSafariFrame", "$get$_firefoxSafariFrame", function() {
      return P.RegExp_RegExp("^(?:([^@(/]*)(?:\\(.*\\))?((?:/[^/]*)*)(?:\\(.*\\))?@)?(.*?):(\\d*)(?::(\\d*))?$", false);
    });
    _lazy($, "_friendlyFrame", "$get$_friendlyFrame", function() {
      return P.RegExp_RegExp("^(\\S+)(?: (\\d+)(?::(\\d+))?)?\\s+([^\\d].*)$", false);
    });
    _lazy($, "_asyncBody", "$get$_asyncBody", function() {
      return P.RegExp_RegExp("<(<anonymous closure>|[^>]+)_async_body>", false);
    });
    _lazy($, "_initialDot", "$get$_initialDot", function() {
      return P.RegExp_RegExp("^\\.", false);
    });
    _lazy($, "Frame__uriRegExp", "$get$Frame__uriRegExp", function() {
      return P.RegExp_RegExp("^[a-zA-Z][-+.a-zA-Z\\d]*://", false);
    });
    _lazy($, "Frame__windowsRegExp", "$get$Frame__windowsRegExp", function() {
      return P.RegExp_RegExp("^([a-zA-Z]:[\\\\/]|\\\\\\\\)", false);
    });
    _lazy($, "StackZoneSpecification_disableKey", "$get$StackZoneSpecification_disableKey", function() {
      return P.Object$();
    });
    _lazy($, "_terseRegExp", "$get$_terseRegExp", function() {
      return P.RegExp_RegExp("(-patch)?([/\\\\].*)?$", false);
    });
    _lazy($, "_v8Trace", "$get$_v8Trace", function() {
      return P.RegExp_RegExp("\\n    ?at ", false);
    });
    _lazy($, "_v8TraceLine", "$get$_v8TraceLine", function() {
      return P.RegExp_RegExp("    ?at ", false);
    });
    _lazy($, "_firefoxSafariTrace", "$get$_firefoxSafariTrace", function() {
      return P.RegExp_RegExp("^(([.0-9A-Za-z_$/<]|\\(.*\\))*@)?[^\\s]*:\\d*$", true);
    });
    _lazy($, "_friendlyTrace", "$get$_friendlyTrace", function() {
      return P.RegExp_RegExp("^[^\\s<][^\\s]*( \\d+(:\\d+)?)?[ \\t]+[^\\s]+$", true);
    });
    _lazy($, "inJS", "$get$inJS", function() {
      return true;
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLElement: W.HtmlElement, AbortPaymentEvent: W.AbortPaymentEvent, AbsoluteOrientationSensor: W.AbsoluteOrientationSensor, Accelerometer: W.Accelerometer, AccessibleNode: W.AccessibleNode, AccessibleNodeList: W.AccessibleNodeList, AmbientLightSensor: W.AmbientLightSensor, HTMLAnchorElement: W.AnchorElement, Animation: W.Animation, AnimationEffectReadOnly: W.AnimationEffectReadOnly, AnimationEffectTiming: W.AnimationEffectTiming, AnimationEffectTimingReadOnly: W.AnimationEffectTimingReadOnly, AnimationEvent: W.AnimationEvent, AnimationPlaybackEvent: W.AnimationPlaybackEvent, AnimationTimeline: W.AnimationTimeline, AnimationWorkletGlobalScope: W.AnimationWorkletGlobalScope, ApplicationCache: W.ApplicationCache, DOMApplicationCache: W.ApplicationCache, OfflineResourceList: W.ApplicationCache, ApplicationCacheErrorEvent: W.ApplicationCacheErrorEvent, HTMLAreaElement: W.AreaElement, HTMLAudioElement: W.AudioElement, AuthenticatorAssertionResponse: W.AuthenticatorAssertionResponse, AuthenticatorAttestationResponse: W.AuthenticatorAttestationResponse, AuthenticatorResponse: W.AuthenticatorResponse, HTMLBRElement: W.BRElement, BackgroundFetchClickEvent: W.BackgroundFetchClickEvent, BackgroundFetchEvent: W.BackgroundFetchEvent, BackgroundFetchFailEvent: W.BackgroundFetchFailEvent, BackgroundFetchFetch: W.BackgroundFetchFetch, BackgroundFetchManager: W.BackgroundFetchManager, BackgroundFetchRegistration: W.BackgroundFetchRegistration, BackgroundFetchSettledFetch: W.BackgroundFetchSettledFetch, BackgroundFetchedEvent: W.BackgroundFetchedEvent, BarProp: W.BarProp, BarcodeDetector: W.BarcodeDetector, HTMLBaseElement: W.BaseElement, BatteryManager: W.BatteryManager, BeforeInstallPromptEvent: W.BeforeInstallPromptEvent, BeforeUnloadEvent: W.BeforeUnloadEvent, Blob: W.Blob, BlobEvent: W.BlobEvent, BluetoothRemoteGATTDescriptor: W.BluetoothRemoteGattDescriptor, Body: W.Body, HTMLBodyElement: W.BodyElement, BroadcastChannel: W.BroadcastChannel, BudgetState: W.BudgetState, HTMLButtonElement: W.ButtonElement, CDATASection: W.CDataSection, CacheStorage: W.CacheStorage, CanMakePaymentEvent: W.CanMakePaymentEvent, CanvasCaptureMediaStreamTrack: W.CanvasCaptureMediaStreamTrack, HTMLCanvasElement: W.CanvasElement, CanvasGradient: W.CanvasGradient, CanvasPattern: W.CanvasPattern, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CharacterData: W.CharacterData, Client: W.Client, Clients: W.Clients, ClipboardEvent: W.ClipboardEvent, CloseEvent: W.CloseEvent, Comment: W.Comment, CompositionEvent: W.CompositionEvent, HTMLContentElement: W.ContentElement, CookieStore: W.CookieStore, Coordinates: W.Coordinates, Credential: W.Credential, CredentialUserData: W.CredentialUserData, CredentialsContainer: W.CredentialsContainer, Crypto: W.Crypto, CryptoKey: W.CryptoKey, CSS: W.Css, CSSCharsetRule: W.CssCharsetRule, CSSConditionRule: W.CssConditionRule, CSSFontFaceRule: W.CssFontFaceRule, CSSGroupingRule: W.CssGroupingRule, CSSImageValue: W.CssImageValue, CSSImportRule: W.CssImportRule, CSSKeyframeRule: W.CssKeyframeRule, MozCSSKeyframeRule: W.CssKeyframeRule, WebKitCSSKeyframeRule: W.CssKeyframeRule, CSSKeyframesRule: W.CssKeyframesRule, MozCSSKeyframesRule: W.CssKeyframesRule, WebKitCSSKeyframesRule: W.CssKeyframesRule, CSSKeywordValue: W.CssKeywordValue, CSSMatrixComponent: W.CssMatrixComponent, CSSMediaRule: W.CssMediaRule, CSSNamespaceRule: W.CssNamespaceRule, CSSNumericValue: W.CssNumericValue, CSSPageRule: W.CssPageRule, CSSPerspective: W.CssPerspective, CSSPositionValue: W.CssPositionValue, CSSResourceValue: W.CssResourceValue, CSSRotation: W.CssRotation, CSSRule: W.CssRule, CSSScale: W.CssScale, CSSSkew: W.CssSkew, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSStyleRule: W.CssStyleRule, CSSStyleSheet: W.CssStyleSheet, CSSStyleValue: W.CssStyleValue, CSSSupportsRule: W.CssSupportsRule, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSTranslation: W.CssTranslation, CSSUnitValue: W.CssUnitValue, CSSUnparsedValue: W.CssUnparsedValue, CSSVariableReferenceValue: W.CssVariableReferenceValue, CSSViewportRule: W.CssViewportRule, CSSURLImageValue: W.CssurlImageValue, CustomElementRegistry: W.CustomElementRegistry, CustomEvent: W.CustomEvent, HTMLDListElement: W.DListElement, HTMLDataElement: W.DataElement, HTMLDataListElement: W.DataListElement, DataTransfer: W.DataTransfer, DataTransferItem: W.DataTransferItem, DataTransferItemList: W.DataTransferItemList, DedicatedWorkerGlobalScope: W.DedicatedWorkerGlobalScope, DeprecatedStorageInfo: W.DeprecatedStorageInfo, DeprecatedStorageQuota: W.DeprecatedStorageQuota, DeprecationReport: W.DeprecationReport, HTMLDetailsElement: W.DetailsElement, DetectedBarcode: W.DetectedBarcode, DetectedFace: W.DetectedFace, DetectedText: W.DetectedText, DeviceAcceleration: W.DeviceAcceleration, DeviceMotionEvent: W.DeviceMotionEvent, DeviceOrientationEvent: W.DeviceOrientationEvent, DeviceRotationRate: W.DeviceRotationRate, HTMLDialogElement: W.DialogElement, DirectoryEntry: W.DirectoryEntry, DirectoryReader: W.DirectoryReader, HTMLDivElement: W.DivElement, Document: W.Document, DocumentFragment: W.DocumentFragment, DocumentOrShadowRoot: W.DocumentOrShadowRoot, DocumentTimeline: W.DocumentTimeline, DOMError: W.DomError, DOMException: W.DomException, DOMImplementation: W.DomImplementation, Iterator: W.DomIterator, DOMMatrix: W.DomMatrix, DOMMatrixReadOnly: W.DomMatrixReadOnly, DOMParser: W.DomParser, DOMPoint: W.DomPoint, DOMPointReadOnly: W.DomPointReadOnly, DOMQuad: W.DomQuad, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMStringMap: W.DomStringMap, DOMTokenList: W.DomTokenList, Element: W.Element, HTMLEmbedElement: W.EmbedElement, Entry: W.Entry, ErrorEvent: W.ErrorEvent, Event: W.Event, InputEvent: W.Event, EventSource: W.EventSource, EventTarget: W.EventTarget, ExtendableEvent: W.ExtendableEvent, ExtendableMessageEvent: W.ExtendableMessageEvent, External: W.External, FaceDetector: W.FaceDetector, FederatedCredential: W.FederatedCredential, FetchEvent: W.FetchEvent, HTMLFieldSetElement: W.FieldSetElement, File: W.File, FileEntry: W.FileEntry, FileList: W.FileList, FileReader: W.FileReader, DOMFileSystem: W.FileSystem, FileWriter: W.FileWriter, FocusEvent: W.FocusEvent, FontFace: W.FontFace, FontFaceSet: W.FontFaceSet, FontFaceSetLoadEvent: W.FontFaceSetLoadEvent, FontFaceSource: W.FontFaceSource, ForeignFetchEvent: W.ForeignFetchEvent, FormData: W.FormData, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, GamepadButton: W.GamepadButton, GamepadEvent: W.GamepadEvent, GamepadPose: W.GamepadPose, Geolocation: W.Geolocation, Position: W.Geoposition, Gyroscope: W.Gyroscope, HTMLHRElement: W.HRElement, HashChangeEvent: W.HashChangeEvent, HTMLHeadElement: W.HeadElement, Headers: W.Headers, HTMLHeadingElement: W.HeadingElement, History: W.History, HTMLCollection: W.HtmlCollection, HTMLDocument: W.HtmlDocument, HTMLFormControlsCollection: W.HtmlFormControlsCollection, HTMLHtmlElement: W.HtmlHtmlElement, HTMLHyperlinkElementUtils: W.HtmlHyperlinkElementUtils, HTMLOptionsCollection: W.HtmlOptionsCollection, XMLHttpRequest: W.HttpRequest0, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, XMLHttpRequestUpload: W.HttpRequestUpload, HTMLIFrameElement: W.IFrameElement, IdleDeadline: W.IdleDeadline, ImageBitmap: W.ImageBitmap, ImageBitmapRenderingContext: W.ImageBitmapRenderingContext, ImageCapture: W.ImageCapture, ImageData: W.ImageData, HTMLImageElement: W.ImageElement, InputDeviceCapabilities: W.InputDeviceCapabilities, HTMLInputElement: W.InputElement, InstallEvent: W.InstallEvent, IntersectionObserver: W.IntersectionObserver, IntersectionObserverEntry: W.IntersectionObserverEntry, InterventionReport: W.InterventionReport, KeyboardEvent: W.KeyboardEvent, KeyframeEffect: W.KeyframeEffect, KeyframeEffectReadOnly: W.KeyframeEffectReadOnly, HTMLLIElement: W.LIElement, HTMLLabelElement: W.LabelElement, HTMLLegendElement: W.LegendElement, LinearAccelerationSensor: W.LinearAccelerationSensor, HTMLLinkElement: W.LinkElement, Location: W.Location, Magnetometer: W.Magnetometer, HTMLMapElement: W.MapElement, MediaCapabilities: W.MediaCapabilities, MediaCapabilitiesInfo: W.MediaCapabilitiesInfo, MediaDeviceInfo: W.MediaDeviceInfo, MediaDevices: W.MediaDevices, HTMLMediaElement: W.MediaElement, MediaEncryptedEvent: W.MediaEncryptedEvent, MediaError: W.MediaError, MediaKeyMessageEvent: W.MediaKeyMessageEvent, MediaKeySession: W.MediaKeySession, MediaKeyStatusMap: W.MediaKeyStatusMap, MediaKeySystemAccess: W.MediaKeySystemAccess, MediaKeys: W.MediaKeys, MediaKeysPolicy: W.MediaKeysPolicy, MediaList: W.MediaList, MediaMetadata: W.MediaMetadata, MediaQueryList: W.MediaQueryList, MediaQueryListEvent: W.MediaQueryListEvent, MediaRecorder: W.MediaRecorder, MediaSession: W.MediaSession, MediaSettingsRange: W.MediaSettingsRange, MediaSource: W.MediaSource, MediaStream: W.MediaStream, MediaStreamEvent: W.MediaStreamEvent, MediaStreamTrack: W.MediaStreamTrack, MediaStreamTrackEvent: W.MediaStreamTrackEvent, MemoryInfo: W.MemoryInfo, HTMLMenuElement: W.MenuElement, MessageChannel: W.MessageChannel, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, HTMLMetaElement: W.MetaElement, Metadata: W.Metadata, HTMLMeterElement: W.MeterElement, MIDIAccess: W.MidiAccess, MIDIConnectionEvent: W.MidiConnectionEvent, MIDIInput: W.MidiInput, MIDIInputMap: W.MidiInputMap, MIDIMessageEvent: W.MidiMessageEvent, MIDIOutput: W.MidiOutput, MIDIOutputMap: W.MidiOutputMap, MIDIPort: W.MidiPort, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, HTMLModElement: W.ModElement, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, MutationEvent: W.MutationEvent, MutationObserver: W.MutationObserver, WebKitMutationObserver: W.MutationObserver, MutationRecord: W.MutationRecord, NavigationPreloadManager: W.NavigationPreloadManager, Navigator: W.Navigator, NavigatorAutomationInformation: W.NavigatorAutomationInformation, NavigatorConcurrentHardware: W.NavigatorConcurrentHardware, NavigatorCookies: W.NavigatorCookies, NavigatorUserMediaError: W.NavigatorUserMediaError, NetworkInformation: W.NetworkInformation, Node: W.Node, NodeFilter: W.NodeFilter, NodeIterator: W.NodeIterator, NodeList: W.NodeList, RadioNodeList: W.NodeList, NonDocumentTypeChildNode: W.NonDocumentTypeChildNode, NonElementParentNode: W.NonElementParentNode, NoncedElement: W.NoncedElement, Notification: W.Notification, NotificationEvent: W.NotificationEvent, HTMLOListElement: W.OListElement, HTMLObjectElement: W.ObjectElement, OffscreenCanvas: W.OffscreenCanvas, OffscreenCanvasRenderingContext2D: W.OffscreenCanvasRenderingContext2D, HTMLOptGroupElement: W.OptGroupElement, HTMLOptionElement: W.OptionElement, OrientationSensor: W.OrientationSensor, HTMLOutputElement: W.OutputElement, OverconstrainedError: W.OverconstrainedError, PageTransitionEvent: W.PageTransitionEvent, PaintRenderingContext2D: W.PaintRenderingContext2D, PaintSize: W.PaintSize, PaintWorkletGlobalScope: W.PaintWorkletGlobalScope, HTMLParagraphElement: W.ParagraphElement, HTMLParamElement: W.ParamElement, PasswordCredential: W.PasswordCredential, Path2D: W.Path2D, PaymentAddress: W.PaymentAddress, PaymentInstruments: W.PaymentInstruments, PaymentManager: W.PaymentManager, PaymentRequest: W.PaymentRequest, PaymentRequestEvent: W.PaymentRequestEvent, PaymentRequestUpdateEvent: W.PaymentRequestUpdateEvent, PaymentResponse: W.PaymentResponse, Performance: W.Performance, PerformanceEntry: W.PerformanceEntry, PerformanceLongTaskTiming: W.PerformanceLongTaskTiming, PerformanceMark: W.PerformanceMark, PerformanceMeasure: W.PerformanceMeasure, PerformanceNavigation: W.PerformanceNavigation, PerformanceNavigationTiming: W.PerformanceNavigationTiming, PerformanceObserver: W.PerformanceObserver, PerformanceObserverEntryList: W.PerformanceObserverEntryList, PerformancePaintTiming: W.PerformancePaintTiming, PerformanceResourceTiming: W.PerformanceResourceTiming, PerformanceServerTiming: W.PerformanceServerTiming, PerformanceTiming: W.PerformanceTiming, PermissionStatus: W.PermissionStatus, Permissions: W.Permissions, PhotoCapabilities: W.PhotoCapabilities, HTMLPictureElement: W.PictureElement, Plugin: W.Plugin, PluginArray: W.PluginArray, PointerEvent: W.PointerEvent, PopStateEvent: W.PopStateEvent, PositionError: W.PositionError, HTMLPreElement: W.PreElement, Presentation: W.Presentation, PresentationAvailability: W.PresentationAvailability, PresentationConnection: W.PresentationConnection, PresentationConnectionAvailableEvent: W.PresentationConnectionAvailableEvent, PresentationConnectionCloseEvent: W.PresentationConnectionCloseEvent, PresentationConnectionList: W.PresentationConnectionList, PresentationReceiver: W.PresentationReceiver, PresentationRequest: W.PresentationRequest, ProcessingInstruction: W.ProcessingInstruction, HTMLProgressElement: W.ProgressElement, ProgressEvent: W.ProgressEvent, PromiseRejectionEvent: W.PromiseRejectionEvent, PublicKeyCredential: W.PublicKeyCredential, PushEvent: W.PushEvent, PushManager: W.PushManager, PushMessageData: W.PushMessageData, PushSubscription: W.PushSubscription, PushSubscriptionOptions: W.PushSubscriptionOptions, HTMLQuoteElement: W.QuoteElement, Range: W.Range, RelatedApplication: W.RelatedApplication, RelativeOrientationSensor: W.RelativeOrientationSensor, RemotePlayback: W.RemotePlayback, ReportBody: W.ReportBody, ReportingObserver: W.ReportingObserver, ResizeObserver: W.ResizeObserver, ResizeObserverEntry: W.ResizeObserverEntry, RTCCertificate: W.RtcCertificate, RTCDataChannel: W.RtcDataChannel, DataChannel: W.RtcDataChannel, RTCDataChannelEvent: W.RtcDataChannelEvent, RTCDTMFSender: W.RtcDtmfSender, RTCDTMFToneChangeEvent: W.RtcDtmfToneChangeEvent, RTCIceCandidate: W.RtcIceCandidate, mozRTCIceCandidate: W.RtcIceCandidate, RTCLegacyStatsReport: W.RtcLegacyStatsReport, RTCPeerConnection: W.RtcPeerConnection, webkitRTCPeerConnection: W.RtcPeerConnection, mozRTCPeerConnection: W.RtcPeerConnection, RTCPeerConnectionIceEvent: W.RtcPeerConnectionIceEvent, RTCRtpContributingSource: W.RtcRtpContributingSource, RTCRtpReceiver: W.RtcRtpReceiver, RTCRtpSender: W.RtcRtpSender, RTCSessionDescription: W.RtcSessionDescription, mozRTCSessionDescription: W.RtcSessionDescription, RTCStatsReport: W.RtcStatsReport, RTCStatsResponse: W.RtcStatsResponse, RTCTrackEvent: W.RtcTrackEvent, Screen: W.Screen, ScreenOrientation: W.ScreenOrientation, HTMLScriptElement: W.ScriptElement, ScrollState: W.ScrollState, ScrollTimeline: W.ScrollTimeline, SecurityPolicyViolationEvent: W.SecurityPolicyViolationEvent, HTMLSelectElement: W.SelectElement, Selection: W.Selection, Sensor: W.Sensor, SensorErrorEvent: W.SensorErrorEvent, ServiceWorker: W.ServiceWorker, ServiceWorkerContainer: W.ServiceWorkerContainer, ServiceWorkerGlobalScope: W.ServiceWorkerGlobalScope, ServiceWorkerRegistration: W.ServiceWorkerRegistration, HTMLShadowElement: W.ShadowElement, ShadowRoot: W.ShadowRoot, SharedArrayBuffer: W.SharedArrayBuffer, SharedWorker: W.SharedWorker, SharedWorkerGlobalScope: W.SharedWorkerGlobalScope, HTMLSlotElement: W.SlotElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, HTMLSourceElement: W.SourceElement, HTMLSpanElement: W.SpanElement, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognition: W.SpeechRecognition, SpeechRecognitionAlternative: W.SpeechRecognitionAlternative, SpeechRecognitionError: W.SpeechRecognitionError, SpeechRecognitionEvent: W.SpeechRecognitionEvent, SpeechRecognitionResult: W.SpeechRecognitionResult, SpeechSynthesis: W.SpeechSynthesis, SpeechSynthesisEvent: W.SpeechSynthesisEvent, SpeechSynthesisUtterance: W.SpeechSynthesisUtterance, SpeechSynthesisVoice: W.SpeechSynthesisVoice, StaticRange: W.StaticRange, Storage: W.Storage, StorageEvent: W.StorageEvent, StorageManager: W.StorageManager, HTMLStyleElement: W.StyleElement, StyleMedia: W.StyleMedia, StylePropertyMap: W.StylePropertyMap, StylePropertyMapReadonly: W.StylePropertyMapReadonly, StyleSheet: W.StyleSheet, SyncEvent: W.SyncEvent, SyncManager: W.SyncManager, HTMLTableCaptionElement: W.TableCaptionElement, HTMLTableCellElement: W.TableCellElement, HTMLTableDataCellElement: W.TableCellElement, HTMLTableHeaderCellElement: W.TableCellElement, HTMLTableColElement: W.TableColElement, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, TaskAttributionTiming: W.TaskAttributionTiming, HTMLTemplateElement: W.TemplateElement, Text: W.Text, HTMLTextAreaElement: W.TextAreaElement, TextDetector: W.TextDetector, TextEvent: W.TextEvent, TextMetrics: W.TextMetrics, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, HTMLTimeElement: W.TimeElement, TimeRanges: W.TimeRanges, HTMLTitleElement: W.TitleElement, Touch: W.Touch, TouchEvent: W.TouchEvent, TouchList: W.TouchList, TrackDefault: W.TrackDefault, TrackDefaultList: W.TrackDefaultList, HTMLTrackElement: W.TrackElement, TrackEvent: W.TrackEvent, TransitionEvent: W.TransitionEvent, WebKitTransitionEvent: W.TransitionEvent, TreeWalker: W.TreeWalker, TrustedHTML: W.TrustedHtml, TrustedScriptURL: W.TrustedScriptUrl, TrustedURL: W.TrustedUrl, UIEvent: W.UIEvent, HTMLUListElement: W.UListElement, UnderlyingSourceBase: W.UnderlyingSourceBase, HTMLUnknownElement: W.UnknownElement, URL: W.Url, URLSearchParams: W.UrlSearchParams, VR: W.VR, VRCoordinateSystem: W.VRCoordinateSystem, VRDevice: W.VRDevice, VRDeviceEvent: W.VRDeviceEvent, VRDisplay: W.VRDisplay, VRDisplayCapabilities: W.VRDisplayCapabilities, VRDisplayEvent: W.VRDisplayEvent, VREyeParameters: W.VREyeParameters, VRFrameData: W.VRFrameData, VRFrameOfReference: W.VRFrameOfReference, VRPose: W.VRPose, VRSession: W.VRSession, VRSessionEvent: W.VRSessionEvent, VRStageBounds: W.VRStageBounds, VRStageBoundsPoint: W.VRStageBoundsPoint, VRStageParameters: W.VRStageParameters, ValidityState: W.ValidityState, HTMLVideoElement: W.VideoElement, VideoPlaybackQuality: W.VideoPlaybackQuality, VideoTrack: W.VideoTrack, VideoTrackList: W.VideoTrackList, VisualViewport: W.VisualViewport, VTTCue: W.VttCue, VTTRegion: W.VttRegion, WebSocket: W.WebSocket0, WheelEvent: W.WheelEvent, Window: W.Window, DOMWindow: W.Window, WindowClient: W.WindowClient, Worker: W.Worker, WorkerGlobalScope: W.WorkerGlobalScope, WorkerPerformance: W.WorkerPerformance, WorkletAnimation: W.WorkletAnimation, WorkletGlobalScope: W.WorkletGlobalScope, XPathEvaluator: W.XPathEvaluator, XPathExpression: W.XPathExpression, XPathNSResolver: W.XPathNSResolver, XPathResult: W.XPathResult, XMLDocument: W.XmlDocument, XMLSerializer: W.XmlSerializer, XSLTProcessor: W.XsltProcessor, Attr: W._Attr, Bluetooth: W._Bluetooth, BluetoothCharacteristicProperties: W._BluetoothCharacteristicProperties, BluetoothDevice: W._BluetoothDevice, BluetoothRemoteGATTCharacteristic: W._BluetoothRemoteGATTCharacteristic, BluetoothRemoteGATTServer: W._BluetoothRemoteGATTServer, BluetoothRemoteGATTService: W._BluetoothRemoteGATTService, BluetoothUUID: W._BluetoothUUID, BudgetService: W._BudgetService, Cache: W._Cache, Clipboard: W._Clipboard, CSSRuleList: W._CssRuleList, DOMFileSystemSync: W._DOMFileSystemSync, DirectoryEntrySync: W._DirectoryEntrySync, DirectoryReaderSync: W._DirectoryReaderSync, DocumentType: W._DocumentType, ClientRect: W._DomRect, DOMRect: W._DomRect, EntrySync: W._EntrySync, FileEntrySync: W._FileEntrySync, FileReaderSync: W._FileReaderSync, FileWriterSync: W._FileWriterSync, GamepadList: W._GamepadList, HTMLAllCollection: W._HTMLAllCollection, HTMLDirectoryElement: W._HTMLDirectoryElement, HTMLFontElement: W._HTMLFontElement, HTMLFrameElement: W._HTMLFrameElement, HTMLFrameSetElement: W._HTMLFrameSetElement, HTMLMarqueeElement: W._HTMLMarqueeElement, Mojo: W._Mojo, MojoHandle: W._MojoHandle, MojoInterfaceInterceptor: W._MojoInterfaceInterceptor, MojoInterfaceRequestEvent: W._MojoInterfaceRequestEvent, MojoWatcher: W._MojoWatcher, NFC: W._NFC, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, PagePopupController: W._PagePopupController, Report: W._Report, Request: W._Request, ResourceProgressEvent: W._ResourceProgressEvent, Response: W._Response, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, SubtleCrypto: W._SubtleCrypto, USB: W._USB, USBAlternateInterface: W._USBAlternateInterface, USBConfiguration: W._USBConfiguration, USBConnectionEvent: W._USBConnectionEvent, USBDevice: W._USBDevice, USBEndpoint: W._USBEndpoint, USBInTransferResult: W._USBInTransferResult, USBInterface: W._USBInterface, USBIsochronousInTransferPacket: W._USBIsochronousInTransferPacket, USBIsochronousInTransferResult: W._USBIsochronousInTransferResult, USBIsochronousOutTransferPacket: W._USBIsochronousOutTransferPacket, USBIsochronousOutTransferResult: W._USBIsochronousOutTransferResult, USBOutTransferResult: W._USBOutTransferResult, WorkerLocation: W._WorkerLocation, WorkerNavigator: W._WorkerNavigator, Worklet: W._Worklet, IDBCursor: P.Cursor, IDBCursorWithValue: P.CursorWithValue, IDBDatabase: P.Database, IDBFactory: P.IdbFactory, IDBIndex: P.Index, IDBKeyRange: P.KeyRange, IDBObjectStore: P.ObjectStore, IDBObservation: P.Observation, IDBObserver: P.Observer, IDBObserverChanges: P.ObserverChanges, IDBOpenDBRequest: P.OpenDBRequest, IDBVersionChangeRequest: P.OpenDBRequest, IDBRequest: P.Request, IDBTransaction: P.Transaction, IDBVersionChangeEvent: P.VersionChangeEvent, SVGAElement: P.AElement, SVGAngle: P.Angle, SVGAnimateElement: P.AnimateElement, SVGAnimateMotionElement: P.AnimateMotionElement, SVGAnimateTransformElement: P.AnimateTransformElement, SVGAnimatedAngle: P.AnimatedAngle, SVGAnimatedBoolean: P.AnimatedBoolean, SVGAnimatedEnumeration: P.AnimatedEnumeration, SVGAnimatedInteger: P.AnimatedInteger, SVGAnimatedLength: P.AnimatedLength, SVGAnimatedLengthList: P.AnimatedLengthList, SVGAnimatedNumber: P.AnimatedNumber, SVGAnimatedNumberList: P.AnimatedNumberList, SVGAnimatedPreserveAspectRatio: P.AnimatedPreserveAspectRatio, SVGAnimatedRect: P.AnimatedRect, SVGAnimatedString: P.AnimatedString, SVGAnimatedTransformList: P.AnimatedTransformList, SVGAnimationElement: P.AnimationElement, SVGCircleElement: P.CircleElement, SVGClipPathElement: P.ClipPathElement, SVGDefsElement: P.DefsElement, SVGDescElement: P.DescElement, SVGDiscardElement: P.DiscardElement, SVGEllipseElement: P.EllipseElement, SVGFEBlendElement: P.FEBlendElement, SVGFEColorMatrixElement: P.FEColorMatrixElement, SVGFEComponentTransferElement: P.FEComponentTransferElement, SVGFECompositeElement: P.FECompositeElement, SVGFEConvolveMatrixElement: P.FEConvolveMatrixElement, SVGFEDiffuseLightingElement: P.FEDiffuseLightingElement, SVGFEDisplacementMapElement: P.FEDisplacementMapElement, SVGFEDistantLightElement: P.FEDistantLightElement, SVGFEFloodElement: P.FEFloodElement, SVGFEFuncAElement: P.FEFuncAElement, SVGFEFuncBElement: P.FEFuncBElement, SVGFEFuncGElement: P.FEFuncGElement, SVGFEFuncRElement: P.FEFuncRElement, SVGFEGaussianBlurElement: P.FEGaussianBlurElement, SVGFEImageElement: P.FEImageElement, SVGFEMergeElement: P.FEMergeElement, SVGFEMergeNodeElement: P.FEMergeNodeElement, SVGFEMorphologyElement: P.FEMorphologyElement, SVGFEOffsetElement: P.FEOffsetElement, SVGFEPointLightElement: P.FEPointLightElement, SVGFESpecularLightingElement: P.FESpecularLightingElement, SVGFESpotLightElement: P.FESpotLightElement, SVGFETileElement: P.FETileElement, SVGFETurbulenceElement: P.FETurbulenceElement, SVGFilterElement: P.FilterElement, SVGForeignObjectElement: P.ForeignObjectElement, SVGGElement: P.GElement, SVGGeometryElement: P.GeometryElement, SVGGraphicsElement: P.GraphicsElement, SVGImageElement: P.ImageElement0, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGLineElement: P.LineElement, SVGLinearGradientElement: P.LinearGradientElement, SVGMarkerElement: P.MarkerElement, SVGMaskElement: P.MaskElement, SVGMatrix: P.Matrix, SVGMetadataElement: P.MetadataElement, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPathElement: P.PathElement, SVGPatternElement: P.PatternElement, SVGPoint: P.Point0, SVGPointList: P.PointList, SVGPolygonElement: P.PolygonElement, SVGPolylineElement: P.PolylineElement, SVGPreserveAspectRatio: P.PreserveAspectRatio, SVGRadialGradientElement: P.RadialGradientElement, SVGRect: P.Rect, SVGRectElement: P.RectElement, SVGScriptElement: P.ScriptElement0, SVGSetElement: P.SetElement, SVGStopElement: P.StopElement, SVGStringList: P.StringList, SVGStyleElement: P.StyleElement0, SVGElement: P.SvgElement, SVGSVGElement: P.SvgSvgElement, SVGSwitchElement: P.SwitchElement, SVGSymbolElement: P.SymbolElement, SVGTSpanElement: P.TSpanElement, SVGTextContentElement: P.TextContentElement, SVGTextElement: P.TextElement, SVGTextPathElement: P.TextPathElement, SVGTextPositioningElement: P.TextPositioningElement, SVGTitleElement: P.TitleElement0, SVGTransform: P.Transform, SVGTransformList: P.TransformList, SVGUnitTypes: P.UnitTypes, SVGUseElement: P.UseElement, SVGViewElement: P.ViewElement, SVGGradientElement: P._GradientElement, SVGComponentTransferFunctionElement: P._SVGComponentTransferFunctionElement, SVGFEDropShadowElement: P._SVGFEDropShadowElement, SVGMPathElement: P._SVGMPathElement, AnalyserNode: P.AnalyserNode, RealtimeAnalyserNode: P.AnalyserNode, AudioBuffer: P.AudioBuffer, AudioBufferSourceNode: P.AudioBufferSourceNode, AudioContext: P.AudioContext, webkitAudioContext: P.AudioContext, AudioDestinationNode: P.AudioDestinationNode, AudioListener: P.AudioListener, AudioNode: P.AudioNode, AudioParam: P.AudioParam, AudioParamMap: P.AudioParamMap, AudioProcessingEvent: P.AudioProcessingEvent, AudioScheduledSourceNode: P.AudioScheduledSourceNode, AudioTrack: P.AudioTrack, AudioTrackList: P.AudioTrackList, AudioWorkletGlobalScope: P.AudioWorkletGlobalScope, AudioWorkletNode: P.AudioWorkletNode, AudioWorkletProcessor: P.AudioWorkletProcessor, BaseAudioContext: P.BaseAudioContext, BiquadFilterNode: P.BiquadFilterNode, ChannelMergerNode: P.ChannelMergerNode, AudioChannelMerger: P.ChannelMergerNode, ChannelSplitterNode: P.ChannelSplitterNode, AudioChannelSplitter: P.ChannelSplitterNode, ConstantSourceNode: P.ConstantSourceNode, ConvolverNode: P.ConvolverNode, DelayNode: P.DelayNode, DynamicsCompressorNode: P.DynamicsCompressorNode, GainNode: P.GainNode, AudioGainNode: P.GainNode, IIRFilterNode: P.IirFilterNode, MediaElementAudioSourceNode: P.MediaElementAudioSourceNode, MediaStreamAudioDestinationNode: P.MediaStreamAudioDestinationNode, MediaStreamAudioSourceNode: P.MediaStreamAudioSourceNode, OfflineAudioCompletionEvent: P.OfflineAudioCompletionEvent, OfflineAudioContext: P.OfflineAudioContext, OscillatorNode: P.OscillatorNode, Oscillator: P.OscillatorNode, PannerNode: P.PannerNode, AudioPannerNode: P.PannerNode, webkitAudioPannerNode: P.PannerNode, PeriodicWave: P.PeriodicWave, ScriptProcessorNode: P.ScriptProcessorNode, JavaScriptAudioNode: P.ScriptProcessorNode, StereoPannerNode: P.StereoPannerNode, WaveShaperNode: P.WaveShaperNode, WebGLActiveInfo: P.ActiveInfo, ANGLEInstancedArrays: P.AngleInstancedArrays, ANGLE_instanced_arrays: P.AngleInstancedArrays, WebGLBuffer: P.Buffer, WebGLCanvas: P.Canvas, WebGLColorBufferFloat: P.ColorBufferFloat, WebGLCompressedTextureASTC: P.CompressedTextureAstc, WebGLCompressedTextureATC: P.CompressedTextureAtc, WEBGL_compressed_texture_atc: P.CompressedTextureAtc, WebGLCompressedTextureETC1: P.CompressedTextureETC1, WEBGL_compressed_texture_etc1: P.CompressedTextureETC1, WebGLCompressedTextureETC: P.CompressedTextureEtc, WebGLCompressedTexturePVRTC: P.CompressedTexturePvrtc, WEBGL_compressed_texture_pvrtc: P.CompressedTexturePvrtc, WebGLCompressedTextureS3TC: P.CompressedTextureS3TC, WEBGL_compressed_texture_s3tc: P.CompressedTextureS3TC, WebGLCompressedTextureS3TCsRGB: P.CompressedTextureS3TCsRgb, WebGLContextEvent: P.ContextEvent, WebGLDebugRendererInfo: P.DebugRendererInfo, WEBGL_debug_renderer_info: P.DebugRendererInfo, WebGLDebugShaders: P.DebugShaders, WEBGL_debug_shaders: P.DebugShaders, WebGLDepthTexture: P.DepthTexture, WEBGL_depth_texture: P.DepthTexture, WebGLDrawBuffers: P.DrawBuffers, WEBGL_draw_buffers: P.DrawBuffers, EXTsRGB: P.EXTsRgb, EXT_sRGB: P.EXTsRgb, EXTBlendMinMax: P.ExtBlendMinMax, EXT_blend_minmax: P.ExtBlendMinMax, EXTColorBufferFloat: P.ExtColorBufferFloat, EXTColorBufferHalfFloat: P.ExtColorBufferHalfFloat, EXTDisjointTimerQuery: P.ExtDisjointTimerQuery, EXTDisjointTimerQueryWebGL2: P.ExtDisjointTimerQueryWebGL2, EXTFragDepth: P.ExtFragDepth, EXT_frag_depth: P.ExtFragDepth, EXTShaderTextureLOD: P.ExtShaderTextureLod, EXT_shader_texture_lod: P.ExtShaderTextureLod, EXTTextureFilterAnisotropic: P.ExtTextureFilterAnisotropic, EXT_texture_filter_anisotropic: P.ExtTextureFilterAnisotropic, WebGLFramebuffer: P.Framebuffer, WebGLGetBufferSubDataAsync: P.GetBufferSubDataAsync, WebGLLoseContext: P.LoseContext, WebGLExtensionLoseContext: P.LoseContext, WEBGL_lose_context: P.LoseContext, OESElementIndexUint: P.OesElementIndexUint, OES_element_index_uint: P.OesElementIndexUint, OESStandardDerivatives: P.OesStandardDerivatives, OES_standard_derivatives: P.OesStandardDerivatives, OESTextureFloat: P.OesTextureFloat, OES_texture_float: P.OesTextureFloat, OESTextureFloatLinear: P.OesTextureFloatLinear, OES_texture_float_linear: P.OesTextureFloatLinear, OESTextureHalfFloat: P.OesTextureHalfFloat, OES_texture_half_float: P.OesTextureHalfFloat, OESTextureHalfFloatLinear: P.OesTextureHalfFloatLinear, OES_texture_half_float_linear: P.OesTextureHalfFloatLinear, OESVertexArrayObject: P.OesVertexArrayObject, OES_vertex_array_object: P.OesVertexArrayObject, WebGLProgram: P.Program, WebGLQuery: P.Query, WebGLRenderbuffer: P.Renderbuffer, WebGLRenderingContext: P.RenderingContext, WebGL2RenderingContext: P.RenderingContext2, WebGLSampler: P.Sampler, WebGLShader: P.Shader, WebGLShaderPrecisionFormat: P.ShaderPrecisionFormat, WebGLSync: P.Sync, WebGLTexture: P.Texture, WebGLTimerQueryEXT: P.TimerQueryExt, WebGLTransformFeedback: P.TransformFeedback, WebGLUniformLocation: P.UniformLocation, WebGLVertexArrayObject: P.VertexArrayObject, WebGLVertexArrayObjectOES: P.VertexArrayObjectOes, WebGL: P.WebGL, WebGL2RenderingContextBase: P._WebGL2RenderingContextBase, Database: P.SqlDatabase, SQLError: P.SqlError, SQLResultSet: P.SqlResultSet, SQLResultSetRowList: P.SqlResultSetRowList, SQLTransaction: P.SqlTransaction});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLElement: false, AbortPaymentEvent: true, AbsoluteOrientationSensor: true, Accelerometer: false, AccessibleNode: true, AccessibleNodeList: true, AmbientLightSensor: true, HTMLAnchorElement: true, Animation: true, AnimationEffectReadOnly: false, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: false, AnimationEvent: true, AnimationPlaybackEvent: true, AnimationTimeline: false, AnimationWorkletGlobalScope: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, ApplicationCacheErrorEvent: true, HTMLAreaElement: true, HTMLAudioElement: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: false, HTMLBRElement: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: false, BackgroundFetchFailEvent: true, BackgroundFetchFetch: false, BackgroundFetchManager: true, BackgroundFetchRegistration: true, BackgroundFetchSettledFetch: true, BackgroundFetchedEvent: true, BarProp: true, BarcodeDetector: true, HTMLBaseElement: true, BatteryManager: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, Blob: false, BlobEvent: true, BluetoothRemoteGATTDescriptor: true, Body: false, HTMLBodyElement: true, BroadcastChannel: true, BudgetState: true, HTMLButtonElement: true, CDATASection: true, CacheStorage: true, CanMakePaymentEvent: true, CanvasCaptureMediaStreamTrack: true, HTMLCanvasElement: true, CanvasGradient: true, CanvasPattern: true, CanvasRenderingContext2D: true, CharacterData: false, Client: false, Clients: true, ClipboardEvent: true, CloseEvent: true, Comment: true, CompositionEvent: true, HTMLContentElement: true, CookieStore: true, Coordinates: true, Credential: false, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSCharsetRule: true, CSSConditionRule: false, CSSFontFaceRule: true, CSSGroupingRule: false, CSSImageValue: false, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSKeywordValue: true, CSSMatrixComponent: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSNumericValue: false, CSSPageRule: true, CSSPerspective: true, CSSPositionValue: true, CSSResourceValue: false, CSSRotation: true, CSSRule: false, CSSScale: true, CSSSkew: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSStyleRule: true, CSSStyleSheet: true, CSSStyleValue: false, CSSSupportsRule: true, CSSTransformComponent: false, CSSTransformValue: true, CSSTranslation: true, CSSUnitValue: true, CSSUnparsedValue: true, CSSVariableReferenceValue: true, CSSViewportRule: true, CSSURLImageValue: true, CustomElementRegistry: true, CustomEvent: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, DataTransfer: true, DataTransferItem: true, DataTransferItemList: true, DedicatedWorkerGlobalScope: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, HTMLDetailsElement: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, DeviceRotationRate: true, HTMLDialogElement: true, DirectoryEntry: true, DirectoryReader: true, HTMLDivElement: true, Document: false, DocumentFragment: false, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMException: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: false, DOMParser: true, DOMPoint: true, DOMPointReadOnly: false, DOMQuad: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMStringMap: true, DOMTokenList: true, Element: false, HTMLEmbedElement: true, Entry: false, ErrorEvent: true, Event: false, InputEvent: false, EventSource: true, EventTarget: false, ExtendableEvent: false, ExtendableMessageEvent: true, External: true, FaceDetector: true, FederatedCredential: true, FetchEvent: true, HTMLFieldSetElement: true, File: true, FileEntry: true, FileList: true, FileReader: true, DOMFileSystem: true, FileWriter: true, FocusEvent: true, FontFace: true, FontFaceSet: true, FontFaceSetLoadEvent: true, FontFaceSource: true, ForeignFetchEvent: true, FormData: true, HTMLFormElement: true, Gamepad: true, GamepadButton: true, GamepadEvent: true, GamepadPose: true, Geolocation: true, Position: true, Gyroscope: true, HTMLHRElement: true, HashChangeEvent: true, HTMLHeadElement: true, Headers: true, HTMLHeadingElement: true, History: true, HTMLCollection: false, HTMLDocument: true, HTMLFormControlsCollection: true, HTMLHtmlElement: true, HTMLHyperlinkElementUtils: true, HTMLOptionsCollection: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: false, XMLHttpRequestUpload: true, HTMLIFrameElement: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, ImageData: true, HTMLImageElement: true, InputDeviceCapabilities: true, HTMLInputElement: true, InstallEvent: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyboardEvent: true, KeyframeEffect: true, KeyframeEffectReadOnly: false, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, LinearAccelerationSensor: true, HTMLLinkElement: true, Location: true, Magnetometer: true, HTMLMapElement: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaDevices: true, HTMLMediaElement: false, MediaEncryptedEvent: true, MediaError: true, MediaKeyMessageEvent: true, MediaKeySession: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaList: true, MediaMetadata: true, MediaQueryList: true, MediaQueryListEvent: true, MediaRecorder: true, MediaSession: true, MediaSettingsRange: true, MediaSource: true, MediaStream: true, MediaStreamEvent: true, MediaStreamTrack: false, MediaStreamTrackEvent: true, MemoryInfo: true, HTMLMenuElement: true, MessageChannel: true, MessageEvent: true, MessagePort: true, HTMLMetaElement: true, Metadata: true, HTMLMeterElement: true, MIDIAccess: true, MIDIConnectionEvent: true, MIDIInput: true, MIDIInputMap: true, MIDIMessageEvent: true, MIDIOutput: true, MIDIOutputMap: true, MIDIPort: false, MimeType: true, MimeTypeArray: true, HTMLModElement: true, MouseEvent: false, DragEvent: false, MutationEvent: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: false, NavigatorCookies: true, NavigatorUserMediaError: true, NetworkInformation: true, Node: false, NodeFilter: true, NodeIterator: true, NodeList: true, RadioNodeList: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, Notification: true, NotificationEvent: true, HTMLOListElement: true, HTMLObjectElement: true, OffscreenCanvas: true, OffscreenCanvasRenderingContext2D: true, HTMLOptGroupElement: true, HTMLOptionElement: true, OrientationSensor: false, HTMLOutputElement: true, OverconstrainedError: true, PageTransitionEvent: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, HTMLParagraphElement: true, HTMLParamElement: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentRequest: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PaymentResponse: true, Performance: true, PerformanceEntry: false, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: false, PerformanceServerTiming: true, PerformanceTiming: true, PermissionStatus: true, Permissions: true, PhotoCapabilities: true, HTMLPictureElement: true, Plugin: true, PluginArray: true, PointerEvent: true, PopStateEvent: true, PositionError: true, HTMLPreElement: true, Presentation: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PresentationConnectionList: true, PresentationReceiver: true, PresentationRequest: true, ProcessingInstruction: true, HTMLProgressElement: true, ProgressEvent: false, PromiseRejectionEvent: true, PublicKeyCredential: true, PushEvent: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, HTMLQuoteElement: true, Range: true, RelatedApplication: true, RelativeOrientationSensor: true, RemotePlayback: true, ReportBody: false, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCDataChannel: true, DataChannel: true, RTCDataChannelEvent: true, RTCDTMFSender: true, RTCDTMFToneChangeEvent: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, RTCPeerConnectionIceEvent: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsReport: true, RTCStatsResponse: true, RTCTrackEvent: true, Screen: true, ScreenOrientation: true, HTMLScriptElement: true, ScrollState: true, ScrollTimeline: true, SecurityPolicyViolationEvent: true, HTMLSelectElement: true, Selection: true, Sensor: false, SensorErrorEvent: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, HTMLShadowElement: true, ShadowRoot: true, SharedArrayBuffer: true, SharedWorker: true, SharedWorkerGlobalScope: true, HTMLSlotElement: true, SourceBuffer: true, SourceBufferList: true, HTMLSourceElement: true, HTMLSpanElement: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognition: true, SpeechRecognitionAlternative: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechRecognitionResult: true, SpeechSynthesis: true, SpeechSynthesisEvent: true, SpeechSynthesisUtterance: true, SpeechSynthesisVoice: true, StaticRange: true, Storage: true, StorageEvent: true, StorageManager: true, HTMLStyleElement: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: false, StyleSheet: false, SyncEvent: true, SyncManager: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, TaskAttributionTiming: true, HTMLTemplateElement: true, Text: false, HTMLTextAreaElement: true, TextDetector: true, TextEvent: true, TextMetrics: true, TextTrack: true, TextTrackCue: false, TextTrackCueList: true, TextTrackList: true, HTMLTimeElement: true, TimeRanges: true, HTMLTitleElement: true, Touch: true, TouchEvent: true, TouchList: true, TrackDefault: true, TrackDefaultList: true, HTMLTrackElement: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UIEvent: false, HTMLUListElement: true, UnderlyingSourceBase: true, HTMLUnknownElement: true, URL: true, URLSearchParams: true, VR: true, VRCoordinateSystem: false, VRDevice: true, VRDeviceEvent: true, VRDisplay: true, VRDisplayCapabilities: true, VRDisplayEvent: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRSession: true, VRSessionEvent: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, HTMLVideoElement: true, VideoPlaybackQuality: true, VideoTrack: true, VideoTrackList: true, VisualViewport: true, VTTCue: true, VTTRegion: true, WebSocket: true, WheelEvent: true, Window: true, DOMWindow: true, WindowClient: true, Worker: true, WorkerGlobalScope: false, WorkerPerformance: true, WorkletAnimation: true, WorkletGlobalScope: false, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLDocument: true, XMLSerializer: true, XSLTProcessor: true, Attr: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, Clipboard: true, CSSRuleList: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, DocumentType: true, ClientRect: true, DOMRect: true, EntrySync: false, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, GamepadList: true, HTMLAllCollection: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, Mojo: true, MojoHandle: true, MojoInterfaceInterceptor: true, MojoInterfaceRequestEvent: true, MojoWatcher: true, NFC: true, NamedNodeMap: true, MozNamedAttrMap: true, PagePopupController: true, Report: true, Request: true, ResourceProgressEvent: true, Response: true, SpeechRecognitionResultList: true, StyleSheetList: true, SubtleCrypto: true, USB: true, USBAlternateInterface: true, USBConfiguration: true, USBConnectionEvent: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: false, IDBCursorWithValue: true, IDBDatabase: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObjectStore: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: false, IDBTransaction: true, IDBVersionChangeEvent: true, SVGAElement: true, SVGAngle: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGAnimationElement: false, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: false, SVGGraphicsElement: false, SVGImageElement: true, SVGLength: true, SVGLengthList: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMatrix: true, SVGMetadataElement: true, SVGNumber: true, SVGNumberList: true, SVGPathElement: true, SVGPatternElement: true, SVGPoint: true, SVGPointList: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGPreserveAspectRatio: true, SVGRadialGradientElement: true, SVGRect: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStringList: true, SVGStyleElement: true, SVGElement: false, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: false, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: false, SVGTitleElement: true, SVGTransform: true, SVGTransformList: true, SVGUnitTypes: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: false, SVGComponentTransferFunctionElement: false, SVGFEDropShadowElement: true, SVGMPathElement: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBuffer: true, AudioBufferSourceNode: true, AudioContext: true, webkitAudioContext: true, AudioDestinationNode: true, AudioListener: true, AudioNode: false, AudioParam: true, AudioParamMap: true, AudioProcessingEvent: true, AudioScheduledSourceNode: false, AudioTrack: true, AudioTrackList: true, AudioWorkletGlobalScope: true, AudioWorkletNode: true, AudioWorkletProcessor: true, BaseAudioContext: false, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OfflineAudioCompletionEvent: true, OfflineAudioContext: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, PeriodicWave: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLContextEvent: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLResultSetRowList: true, SQLTransaction: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$2$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$3$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$3$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$2$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$7 = function(a, b, c, d, e, f, g) {
    return this(a, b, c, d, e, f, g);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main0, []);
    else
      F.main0([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
